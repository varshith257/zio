"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[44596],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>d});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),g=r,d=m["".concat(p,".").concat(g)]||m[g]||u[g]||o;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},63917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(58168),r=(n(96540),n(15680));const o={id:"index",title:"ZIO AMQP"},i=void 0,s={unversionedId:"zio-amqp/index",id:"zio-amqp/index",title:"ZIO AMQP",description:"ZIO AMQP is a ZIO-based wrapper around the RabbitMQ client. It provides a streaming interface to AMQP queues and helps to prevent you from shooting yourself in the foot with thread-safety issues.",source:"@site/docs/zio-amqp/index.md",sourceDirName:"zio-amqp",slug:"/zio-amqp/",permalink:"/zio-amqp/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-amqp/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"ZIO AMQP"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO 2.x Interop Cats 3.x",permalink:"/zio2-interop-cats3/"},next:{title:"Overview",permalink:"/zio-aws/"}},p={},l=[{value:"Installation",id:"installation",level:2},{value:"Consuming",id:"consuming",level:2}],c={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"ZIO AMQP is a ZIO-based wrapper around the RabbitMQ client. It provides a streaming interface to AMQP queues and helps to prevent you from shooting yourself in the foot with thread-safety issues. "),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"}))," ",(0,r.yg)("img",{parentName:"p",src:"https://github.com/zio/zio-amqp/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,r.yg)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-amqp_2.13/"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-amqp_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,r.yg)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-amqp_2.13/"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-amqp_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,r.yg)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-amqp-docs_2.13"},(0,r.yg)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-amqp-docs_2.13/javadoc.svg",alt:"javadoc"}))," ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-amqp"},(0,r.yg)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-amqp?style=social",alt:"ZIO AMQP"}))),(0,r.yg)("h2",{id:"installation"},"Installation"),(0,r.yg)("p",null,"Add the following lines to your ",(0,r.yg)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-amqp" % "1.0.0-alpha.3"\n')),(0,r.yg)("p",null,"The latest version is built against ZIO 2.0.0-RC6."),(0,r.yg)("h2",{id:"consuming"},"Consuming"),(0,r.yg)("p",null,"The example below creates a connection to an AMQP server and then creates a channel. Both are created as Managed resources, which means they are closed automatically after using even in the face of errors."),(0,r.yg)("p",null,"The example then creates a stream of the messages consumed from a queue named ",(0,r.yg)("inlineCode",{parentName:"p"},'"queueName"'),". Each received message is acknowledged back to the AMQP server."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import nl.vroste.zio.amqp._\nimport nl.vroste.zio.amqp.model._\nimport java.net.URI\nimport zio._\nimport zio.Console._\n\nval channel: ZIO[Scope, Throwable, Channel] = for {\n  connection <- Amqp.connect(URI.create("amqp://my_amqp_server_uri"))\n  channel    <- Amqp.createChannel(connection)\n} yield channel\n\nval effect: ZIO[Any, Throwable, Unit] =\n  ZIO.scoped {\n    channel.flatMap { channel =>\n      channel\n        .consume(queue = QueueName("queueName"), consumerTag = ConsumerTag("test"))\n        .mapZIO { record =>\n          val deliveryTag = record.getEnvelope.getDeliveryTag\n          printLine(s"Received ${deliveryTag}: ${new String(record.getBody)}") *>\n            channel.ack(DeliveryTag(deliveryTag))\n        }\n        .take(5)\n        .runDrain\n    }\n  }\n')),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"https://zio.dev/docs/overview/overview_running_effects#defaultruntime"},"ZIO documentation")," for more information on how to run this effect or integrate with an existing application."))}u.isMDXComponent=!0}}]);