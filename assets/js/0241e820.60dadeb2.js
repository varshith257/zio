"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[68261],{15680:(e,o,r)=>{r.d(o,{xA:()=>s,yg:()=>y});var t=r(96540);function n(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}function i(e,o){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var o=1;o<arguments.length;o++){var r=null!=arguments[o]?arguments[o]:{};o%2?i(Object(r),!0).forEach((function(o){n(e,o,r[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(r,o))}))}return e}function a(e,o){if(null==e)return{};var r,t,n=function(e,o){if(null==e)return{};var r,t,n={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],o.indexOf(r)>=0||(n[r]=e[r]);return n}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],o.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var g=t.createContext({}),p=function(e){var o=t.useContext(g),r=o;return e&&(r="function"==typeof e?e(o):l(l({},o),e)),r},s=function(e){var o=p(e.components);return t.createElement(g.Provider,{value:o},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},d=t.forwardRef((function(e,o){var r=e.components,n=e.mdxType,i=e.originalType,g=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=p(r),d=n,y=m["".concat(g,".").concat(d)]||m[d]||c[d]||i;return r?t.createElement(y,l(l({ref:o},s),{},{components:r})):t.createElement(y,l({ref:o},s))}));function y(e,o){var r=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var a={};for(var g in o)hasOwnProperty.call(o,g)&&(a[g]=o[g]);a.originalType=e,a[m]="string"==typeof e?e:n,l[1]=a;for(var p=2;p<i;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},21629:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>g,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var t=r(58168),n=(r(96540),r(15680));const i={id:"opentelemetry-zio-logging",title:"OpenTelemetry ZIO Logging"},l=void 0,a={unversionedId:"zio-telemetry/opentelemetry-zio-logging",id:"zio-telemetry/opentelemetry-zio-logging",title:"OpenTelemetry ZIO Logging",description:"zio-opentelemetry logging facilities are implemented around OpenTelemetry Logging.",source:"@site/docs/zio-telemetry/opentelemetry-zio-logging.md",sourceDirName:"zio-telemetry",slug:"/zio-telemetry/opentelemetry-zio-logging",permalink:"/zio-telemetry/opentelemetry-zio-logging",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-telemetry/opentelemetry-zio-logging.md",tags:[],version:"current",frontMatter:{id:"opentelemetry-zio-logging",title:"OpenTelemetry ZIO Logging"},sidebar:"ecosystem-sidebar",previous:{title:"OpenTelemetry",permalink:"/zio-telemetry/opentelemetry"},next:{title:"OpenTelemetry Example",permalink:"/zio-telemetry/opentelemetry-example"}},g={},p=[{value:"Installation",id:"installation",level:2},{value:"Features",id:"features",level:2},{value:"Log formats",id:"log-formats",level:3}],s={toc:p},m="wrapper";function c(e){let{components:o,...r}=e;return(0,n.yg)(m,(0,t.A)({},s,r,{components:o,mdxType:"MDXLayout"}),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"zio-opentelemetry")," logging facilities are implemented around OpenTelemetry Logging."),(0,n.yg)("p",null,"In order to use ",(0,n.yg)("inlineCode",{parentName:"p"},"zio-opentelemetry")," feature with ",(0,n.yg)("inlineCode",{parentName:"p"},"zio-logging")," you should use ",(0,n.yg)("inlineCode",{parentName:"p"},"zio-opentelemetry-zio-logging")," module."),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"OpenTelemetry ZIO Logging")," contains utilities for combining ZIO Opentelemetry with ZIO Logging"),(0,n.yg)("h2",{id:"installation"},"Installation"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'"dev.zio" %% "zio-opentelemetry-zio-logging" % "<version>"\n')),(0,n.yg)("h2",{id:"features"},"Features"),(0,n.yg)("h3",{id:"log-formats"},"Log formats"),(0,n.yg)("p",null,"This library implements ",(0,n.yg)("a",{parentName:"p",href:"https://zio.dev/zio-logging/formatting-log-records"},"Log Format")," for span information (",(0,n.yg)("inlineCode",{parentName:"p"},"spanId")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"traceId"),").\nTo use them you need a ",(0,n.yg)("inlineCode",{parentName:"p"},"LogFormats")," service in the environment. For this, use the ",(0,n.yg)("inlineCode",{parentName:"p"},"ZioLogging.logFormats")," layer which in turn required a suitable ",(0,n.yg)("inlineCode",{parentName:"p"},"ContextStorage")," implementation."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'//> using scala "3.4.2"\n//> using dep dev.zio::zio:2.1.7\n//> using dep dev.zio::zio-opentelemetry:3.0.0-RC24\n//> using dep dev.zio::zio-opentelemetry-zio-logging:3.0.0-RC24\n//> using dep io.opentelemetry:opentelemetry-sdk:1.40.0\n//> using dep io.opentelemetry:opentelemetry-sdk-trace:1.40.0\n//> using dep io.opentelemetry:opentelemetry-exporter-logging-otlp:1.40.0\n//> using dep io.opentelemetry.semconv:opentelemetry-semconv:1.22.0-alpha\n\nimport io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingSpanExporter\nimport io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingLogRecordExporter\nimport io.opentelemetry.api.common.Attributes\nimport io.opentelemetry.sdk.trace.SdkTracerProvider\nimport io.opentelemetry.sdk.trace.`export`.SimpleSpanProcessor\nimport io.opentelemetry.sdk.logs.SdkLoggerProvider\nimport io.opentelemetry.sdk.logs.`export`.SimpleLogRecordProcessor\nimport io.opentelemetry.sdk.resources.Resource\nimport io.opentelemetry.semconv.ResourceAttributes\nimport io.opentelemetry.sdk.OpenTelemetrySdk\nimport io.opentelemetry.api\nimport zio.*\nimport zio.logging.console\nimport zio.logging.LogFormat._\nimport zio.telemetry.opentelemetry.tracing.Tracing\nimport zio.telemetry.opentelemetry.OpenTelemetry\nimport zio.telemetry.opentelemetry.context.ContextStorage\nimport zio.telemetry.opentelemetry.zio.logging.LogFormats\nimport zio.telemetry.opentelemetry.zio.logging.ZioLogging\n\nobject ZioLoggingApp extends ZIOAppDefault {\n\n  val instrumentationScopeName = "dev.zio.LoggingApp"\n  val resourceName             = "logging-app"\n\n  // Prints to stdout in OTLP Json format\n  val stdoutLoggerProvider: RIO[Scope, SdkLoggerProvider] =\n    for {\n      logRecordExporter  <- ZIO.fromAutoCloseable(ZIO.succeed(OtlpJsonLoggingLogRecordExporter.create()))\n      logRecordProcessor <- ZIO.fromAutoCloseable(ZIO.succeed(SimpleLogRecordProcessor.create(logRecordExporter)))\n      loggerProvider     <-\n        ZIO.fromAutoCloseable(\n          ZIO.succeed(\n            SdkLoggerProvider\n              .builder()\n              .setResource(Resource.create(Attributes.of(ResourceAttributes.SERVICE_NAME, resourceName)))\n              .addLogRecordProcessor(logRecordProcessor)\n              .build()\n          )\n        )\n    } yield loggerProvider\n\n  // Prints to stdout in OTLP Json format\n  val stdoutTracerProvider: RIO[Scope, SdkTracerProvider] =\n    for {\n      spanExporter   <- ZIO.fromAutoCloseable(ZIO.succeed(OtlpJsonLoggingSpanExporter.create()))\n      spanProcessor  <- ZIO.fromAutoCloseable(ZIO.succeed(SimpleSpanProcessor.create(spanExporter)))\n      tracerProvider <-\n        ZIO.fromAutoCloseable(\n          ZIO.succeed(\n            SdkTracerProvider\n              .builder()\n              .setResource(Resource.create(Attributes.of(ResourceAttributes.SERVICE_NAME, resourceName)))\n              .addSpanProcessor(spanProcessor)\n              .build()\n          )\n        )\n    } yield tracerProvider\n\n  val otelSdkLayer: TaskLayer[api.OpenTelemetry] =\n    OpenTelemetry.custom(\n      for {\n        tracerProvider <- stdoutTracerProvider\n        loggerProvider <- stdoutLoggerProvider\n        sdk            <- ZIO.fromAutoCloseable(\n                            ZIO.succeed(\n                              OpenTelemetrySdk\n                                .builder()\n                                .setTracerProvider(tracerProvider)\n                                .setLoggerProvider(loggerProvider)\n                                .build()\n                            )\n                          )\n      } yield sdk\n    )\n\n  // Setup zio-logging with spanId and traceId labels\n  val loggingLayer: URLayer[LogFormats, Unit] = ZLayer {\n    for {\n      logFormats     <- ZIO.service[LogFormats]\n      format          =\n        timestamp.fixed(32) |-|\n          level |-|\n          label("message", quoted(line)) |-|\n          logFormats.spanIdLabel |-|\n          logFormats.traceIdLabel\n      myConsoleLogger = console(format.highlight)\n    } yield Runtime.removeDefaultLoggers >>> myConsoleLogger\n  }.flatten\n\n  override def run =\n    ZIO\n      .serviceWithZIO[Tracing] { tracing =>\n        val logic = for {\n          // Read user input\n          message <- Console.readLine\n          // Print span and trace ids along with message\n          _       <- ZIO.logInfo(s"User message: $message")\n        } yield ()\n\n        // All log messages produced by `logic` will be correlated with a "root_span" automatically\n        logic @@ tracing.aspects.root("root_span")\n      }\n      .provide(\n        otelSdkLayer,\n        OpenTelemetry.logging(instrumentationScopeName),\n        OpenTelemetry.tracing(instrumentationScopeName),\n        OpenTelemetry.contextZIO,\n        ZioLogging.logFormats,\n        loggingLayer\n      )\n\n}\n')))}c.isMDXComponent=!0}}]);