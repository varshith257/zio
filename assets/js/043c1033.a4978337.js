"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[63572],{15680:(e,r,n)=>{n.d(r,{xA:()=>c,yg:()=>v});var t=n(96540);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=t.createContext({}),p=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(l.Provider,{value:r},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=s,v=m["".concat(l,".").concat(u)]||m[u]||y[u]||o;return n?t.createElement(v,a(a({ref:r},c),{},{components:n})):t.createElement(v,a({ref:r},c))}));function v(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=u;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[m]="string"==typeof e?e:s,a[1]=i;for(var p=2;p<o;p++)a[p]=n[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},44784:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var t=n(58168),s=(n(96540),n(15680));const o={id:"system",title:"System"},a=void 0,i={unversionedId:"reference/services/system",id:"reference/services/system",title:"System",description:"System service contains several useful functions related to system environments and properties. Both of system environments and system properties are key/value pairs. They are used to pass user-defined information to our application.",source:"@site/docs/reference/services/system.md",sourceDirName:"reference/services",slug:"/reference/services/system",permalink:"/reference/services/system",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/services/system.md",tags:[],version:"current",frontMatter:{id:"system",title:"System"},sidebar:"reference-sidebar",previous:{title:"Random",permalink:"/reference/services/random"},next:{title:"Programming Paradigms in ZIO",permalink:"/reference/architecture/programming-paradigms-in-zio"}},l={},p=[{value:"System Environment",id:"system-environment",level:2},{value:"System Property",id:"system-property",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}],c={toc:p},m="wrapper";function y(e){let{components:r,...n}=e;return(0,s.yg)(m,(0,t.A)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"System service contains several useful functions related to system environments and properties. Both of ",(0,s.yg)("strong",{parentName:"p"},"system environments")," and ",(0,s.yg)("strong",{parentName:"p"},"system properties")," are key/value pairs. They are used to pass user-defined information to our application."),(0,s.yg)("p",null,"Environment variables are global operating system level variables available to all applications running on the same machine, while properties are application-level variables provided to our application."),(0,s.yg)("h2",{id:"system-environment"},"System Environment"),(0,s.yg)("p",null,"The ",(0,s.yg)("inlineCode",{parentName:"p"},"env")," function retrieves the value of an environment variable:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nfor {\n  user <- System.env("USER")\n  _    <- user match {\n            case Some(value) => \n              Console.printLine(s"The USER env is: $value")\n            case None        => \n              Console.printLine("Oops! The USER env is not set")\n          }\n} yield ()\n')),(0,s.yg)("h2",{id:"system-property"},"System Property"),(0,s.yg)("p",null,"Also, the System service has a ",(0,s.yg)("inlineCode",{parentName:"p"},"property")," function to retrieve the value of a system property:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nfor {\n  user <- System.property("LOG_LEVEL")\n  _    <- user match {\n           case Some(value) => \n             Console.printLine(s"The LOG_LEVEL property is: $value")\n           case None => \n             Console.printLine("Oops! The LOG_LEVEL property is not set")\n         }\n} yield ()\n')),(0,s.yg)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,s.yg)("p",null,"With the ",(0,s.yg)("inlineCode",{parentName:"p"},"lineSeparator")," method, we can determine the line separator for the underlying platform:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},'System.lineSeparator\n// res2: String = """\n// """\n')))}y.isMDXComponent=!0}}]);