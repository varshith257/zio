"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[18909],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),g=a,m=c["".concat(l,".").concat(g)]||c[g]||u[g]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},17337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=n(58168),a=(n(96540),n(15680));const o={id:"route_pattern",title:"RoutePattern"},i=void 0,p={unversionedId:"zio-http/reference/routing/route_pattern",id:"zio-http/reference/routing/route_pattern",title:"RoutePattern",description:"RoutePattern defines a pattern for matching routes by examining both the HTTP method and the path. In addition to specifying a method, patterns contain segment patterns, which can consist of literals, integers, longs, and other segment types.",source:"@site/docs/zio-http/reference/routing/route_pattern.md",sourceDirName:"zio-http/reference/routing",slug:"/zio-http/reference/routing/route_pattern",permalink:"/zio-http/reference/routing/route_pattern",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/routing/route_pattern.md",tags:[],version:"current",frontMatter:{id:"route_pattern",title:"RoutePattern"},sidebar:"ecosystem-sidebar",previous:{title:"Routes",permalink:"/zio-http/reference/routing/routes"},next:{title:"PathCodec",permalink:"/zio-http/reference/routing/path_codec"}},l={},s=[{value:"Building RoutePatterns",id:"building-routepatterns",level:2},{value:"Matching Methods",id:"matching-methods",level:2}],d={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"RoutePattern")," defines a pattern for matching routes by examining both the HTTP method and the path. In addition to specifying a method, patterns contain segment patterns, which can consist of literals, integers, longs, and other segment types."),(0,a.yg)("p",null,"A ",(0,a.yg)("inlineCode",{parentName:"p"},"RoutePattern")," is composed of a ",(0,a.yg)("inlineCode",{parentName:"p"},"Method")," and a ",(0,a.yg)("inlineCode",{parentName:"p"},"PathCodec"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"case class RoutePattern[A](method: Method, pathCodec: PathCodec[A])\n")),(0,a.yg)("p",null,"To create a ",(0,a.yg)("inlineCode",{parentName:"p"},"Route")," we need to create a ",(0,a.yg)("inlineCode",{parentName:"p"},"RoutePattern")," and then bind it to a handler using the ",(0,a.yg)("inlineCode",{parentName:"p"},"->")," operator:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nRoutes(\n  Method.GET / "health-check" -> Handler.ok,\n)\n')),(0,a.yg)("p",null,"In the above example, ",(0,a.yg)("inlineCode",{parentName:"p"},'Method.Get / "health-check"')," represents a ",(0,a.yg)("inlineCode",{parentName:"p"},"RoutePattern")," used to match incoming requests with the appropriate path and method."),(0,a.yg)("h2",{id:"building-routepatterns"},"Building RoutePatterns"),(0,a.yg)("p",null,"Typically, the entry point for creating a route pattern is ",(0,a.yg)("inlineCode",{parentName:"p"},"Method"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'// GET /users\nval pattern: RoutePattern[Unit] =\n  Method.GET / "users"\n')),(0,a.yg)("p",null,"To match a path segment, various methods like ",(0,a.yg)("inlineCode",{parentName:"p"},"string"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"int"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"long"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"uuid")," are available."),(0,a.yg)("p",null,"For example, let's enhance the previous example to match a user id of type ",(0,a.yg)("inlineCode",{parentName:"p"},"Int"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'// GET /users/:user-id\nval pattern2: RoutePattern[Int] =\n  Method.GET / "users" / int("user-id")\n')),(0,a.yg)("p",null,"The type of the ",(0,a.yg)("inlineCode",{parentName:"p"},"RoutePattern")," becomes ",(0,a.yg)("inlineCode",{parentName:"p"},"Int")," because it matches a path segment of type ",(0,a.yg)("inlineCode",{parentName:"p"},"Int"),"."),(0,a.yg)("p",null,"Multiple path segments can be matched by combining multiple ",(0,a.yg)("inlineCode",{parentName:"p"},"PathCodec")," values. Let's extend the example to match a post id of type ",(0,a.yg)("inlineCode",{parentName:"p"},"String"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'// GET /users/:user-id/posts/:post-id\nval pattern2: RoutePattern[(Int, String)] =\n  Method.GET / "users" / int("user-id") / "posts" / string("post-id")\n')),(0,a.yg)("p",null,"With more path segments, the type of the ",(0,a.yg)("inlineCode",{parentName:"p"},"RoutePattern")," becomes a tuple of the types of the path segments, in this case, (Int, String)."),(0,a.yg)("h2",{id:"matching-methods"},"Matching Methods"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Method")," data type represent an HTTP method, and it offers the following predefined HTTP methods: ",(0,a.yg)("inlineCode",{parentName:"p"},"GET"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"POST"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"PUT"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"DELETE"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"PATCH"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"DELETE"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"TRACE"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"OPTIONS"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"HEAD"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"TRACE")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"CONNECT"),"."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"METHOD.ANY")," is a wildcard method that matches any method."))}u.isMDXComponent=!0}}]);