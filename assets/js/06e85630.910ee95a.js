"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23850],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>d});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),y=o,d=m["".concat(p,".").concat(y)]||m[y]||g[y]||r;return t?a.createElement(d,i(i({ref:n},s),{},{components:t})):a.createElement(d,i({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=y;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},48340:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(58168),o=(t(96540),t(15680));const r={id:"mock",title:"Mock"},i=void 0,l={unversionedId:"zio-mock/mock",id:"zio-mock/mock",title:"Mock",description:"A Mock[R] represents a mockable environment R. It's a base abstract class for every service we want to mock.",source:"@site/docs/zio-mock/mock.md",sourceDirName:"zio-mock",slug:"/zio-mock/mock",permalink:"/zio-mock/mock",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-mock/mock.md",tags:[],version:"current",frontMatter:{id:"mock",title:"Mock"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO Mock",permalink:"/zio-mock/"},next:{title:"Expectation",permalink:"/zio-mock/expectation"}},p={},c=[{value:"Creating a Mock Service",id:"creating-a-mock-service",level:2},{value:"Encoding Service Capabilities",id:"encoding-service-capabilities",level:2},{value:"Encoding Zero Argument Capability",id:"encoding-zero-argument-capability",level:3},{value:"Encoding Multiple Arguments Capability",id:"encoding-multiple-arguments-capability",level:3},{value:"Encoding Overloaded Capabilities",id:"encoding-overloaded-capabilities",level:3},{value:"Encoding Polymorphic Capabilities",id:"encoding-polymorphic-capabilities",level:3},{value:"Defining a Layer for the Mocked Service",id:"defining-a-layer-for-the-mocked-service",level:2},{value:"The Complete Example",id:"the-complete-example",level:2},{value:"More examples",id:"more-examples",level:2}],s={toc:c},m="wrapper";function g(e){let{components:n,...t}=e;return(0,o.yg)(m,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"A ",(0,o.yg)("inlineCode",{parentName:"p"},"Mock[R]")," represents a mockable environment ",(0,o.yg)("inlineCode",{parentName:"p"},"R"),". It's a base abstract class for every service we want to mock."),(0,o.yg)("h2",{id:"creating-a-mock-service"},"Creating a Mock Service"),(0,o.yg)("p",null,"In order to create a mock object, we should define an object which implements the ",(0,o.yg)("inlineCode",{parentName:"p"},"Mock")," abstract class in the test sources. To implement the ",(0,o.yg)("inlineCode",{parentName:"p"},"Mock")," need to define ",(0,o.yg)("em",{parentName:"p"},"capability tags")," and the ",(0,o.yg)("em",{parentName:"p"},"compose layer"),":"),(0,o.yg)("h2",{id:"encoding-service-capabilities"},"Encoding Service Capabilities"),(0,o.yg)("p",null,"Capabilities are service functionalities that are accessible from the client-side. For example, in the following service the ",(0,o.yg)("inlineCode",{parentName:"p"},"send")," method is a service capability:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\ntrait UserService {\n  def register(username: String, age: Int, email: String): Task[Unit]\n}\n")),(0,o.yg)("p",null,"A ",(0,o.yg)("strong",{parentName:"p"},"capability tag")," encodes all information needed to mock the target capability. It is just a value that extends the ",(0,o.yg)("inlineCode",{parentName:"p"},"zio.mock.Capability[R, I, E, A]")," type constructor, where:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"R")," is the type of ",(0,o.yg)("em",{parentName:"li"},"environment")," the method belongs to"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"I")," is the type of ",(0,o.yg)("em",{parentName:"li"},"methods input arguments")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"E")," is the type of ",(0,o.yg)("em",{parentName:"li"},"error")," it can fail with"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"A")," is the type of ",(0,o.yg)("em",{parentName:"li"},"return value")," it can produce")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"Capability")," type is not publicly available, instead we have to extend ",(0,o.yg)("inlineCode",{parentName:"p"},"Mock")," dependent types ",(0,o.yg)("inlineCode",{parentName:"p"},"Effect"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Method"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Sink")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"Stream"),"."),(0,o.yg)("p",null,"We can have 4 types of capabilities inside a service:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"strong"},"Effect"))," \u2014 describes an effectful ZIO operation"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"strong"},"Method"))," \u2014 describes an ordinary scala function"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"strong"},"Sink"))," \u2014 describes an effectful ZIO Sink"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"strong"},"Stream"))," \u2014 describes an effectful ZIO Stream")),(0,o.yg)("p",null,"Let's say we have the following service:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.mock._\nimport zio.stream._\n\ntrait ExampleService {\n  def exampleEffect(i: Int): Task[String]\n  def exampleMethod(i: Int): String\n  def exampleSink(a: Int): Sink[Throwable, Int, Nothing, List[Int]]\n  def exampleStream(a: Int): Stream[Throwable, String]\n}\n")),(0,o.yg)("p",null,"Therefore, the mock service should have the following ",(0,o.yg)("em",{parentName:"p"},"capability tags"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.mock._\n\nobject MockExampleService extends Mock[ExampleService] {\n  object ExampleEffect extends Effect[Int, Throwable, String]\n  object ExampleMethod extends Method[Int, Throwable, String]\n  object ExampleSink   extends Sink[Any, Throwable, Int, Nothing, List[Int]]\n  object ExampleStream extends Stream[Int, Throwable, String]\n  \n  override val compose: URLayer[Proxy, ExampleService] = ???\n}\n")),(0,o.yg)("p",null,"In this example, all ",(0,o.yg)("inlineCode",{parentName:"p"},"ExampleEffect"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"ExampleMethod"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"ExampleSink"),", and ",(0,o.yg)("inlineCode",{parentName:"p"},"ExampleStream")," are capability tags. Each of these capability tags encodes all information needed to mock the target capability."),(0,o.yg)("p",null,"For example, the ",(0,o.yg)("inlineCode",{parentName:"p"},"ExampleEffect")," capability tag encodes the type of ",(0,o.yg)("em",{parentName:"p"},"environments"),", ",(0,o.yg)("em",{parentName:"p"},"arguments")," (inputs), the ",(0,o.yg)("em",{parentName:"p"},"error channel"),", and also the ",(0,o.yg)("em",{parentName:"p"},"success channel")," of the ",(0,o.yg)("inlineCode",{parentName:"p"},"exampleEffect(i: Int)")," method."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"")),(0,o.yg)("p",null,"We encode service capabilities according to the following scheme:"),(0,o.yg)("h3",{id:"encoding-zero-argument-capability"},"Encoding Zero Argument Capability"),(0,o.yg)("p",null,"For zero arguments the type is ",(0,o.yg)("inlineCode",{parentName:"p"},"Unit")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\ntrait ZeroParamService {\n  def zeroParams: Task[Int]\n}\n")),(0,o.yg)("p",null,"So the capability tag of ",(0,o.yg)("inlineCode",{parentName:"p"},"zeroParams")," should be:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.mock._\n\nobject MockZeroParamService extends Mock[ZeroParamService] {\n  object ZeroParams extends Effect[Unit, Throwable, Int]\n  \n  override val compose = ???\n}\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"")),(0,o.yg)("h3",{id:"encoding-multiple-arguments-capability"},"Encoding Multiple Arguments Capability"),(0,o.yg)("p",null,"For one or more arguments, regardless of how many parameter lists, the type is a ",(0,o.yg)("inlineCode",{parentName:"p"},"TupleN")," where ",(0,o.yg)("inlineCode",{parentName:"p"},"N")," is the size of arguments list"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"Note:")),(0,o.yg)("p",{parentName:"blockquote"},"We're using tuples to represent multiple argument methods, which follows with a limit to max 22 arguments, as is Scala itself limited.")),(0,o.yg)("p",null,"If the capability has more than one argument, we should encode the argument types in the ",(0,o.yg)("inlineCode",{parentName:"p"},"Tuple")," data type. For example, if we have the following service:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\ntrait ManyParamsService {\n  def manyParams(a: Int, b: String, c: Long): Task[Int]\n  def manyParamLists(a: Int, b: String)(c: Long): Task[Int]\n}\n")),(0,o.yg)("p",null,"We should encode that with the following capability tag:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.mock._\n\ntrait MockExampleService extends Mock[ManyParamsService] {\n  object ManyParams     extends Method[(Int, String, Long), Throwable, String]\n  object ManyParamLists extends Method[(Int, String, Long), Throwable, String]\n  \n  override val compose = ???\n}\n")),(0,o.yg)("h3",{id:"encoding-overloaded-capabilities"},"Encoding Overloaded Capabilities"),(0,o.yg)("p",null,"For overloaded methods, we nest a list of numbered objects, each representing subsequent overloads:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"// Main sources\n\nimport zio._\nimport zio.stream.{ ZSink, ZStream }\n\ntrait OverloadedService {\n  def overloaded(arg1: Int)                  : UIO[String]\n  def overloaded(arg1: Long)                 : UIO[String]\n}\n")),(0,o.yg)("p",null,"We encode both overloaded capabilities by using numbered objects inside a nested object:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"// Test sources\n\nimport zio.mock._\n\nobject MockOervloadedService extends Mock[OverloadedService] {\n  object Overloaded {\n    object _0 extends Effect[Int, Nothing, String]\n    object _1 extends Effect[Long, Nothing, String]\n  }\n\n  val compose: URLayer[Proxy, OverloadedService] = ???\n}\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"")),(0,o.yg)("h3",{id:"encoding-polymorphic-capabilities"},"Encoding Polymorphic Capabilities"),(0,o.yg)("p",null,"Mocking polymorphic methods is also supported, but the interface must require ",(0,o.yg)("inlineCode",{parentName:"p"},"zio.Tag")," implicit evidence for each type parameter:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"// main sources\nimport zio._\n\ntrait PolyService {\n  def polyInput[I: Tag](input: I): Task[String]\n  def polyError[E: Tag](input: Int): IO[E, String]\n  def polyOutput[A: Tag](input: Int): Task[A]\n  def polyAll[I: Tag, E: Tag, A: Tag](input: I): IO[E, A]\n}\n")),(0,o.yg)("p",null,"In the test sources we construct partially applied ",(0,o.yg)("em",{parentName:"p"},"capability tags")," by extending ",(0,o.yg)("inlineCode",{parentName:"p"},"Method.Poly")," family. The unknown types must be provided at call site. To produce a final monomorphic ",(0,o.yg)("inlineCode",{parentName:"p"},"Method")," tag we must use the ",(0,o.yg)("inlineCode",{parentName:"p"},"of")," combinator and pass the missing types:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"// test sources\nimport zio.mock._\n\nobject MockPolyService extends Mock[PolyService] {\n\n  object PolyInput  extends Poly.Effect.Input[Throwable, String]\n  object PolyError  extends Poly.Effect.Error[Int, String]\n  object PolyOutput extends Poly.Effect.Output[Int, Throwable]\n  object PolyAll    extends Poly.Effect.InputErrorOutput\n\n  // We will learn about the compose layer in the next section\n  val compose: URLayer[Proxy, PolyService] =\n    ZLayer {\n      for {\n        proxy <- ZIO.service[Proxy]\n      } yield new PolyService {\n            def polyInput[I: Tag](input: I)               = proxy(PolyInput.of[I], input)\n            def polyError[E: Tag](input: Int)             = proxy(PolyError.of[E], input)\n            def polyOutput[A: Tag](input: Int)            = proxy(PolyOutput.of[A], input)\n            def polyAll[I: Tag, E: Tag, A: Tag](input: I) = proxy(PolyAll.of[I, E, A], input)\n        }\n    }\n}\n")),(0,o.yg)("p",null,"Similarly, we use the same ",(0,o.yg)("inlineCode",{parentName:"p"},"of")," combinator to refer to concrete monomorphic call in our test suite when building expectations:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport MockPolyService._\n\nval exp06 = PolyInput.of[String](\n  Assertion.equalTo("foo"),\n  Expectation.value("bar")\n)\n\nval exp07 = PolyInput.of[Int](\n  Assertion.equalTo(42),\n  Expectation.failure(new Exception)\n)\n\nval exp08 = PolyInput.of[Long](\n  Assertion.equalTo(42L),\n  Expectation.value("baz")\n)\n\nval exp09 = PolyAll.of[Int, Throwable, String](\n  Assertion.equalTo(42),\n  Expectation.value("foo")\n)\n\nval exp10 = PolyAll.of[Int, Throwable, String](\n  Assertion.equalTo(42),\n  Expectation.failure(new Exception)\n)\n')),(0,o.yg)("h2",{id:"defining-a-layer-for-the-mocked-service"},"Defining a Layer for the Mocked Service"),(0,o.yg)("p",null,"Finally, we need to define a ",(0,o.yg)("em",{parentName:"p"},"compose layer")," that can create our environment from a ",(0,o.yg)("inlineCode",{parentName:"p"},"Proxy"),". A ",(0,o.yg)("inlineCode",{parentName:"p"},"Proxy")," holds the mock state and serves predefined responses to calls."),(0,o.yg)("p",null,"So again, assume we have the following service:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.mock._\n\ntrait ExampleService {\n  def exampleEffect(i: Int): Task[String]\n  def exampleMethod(i: Int): String\n  def exampleSink(a: Int): stream.Sink[Throwable, Int, Nothing, List[Int]]\n  def exampleStream(a: Int): stream.Stream[Throwable, String]\n}\n")),(0,o.yg)("p",null,"In this step, we need to provide a layer in which used to construct the mocked object. To do that, we should obtain the ",(0,o.yg)("inlineCode",{parentName:"p"},"Proxy")," data type from the environment and then implement the service interface by wrapping all capability tags with proxy:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"object MockExampleService extends Mock[ExampleService] {\n  object ExampleEffect extends Effect[Int, Throwable, String]\n  object ExampleMethod extends Method[Int, Throwable, String]\n  object ExampleSink extends Sink[Any, Throwable, Int, Nothing, List[Int]]\n  object ExampleStream extends Stream[Int, Throwable, String]\n\n  override val compose: URLayer[Proxy, ExampleService] =\n    ZLayer {\n      ZIO.serviceWithZIO[Proxy] { proxy =>\n        withRuntime[Proxy, ExampleService] { runtime =>\n          ZIO.succeed {\n            new ExampleService {\n              override def exampleEffect(i: Int): Task[String] =\n                proxy(ExampleEffect, i)\n\n              override def exampleMethod(i: Int): String =\n                Unsafe.unsafe { implicit unsafe =>\n                  runtime.unsafe.run(proxy(ExampleMethod, i)).getOrThrow()\n                }\n\n              override def exampleSink(a: Int): stream.Sink[Throwable, Int, Nothing, List[Int]] =\n                Unsafe.unsafe { implicit unsafe =>\n                  runtime.unsafe.run(proxy(ExampleSink, a)).getOrThrow()\n                }\n\n              override def exampleStream(a: Int): stream.Stream[Throwable, String] =\n                Unsafe.unsafe { implicit unsafe =>\n                  runtime.unsafe.run(proxy(ExampleStream, a)).getOrThrow()\n                }\n            }\n          }\n        }\n      }\n    }\n}\n")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"Note:")," The ",(0,o.yg)("inlineCode",{parentName:"p"},"withRuntime")," helper is defined in ",(0,o.yg)("inlineCode",{parentName:"p"},"Mock"),". It accesses the Runtime via ",(0,o.yg)("inlineCode",{parentName:"p"},"ZIO.runtime")," and if you're on JS platform, it will replace the executor to an unyielding one.")),(0,o.yg)("p",null,"A reference to this layer is passed to ",(0,o.yg)("em",{parentName:"p"},"capability tags"),", so it can be used to automatically build environment for composed expectations on multiple services."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"")),(0,o.yg)("h2",{id:"the-complete-example"},"The Complete Example"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"trait AccountEvent\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'// main sources\n\nimport zio._\nimport zio.mock._\n\ntrait AccountObserver {\n  def processEvent(event: AccountEvent): UIO[Unit]\n  def runCommand(): UIO[Unit]\n}\n\nobject AccountObserver {\n  def processEvent(event: AccountEvent) =\n    ZIO.serviceWithZIO[AccountObserver](_.processEvent(event))\n\n  def runCommand() =\n    ZIO.serviceWithZIO[AccountObserver](_.runCommand())\n}\n\ncase class AccountObserverLive(console: Console) extends AccountObserver {\n  def processEvent(event: AccountEvent): UIO[Unit] =\n    for {\n      _    <- console.printLine(s"Got $event").orDie\n      line <- console.readLine.orDie\n      _    <- console.printLine(s"You entered: $line").orDie\n    } yield ()\n\n  def runCommand(): UIO[Unit] =\n    console.printLine("Done!").orDie\n}\n\nobject AccountObserverLive {\n  val layer =\n    ZLayer {\n      for {\n        console <- ZIO.service[Console]\n      } yield AccountObserverLive(console)\n    }\n}\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"// test sources\n\nobject AccountObserverMock extends Mock[AccountObserver] {\n\n  object ProcessEvent extends Effect[AccountEvent, Nothing, Unit]\n  object RunCommand   extends Effect[Unit, Nothing, Unit]\n\n  val compose: URLayer[Proxy, AccountObserver] =\n    ZLayer {\n      for {\n        proxy <- ZIO.service[Proxy]\n      } yield new AccountObserver {\n        def processEvent(event: AccountEvent) = proxy(ProcessEvent, event)\n        def runCommand(): UIO[Unit]           = proxy(RunCommand)\n      }\n    }\n}\n")),(0,o.yg)("h2",{id:"more-examples"},"More examples"),(0,o.yg)("p",null,"We can find more examples in the ",(0,o.yg)("inlineCode",{parentName:"p"},"examples")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"test-tests")," subproject:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/zio/zio/blob/master/examples/shared/src/test/scala/zio/examples/test/MockExampleSpec.scala"},"MockExampleSpec")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/EmptyMockSpec.scala"},"EmptyMockSpec")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/ComposedMockSpec.scala"},"ComposedMockSpec")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/ComposedEmptyMockSpec.scala"},"ComposedEmptyMockSpec")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/zio/zio/blob/master/test-tests/shared/src/test/scala/zio/test/mock/PolyMockSpec.scala"},"PolyMockSpec"))),(0,o.yg)("p",null,"An ",(0,o.yg)("inlineCode",{parentName:"p"},"Expectation[R]")," is an immutable tree structure that represents expectations on environment ",(0,o.yg)("inlineCode",{parentName:"p"},"R"),"."))}g.isMDXComponent=!0}}]);