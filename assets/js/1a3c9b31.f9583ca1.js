"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[9242],{15680:(e,a,n)=>{n.d(a,{xA:()=>p,yg:()=>u});var r=n(96540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=r.createContext({}),g=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},p=function(e){var a=g(e.components);return r.createElement(s.Provider,{value:a},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=g(n),c=t,u=m["".concat(s,".").concat(c)]||m[c]||y[c]||i;return n?r.createElement(u,l(l({ref:a},p),{},{components:n})):r.createElement(u,l({ref:a},p))}));function u(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[m]="string"==typeof e?e:t,l[1]=o;for(var g=2;g<i;g++)l[g]=n[g];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},77531:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var r=n(58168),t=(n(96540),n(15680));const i={id:"index",title:"Introduction"},l=void 0,o={unversionedId:"reference/index",id:"reference/index",title:"Introduction",description:"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:",source:"@site/docs/reference/index.md",sourceDirName:"reference",slug:"/reference/",permalink:"/reference/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction"},sidebar:"reference-sidebar",next:{title:"ZIO",permalink:"/reference/core/zio/"}},s={},g=[{value:"Core Data Types",id:"core-data-types",level:2},{value:"Contextual Data Types",id:"contextual-data-types",level:2},{value:"State Management",id:"state-management",level:2},{value:"Concurrency",id:"concurrency",level:2},{value:"Fiber Primitives",id:"fiber-primitives",level:3},{value:"Concurrency Primitives",id:"concurrency-primitives",level:3},{value:"Synchronization Aids",id:"synchronization-aids",level:3},{value:"STM",id:"stm",level:3},{value:"Resource Management",id:"resource-management",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Metrics",id:"metrics",level:2},{value:"Testing",id:"testing",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}],p={toc:g},m="wrapper";function y(e){let{components:a,...n}=e;return(0,t.yg)(m,(0,r.A)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#core-data-types"},"Core Data Types")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#contextual-data-types"},"Contextual Data Types")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#state-management"},"State Management")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#concurrency"},"Concurrency"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#fiber-primitives"},"Fiber Primitives")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#concurrency-primitives"},"Concurrency Primitives")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#synchronization-aids"},"Synchronization Aids")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#stm"},"STM")))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#resource-management"},"Resource Management")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#streaming"},"Streaming")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#metrics"},"Metrics")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#testing"},"Testing")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#miscellaneous"},"Miscellaneous"))),(0,t.yg)("h2",{id:"core-data-types"},"Core Data Types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/zio/"},"ZIO"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO")," is a value that models an effectful program, which might fail or succeed.",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/zio/uio"},"UIO"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"UIO[A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[Any, Nothing, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/zio/urio"},"URIO"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"URIO[R, A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[R, Nothing, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/zio/task"},"Task"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Task[A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[Any, Throwable, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/zio/rio"},"RIO"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"RIO[R, A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[R, Throwable, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/zio/io"},"IO"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"IO[E, A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[Any, E, A]"),"."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/zioapp"},"ZIOApp"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIOApp")," and the ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIOAppDefault")," are entry points for ZIO applications."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/runtime"},"Runtime"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Runtime[R]")," is capable of executing tasks within an environment ",(0,t.yg)("inlineCode",{parentName:"li"},"R"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/exit"},"Exit"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Exit[E, A]")," describes the result of executing an ",(0,t.yg)("inlineCode",{parentName:"li"},"IO")," value."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/core/cause"},"Cause"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Cause[E]")," is a description of a full story of a fiber failure.")),(0,t.yg)("h2",{id:"contextual-data-types"},"Contextual Data Types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/contextual/zenvironment"},"ZEnvironment"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ZEnvironment[R]")," is a built-in type-level map for the ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO")," data type which is responsible for maintaining the environment of a ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO")," effect."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/contextual/zlayer"},"ZLayer"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ZLayer[-RIn, +E, +ROut]")," is a recipe to build an environment of type ",(0,t.yg)("inlineCode",{parentName:"li"},"ROut"),", starting from a value ",(0,t.yg)("inlineCode",{parentName:"li"},"RIn"),", and possibly producing an error ",(0,t.yg)("inlineCode",{parentName:"li"},"E")," during creation.",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/contextual/rlayer"},"RLayer"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"RLayer[-RIn, +ROut]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZLayer[RIn, Throwable, ROut]"),", which represents a layer that requires ",(0,t.yg)("inlineCode",{parentName:"li"},"RIn")," as its input, it may fail with ",(0,t.yg)("inlineCode",{parentName:"li"},"Throwable")," value, or returns ",(0,t.yg)("inlineCode",{parentName:"li"},"ROut")," as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/contextual/ulayer"},"ULayer"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ULayer[+ROut]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZLayer[Any, Nothing, ROut]"),", which represents a layer that doesn't require any services as its input, it can't fail, and returns ",(0,t.yg)("inlineCode",{parentName:"li"},"ROut")," as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/contextual/layer"},"Layer"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Layer[+E, +ROut]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZLayer[Any, E, ROut]"),", which represents a layer that doesn't require any services, it may fail with an error type of ",(0,t.yg)("inlineCode",{parentName:"li"},"E"),", and returns ",(0,t.yg)("inlineCode",{parentName:"li"},"ROut")," as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/contextual/urlayer"},"URLayer"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"URLayer[-RIn, +ROut]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZLayer[RIn, Nothing, ROut]"),", which represents a layer that requires ",(0,t.yg)("inlineCode",{parentName:"li"},"RIn")," as its input, it can't fail, and returns ",(0,t.yg)("inlineCode",{parentName:"li"},"ROut")," as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/contextual/tasklayer"},"TaskLayer"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"TaskLayer[+ROut]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZLayer[Any, Throwable, ROut]"),", which represents a layer that doesn't require any services as its input, it may fail with ",(0,t.yg)("inlineCode",{parentName:"li"},"Throwable")," value, and returns ",(0,t.yg)("inlineCode",{parentName:"li"},"ROut")," as its output.")))),(0,t.yg)("h2",{id:"state-management"},"State Management"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/state-management/zstate"},"ZState")),"\u2014 It models a state that can be read from and written to during the execution of an effect."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/state-management/global-shared-state"},"Ref")),"\u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref[A]")," models a mutable reference to a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/state-management/fiberref"},"FiberRef")),"\u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"FiberRef[A]")," models a mutable reference to a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),". As opposed to ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref[A]"),", a value is bound to an executing ",(0,t.yg)("inlineCode",{parentName:"li"},"Fiber")," only.  You can think of it as Java's ",(0,t.yg)("inlineCode",{parentName:"li"},"ThreadLocal")," on steroids.")),(0,t.yg)("h2",{id:"concurrency"},"Concurrency"),(0,t.yg)("h3",{id:"fiber-primitives"},"Fiber Primitives"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/fiber/fiber.md"},"Fiber"))," \u2014 A fiber value models an ",(0,t.yg)("inlineCode",{parentName:"li"},"IO")," value that has started running, and is the moral equivalent of a green thread."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/fiber/fiberstatus"},"Fiber.Status"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Fiber.Status")," describe the current status of a Fiber."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/fiber/fiberid"},"FiberId"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"FiberId")," describe the unique identity of a Fiber.")),(0,t.yg)("h3",{id:"concurrency-primitives"},"Concurrency Primitives"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/concurrency/hub"},"Hub"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Hub")," is an asynchronous message hub that allows publishers to efficiently broadcast values to many subscribers."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/concurrency/promise"},"Promise"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Promise")," is a model of a variable that may be set a single time, and awaited on by many fibers."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/concurrency/semaphore"},"Semaphore"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Semaphore")," is an asynchronous (non-blocking) semaphore that plays well with ZIO's interruption."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/concurrency/ref"},"Ref"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref[A]")," models a mutable reference to a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),". The two basic operations are ",(0,t.yg)("inlineCode",{parentName:"li"},"set"),", which fills the ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref")," with a new value, and ",(0,t.yg)("inlineCode",{parentName:"li"},"get"),", which retrieves its current content. All operations on a ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref")," are atomic and thread-safe, providing a reliable foundation for synchronizing concurrent programs."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/concurrency/refsynchronized"},"Ref.Synchronized"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref.Synchronized[A]")," models a ",(0,t.yg)("strong",{parentName:"li"},"mutable reference")," to a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A")," in which we can store ",(0,t.yg)("strong",{parentName:"li"},"immutable")," data, and update it atomically ",(0,t.yg)("strong",{parentName:"li"},"and")," effectfully."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/concurrency/queue"},"Queue"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Queue")," is an asynchronous queue that never blocks, which is safe for multiple concurrent producers and consumers.")),(0,t.yg)("h3",{id:"synchronization-aids"},"Synchronization Aids"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/sync/reentrantlock"},"ReentrantLock")),"\u2014 The ",(0,t.yg)("inlineCode",{parentName:"li"},"ReentrantLock")," is a synchronization tool that is useful for synchronizing blocks of code."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/sync/countdownlatch"},"CountdownLatch"))," \u2014 A synchronization aid that allows one or more fibers to wait until a set of operations being performed in other fibers completes."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/sync/cyclicbarrier"},"CyclicBarrier"))," \u2014 A synchronization aid that allows a set of fibers to all wait for each other to reach a common barrier point."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/sync/concurrentmap"},"ConcurrentMap"))," \u2014 A Map wrapper over ",(0,t.yg)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/sync/concurrentset"},"ConcurrentSet"))," \u2014 A Set implementation over ",(0,t.yg)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap"))),(0,t.yg)("h3",{id:"stm"},"STM"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/stm.md"},"STM"))," \u2014 An ",(0,t.yg)("inlineCode",{parentName:"li"},"STM")," represents an effect that can be performed transactionally resulting in a failure or success."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tarray"},"TArray"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TArray")," is an array of mutable references that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tset"},"TSet"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TSet")," is a mutable set that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tmap"},"TMap"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TMap")," is a mutable map that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tref"},"TRef"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TRef")," is a mutable reference to an immutable value that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tpriorityqueue"},"TPriorityQueue"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TPriorityQueue")," is a mutable priority queue that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tpromise"},"TPromise"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TPromise")," is a mutable reference that can be set exactly once and can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tqueue"},"TQueue"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TQueue")," is a mutable queue that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/treentrantlock"},"TReentrantLock"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TReentrantLock")," is a reentrant read / write lock that can be composed."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stm/tsemaphore"},"TSemaphore"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TSemaphore")," is a semaphore that can participate in transactions.")),(0,t.yg)("h2",{id:"resource-management"},"Resource Management"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/resource/scope"},"Scope"))," \u2014 A scope in which resources can safely be used."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/resource/zpool"},"ZPool"))," \u2014 An asynchronous and concurrent generalized pool of reusable resources.")),(0,t.yg)("h2",{id:"streaming"},"Streaming"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stream/zstream/"},"ZStream"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ZStream")," is a lazy, concurrent, asynchronous source of values.",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Stream")," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Stream[E, A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZStream[Any, E, A]"),", which represents a ZIO stream that does not require any services, and may fail with an ",(0,t.yg)("inlineCode",{parentName:"li"},"E"),", or produce elements with an ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),"."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stream/zsink/"},"ZSink"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ZSink")," is a consumer of values from a ",(0,t.yg)("inlineCode",{parentName:"li"},"ZStream"),", which may produce a value when it has consumed enough.",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stream/zsink/"},"Sink"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Sink[InErr, A, OutErr, L, B]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZSink[Any, InErr, A, OutErr, L, B]"),"."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stream/zpipeline"},"ZPipeline"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"ZPipeline")," is a polymorphic stream transformer."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stream/subscription-ref"},"SubscriptionRef"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"SubscriptionRef[A]")," contains a current value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A")," and a stream that can be consumed to observe all changes to that value.")),(0,t.yg)("h2",{id:"metrics"},"Metrics"),(0,t.yg)("p",null,"IO supports 5 types of Metrics:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/observability/metrics/counter"},"Counter"))," \u2014 The Counter is used for any value that increases over time like ",(0,t.yg)("em",{parentName:"li"},"request counts"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/observability/metrics/gauge"},"Gauge"))," \u2014 The gauge is a single numerical value that can arbitrary goes up or down over time like ",(0,t.yg)("em",{parentName:"li"},"memory usage"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/observability/metrics/histogram"},"Histogram"))," \u2014 The Histogram is used to track the distribution of a set of observed values across a set of buckets like ",(0,t.yg)("em",{parentName:"li"},"request latencies"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/observability/metrics/summary"},"Summary"))," \u2014 The Summary represents a sliding window of a time series along with metrics for certain percentiles of the time series, referred to as quantiles like ",(0,t.yg)("em",{parentName:"li"},"request latencies"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/observability/metrics/frequency"},"Frequency"))," \u2014 The Frequency is a metric that counts the number of occurrences of distinct string values.")),(0,t.yg)("h2",{id:"testing"},"Testing"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/spec"},"Spec")),"\u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Spec[R, E]")," is the backbone of ZIO Test. All specs require an environment of type ",(0,t.yg)("inlineCode",{parentName:"li"},"R")," and may potentially fail with an error of type ",(0,t.yg)("inlineCode",{parentName:"li"},"E"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/assertions/"},"Assertion")),"\u2014 An ",(0,t.yg)("inlineCode",{parentName:"li"},"Assertion[A]")," is a test assertion that can be used to assert the predicate of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A => Boolean"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/aspects/"},"TestAspect")),"\u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"TestAspect")," is an aspect that can be weaved into specs. We can think of an aspect as a polymorphic function, capable of transforming one test into another."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/property-testing/built-in-generators"},"Gen")),"\u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Gen[R, A]")," represents a generator of values of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),", which requires an environment ",(0,t.yg)("inlineCode",{parentName:"li"},"R"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Test Service"),"\u2014 ZIO Test has the following out-of-the-box test services:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/services/console"},"TestConsole")),"\u2014 It allows testing of applications that interact with the console."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/services/clock"},"TestClock")),"\u2014 We can deterministically and efficiently test effects involving the passage of time without actually having to wait for the full amount of time to pass."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/services/random"},"TestRandom")),"\u2014 This service allows us having fully deterministic testing of code that deals with Randomness."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/services/system"},"TestSystem")),"\u2014 It supports deterministic testing of effects involving system properties."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/services/live"},"Live")),"\u2014 It provides access to the live environment from within the test environment for effects."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/services/config"},"TestConfig")),"\u2014 It provides access to default configuration settings used by ZIO Test."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/test/services/sized"},"Sized")),"\u2014 It enables ",(0,t.yg)("em",{parentName:"li"},"Sized Generators")," to access the size from the ZIO Test environment.")))),(0,t.yg)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/stream/chunk"},"Chunk")),"\u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Chunk")," is a fast, pure alternative to Arrays."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/reference/observability/supervisor"},"Supervisor")),"\u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Supervisor[A]")," is allowed to supervise the launching and termination of fibers, producing some visible value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A")," from the supervision.")),(0,t.yg)("p",null,"To learn more about these data types, please explore the pages above, or check out the Scaladoc documentation."))}y.isMDXComponent=!0}}]);