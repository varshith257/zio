"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[20328],{15680:(e,n,o)=>{o.d(n,{xA:()=>d,yg:()=>c});var i=o(96540);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function g(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,i)}return o}function t(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?g(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):g(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,i,r=function(e,n){if(null==e)return{};var o,i,r={},g=Object.keys(e);for(i=0;i<g.length;i++)o=g[i],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(e);for(i=0;i<g.length;i++)o=g[i],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=i.createContext({}),p=function(e){var n=i.useContext(a),o=n;return e&&(o="function"==typeof e?e(n):t(t({},n),e)),o},d=function(e){var n=p(e.components);return i.createElement(a.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var o=e.components,r=e.mdxType,g=e.originalType,a=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(o),m=r,c=s["".concat(a,".").concat(m)]||s[m]||u[m]||g;return o?i.createElement(c,t(t({ref:n},d),{},{components:o})):i.createElement(c,t({ref:n},d))}));function c(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var g=o.length,t=new Array(g);t[0]=m;var l={};for(var a in n)hasOwnProperty.call(n,a)&&(l[a]=n[a]);l.originalType=e,l[s]="string"==typeof e?e:r,t[1]=l;for(var p=2;p<g;p++)t[p]=o[p];return i.createElement.apply(null,t)}return i.createElement.apply(null,o)}m.displayName="MDXCreateElement"},93768:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>u,frontMatter:()=>g,metadata:()=>l,toc:()=>p});var i=o(58168),r=(o(96540),o(15680));const g={id:"jul-bridge",title:"java.util.logging bridge"},t=void 0,l={unversionedId:"zio-logging/jul-bridge",id:"zio-logging/jul-bridge",title:"java.util.logging bridge",description:"It is possible to use zio-logging for included java.util.logging Loggers (do not confuse with java.platform.logging),",source:"@site/docs/zio-logging/jul-bridge.md",sourceDirName:"zio-logging",slug:"/zio-logging/jul-bridge",permalink:"/zio-logging/jul-bridge",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/jul-bridge.md",tags:[],version:"current",frontMatter:{id:"jul-bridge",title:"java.util.logging bridge"},sidebar:"ecosystem-sidebar",previous:{title:"Java Platform/System Logger",permalink:"/zio-logging/jpl"},next:{title:"SLF4J v2",permalink:"/zio-logging/slf4j2"}},a={},p=[{value:"Examples",id:"examples",level:2},{value:"JUL bridge with JSON console logger",id:"jul-bridge-with-json-console-logger",level:3}],d={toc:p},s="wrapper";function u(e){let{components:n,...o}=e;return(0,r.yg)(s,(0,i.A)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"It is possible to use ",(0,r.yg)("inlineCode",{parentName:"p"},"zio-logging")," for included ",(0,r.yg)("inlineCode",{parentName:"p"},"java.util.logging")," Loggers (do not confuse with ",(0,r.yg)("inlineCode",{parentName:"p"},"java.platform.logging"),"),\nusually third-party non-ZIO libraries (most notable: OpenTelemetry used by ZIO-telemetry). To do so, import the ",(0,r.yg)("inlineCode",{parentName:"p"},"zio-logging-jul-bridge")," module"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-logging-jul-bridge" % "2.3.2"\n')),(0,r.yg)("p",null,"and use one of the ",(0,r.yg)("inlineCode",{parentName:"p"},"JULBridge")," layers when setting up logging"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.logging.jul.bridge.JULBridge\n\nprogram.provideCustom(JULBridge.init())\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"JULBridge")," layers:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"JULBridge.init(configPath: NonEmptyChunk[String] = logFilterConfigPath)")," - setup with ",(0,r.yg)("inlineCode",{parentName:"li"},"LogFilter")," from ",(0,r.yg)("a",{parentName:"li",href:"/zio-logging/log-filter#configuration"},"filter configuration"),", default configuration path: ",(0,r.yg)("inlineCode",{parentName:"li"},"logger.filter"),", default ",(0,r.yg)("inlineCode",{parentName:"li"},"LogLevel")," is ",(0,r.yg)("inlineCode",{parentName:"li"},"INFO")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"JULBridge.init(filter: LogFilter[Any])")," - setup with given ",(0,r.yg)("inlineCode",{parentName:"li"},"LogFilter")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"JULBridge.initialize")," - setup without filtering")),(0,r.yg)("p",null,"Need for log filtering in JUL bridge: filtering in JUL is made on higher level than ",(0,r.yg)("inlineCode",{parentName:"p"},"jul-bridge")," (on ",(0,r.yg)("inlineCode",{parentName:"p"},"Logger")," level and not ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler")," level - which ",(0,r.yg)("inlineCode",{parentName:"p"},"JULBridge")," is). Due to that the whole\nfiltering in JUL is disabled and is implemented in JULBridge. This may cause degraded performance and much more logs when using other Handlers."),(0,r.yg)("br",null),(0,r.yg)("p",null,"JUL logger name is stored in log annotation with key ",(0,r.yg)("inlineCode",{parentName:"p"},"logger_name")," (",(0,r.yg)("inlineCode",{parentName:"p"},"zio.logging.loggerNameAnnotationKey"),"), following log format"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.logging.jul.bridge.JULBridge\nimport zio.logging.LoggerNameExtractor\n\nval loggerName = LoggerNameExtractor.loggerNameAnnotationOrTrace\nval loggerNameFormat = loggerName.toLogFormat()\n")),(0,r.yg)("p",null,"may be used to get logger name from log annotation or ZIO Trace."),(0,r.yg)("p",null,"This logger name extractor is used by default in log filter, which applying log filtering by defined logger name and level:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val logFilterConfig = LogFilter.LogLevelByNameConfig(\n  LogLevel.Info,\n  "zio.logging.jul  " -> LogLevel.Debug,\n  "JUL-LOGGER"        -> LogLevel.Warning\n)\n\nval logFilter: LogFilter[String] = logFilterConfig.toFilter\n')),(0,r.yg)("br",null),(0,r.yg)("p",null,"JUL bridge with custom logger can be setup:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.logging.jul.bridge.JULBridge\nimport zio.logging.consoleJsonLogger\n\nval logger = Runtime.removeDefaultLoggers >>> consoleJsonLogger() >+> JULBridge.init()\n")),(0,r.yg)("br",null),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("p",null,"You can find the source code ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-logging/tree/master/examples"},"here")),(0,r.yg)("h3",{id:"jul-bridge-with-json-console-logger"},"JUL bridge with JSON console logger"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'package zio.logging.example\n\nimport zio.logging.jul.bridge.JULBridge\nimport zio.logging.{ConsoleLoggerConfig, LogAnnotation, LogFilter, LogFormat, LoggerNameExtractor, consoleJsonLogger}\nimport zio.{ExitCode, LogLevel, Runtime, Scope, ZIO, ZIOAppArgs, ZIOAppDefault, ZLayer}\n\nimport java.util.UUID\n\nobject JULBridgeExampleApp extends ZIOAppDefault {\n\n  private val julLogger = java.util.logging.Logger.getLogger("JUL-LOGGER")\n\n  private val logFilterConfig = LogFilter.LogLevelByNameConfig(\n    LogLevel.Info,\n    "zio.logging.slf4j" -> LogLevel.Debug,\n    "SLF4J-LOGGER"      -> LogLevel.Warning\n  )\n\n  private val logFormat = LogFormat.label(\n    "name",\n    LoggerNameExtractor.loggerNameAnnotationOrTrace.toLogFormat()\n  ) + LogFormat.logAnnotation(LogAnnotation.UserId) + LogFormat.logAnnotation(\n    LogAnnotation.TraceId\n  ) + LogFormat.default\n\n  private val loggerConfig = ConsoleLoggerConfig(logFormat, logFilterConfig)\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> consoleJsonLogger(loggerConfig) >+> JULBridge.init(loggerConfig.toFilter)\n\n  private val uuids = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      _ <- ZIO.logInfo("Start")\n      _ <- ZIO.foreachPar(uuids) { u =>\n        ZIO.succeed(julLogger.info("Test INFO!")) *> ZIO.succeed(\n          julLogger.warning("Test WARNING!")\n        ) @@ LogAnnotation.UserId(\n          u.toString\n        )\n      } @@ LogAnnotation.TraceId(UUID.randomUUID())\n      _ <- ZIO.logDebug("Done")\n    } yield ExitCode.success\n\n}\n')),(0,r.yg)("p",null,"Expected console output:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'{"name":"zio.logging.example.JULbridgeExampleApp","timestamp":"2024-05-26T13:50:20.6832831+02:0","level":"INFO","thread":"zio-fiber-1143120685","message":"Start"}\n{"name":"JUL-LOGGER","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7112909+02:0","level":"INFO","thread":"zio-fiber-1683803358","message":"Test INFO!"}\n{"name":"JUL-LOGGER","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7112909+02:0","level":"INFO","thread":"zio-fiber-71852457","message":"Test INFO!"}\n{"name":"JUL-LOGGER","user_id":"85f762cc-e62c-4576-9f14-6a3ad0918d99","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7142882+02:0","level":"WARN","thread":"zio-fiber-1911711828","message":"Test WARNING!"}\n{"name":"JUL-LOGGER","user_id":"47850c02-bb60-4b6a-9c0f-0aa095066d10","trace_id":"08e9e10a-d3c5-4f90-8627-2ae4ddee1522","timestamp":"2024-05-26T13:50:20.7142882+02:0","level":"WARN","thread":"zio-fiber-1801412106","message":"Test WARNING!"}\n')))}u.isMDXComponent=!0}}]);