"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[1095],{15680:(e,n,a)=>{a.d(n,{xA:()=>s,yg:()=>y});var r=a(96540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var m=r.createContext({}),d=function(e){var n=r.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},s=function(e){var n=d(e.components);return r.createElement(m.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(a),g=t,y=p["".concat(m,".").concat(g)]||p[g]||c[g]||o;return a?r.createElement(y,i(i({ref:n},s),{},{components:a})):r.createElement(y,i({ref:n},s))}));function y(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[p]="string"==typeof e?e:t,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},17231:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=a(58168),t=(a(96540),a(15680));const o={id:"form",title:"Form Data"},i=void 0,l={unversionedId:"zio-http/reference/body/form",id:"zio-http/reference/body/form",title:"Form Data",description:"The Form represents a collection of FormFields that can be a multipart or URL-encoded form:",source:"@site/docs/zio-http/reference/body/form.md",sourceDirName:"zio-http/reference/body",slug:"/zio-http/reference/body/form",permalink:"/zio-http/reference/body/form",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/body/form.md",tags:[],version:"current",frontMatter:{id:"form",title:"Form Data"},sidebar:"ecosystem-sidebar",previous:{title:"Body",permalink:"/zio-http/reference/body/"},next:{title:"BinaryCodecs",permalink:"/zio-http/reference/body/binary_codecs"}},m={},d=[{value:"Form Fields",id:"form-fields",level:2},{value:"Simple FormField",id:"simple-formfield",level:3},{value:"Text FormField",id:"text-formfield",level:3},{value:"Binary FormField",id:"binary-formfield",level:3},{value:"Creating a Form",id:"creating-a-form",level:2},{value:"Creating an Empty Form",id:"creating-an-empty-form",level:3},{value:"Creating a Form from Form Fields",id:"creating-a-form-from-form-fields",level:3},{value:"Creating a Form from Key-Value Pairs",id:"creating-a-form-from-key-value-pairs",level:3},{value:"Decoding Raw Multipart Bytes into a Form",id:"decoding-raw-multipart-bytes-into-a-form",level:3},{value:"Creating a Form from Query Parameters",id:"creating-a-form-from-query-parameters",level:3},{value:"Creating a Form from URL-Encoded Data",id:"creating-a-form-from-url-encoded-data",level:3},{value:"Operations",id:"operations",level:2},{value:"Appending Fields to a Form",id:"appending-fields-to-a-form",level:3},{value:"Accessing Fields in a Form",id:"accessing-fields-in-a-form",level:3},{value:"Encoding Forms",id:"encoding-forms",level:3},{value:"Multipart Encoding",id:"multipart-encoding",level:4},{value:"URL Encoding",id:"url-encoding",level:4},{value:"Converting Form to Query Parameters",id:"converting-form-to-query-parameters",level:3}],s={toc:d},p="wrapper";function c(e){let{components:n,...a}=e;return(0,t.yg)(p,(0,r.A)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"Form")," represents a collection of ",(0,t.yg)("inlineCode",{parentName:"p"},"FormFields")," that can be a multipart or URL-encoded form:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"final case class Form(formData: Chunk[FormField])\n")),(0,t.yg)("p",null,"A ",(0,t.yg)("inlineCode",{parentName:"p"},"Form")," is commonly used in request bodies for handling data from HTML forms and file uploads, although it can also be utilized in response bodies."),(0,t.yg)("h2",{id:"form-fields"},"Form Fields"),(0,t.yg)("p",null,"A ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField")," is a field within a ",(0,t.yg)("inlineCode",{parentName:"p"},"Form")," and consists of a name, content type, type-specific content, and an optional filename."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"sealed trait FormField {\n  def name: String\n  def contentType: MediaType\n  def filename: Option[String]\n}\n")),(0,t.yg)("p",null,"There are four types of ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField"),": Simple FormField, Text FormField, Binary FormField, and StreamingBinary FormField."),(0,t.yg)("h3",{id:"simple-formfield"},"Simple FormField"),(0,t.yg)("p",null,"Simple form fields are represented by the ",(0,t.yg)("inlineCode",{parentName:"p"},"Simple")," case class. They consist of a simple key-value pair containing a name and a value (String). Unlike Binary and Text, they do not contain additional metadata such as content type or filename:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"final case class Simple(name: String, value: String) extends FormField {\n  override val contentType: MediaType   = MediaType.text.plain\n  override val filename: Option[String] = None\n}\n")),(0,t.yg)("p",null,"To create a simple form field, we can use ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField.simpleField")," constructor:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval simpleFormField = FormField.simpleField("name", "value")\n')),(0,t.yg)("p",null,"Instances of ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField.Simple")," are commonly used for transmitting simple textual data where additional metadata is not required, such as form fields in HTML forms."),(0,t.yg)("h3",{id:"text-formfield"},"Text FormField"),(0,t.yg)("p",null,"Text form fields are represented by the ",(0,t.yg)("inlineCode",{parentName:"p"},"Text")," case class. They contain textual data (String) along with metadata such as the content type and optionally the filename:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"final case class Text(\n  name: String,\n  value: String,\n  contentType: MediaType,\n  filename: Option[String] = None,\n) extends FormField\n")),(0,t.yg)("p",null,"To create a text form field, we can use ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField.textField")," constructor:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval textFormField1 = FormField.textField("name", "value")\n\nval textFormField2 = FormField.textField("name", "value", MediaType.text.plain)\n')),(0,t.yg)("p",null,"Instances of ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField.Text")," are used for transmitting simple textual data and textual files, such as text files, HTML files, and so on."),(0,t.yg)("h3",{id:"binary-formfield"},"Binary FormField"),(0,t.yg)("p",null,"Binary form fields are represented by the ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField.Binary")," case class. They contain binary data (",(0,t.yg)("inlineCode",{parentName:"p"},"Chunk[Byte]"),"), along with metadata such as the content type (",(0,t.yg)("inlineCode",{parentName:"p"},"MediaType"),") and optionally the ",(0,t.yg)("inlineCode",{parentName:"p"},"Content-Transfer-Encoding")," header field and filename:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"final case class Binary(\n  name: String,\n  data: Chunk[Byte],\n  contentType: MediaType,\n  transferEncoding: Option[ContentTransferEncoding] = None,\n  filename: Option[String] = None,\n) extends FormField\n")),(0,t.yg)("p",null,"To create a binary form field, we can use ",(0,t.yg)("inlineCode",{parentName:"p"},"FormField.binaryField")," constructor:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.http.Header._\n\nval image = Chunk.fromArray(???)\n\nval binaryFormField = FormField.binaryField(\n  name = "profile pic",\n  data = image,\n  mediaType = MediaType.image.jpeg,\n  transferEncoding = Some(ContentTransferEncoding.Binary),\n  filename = Some("profile.jpg")\n)\n')),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"The data is not encoded in any way relative to the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"transferEncoding"),". It is the responsibility of the user to encode the ",(0,t.yg)("inlineCode",{parentName:"p"},"data")," accordingly.")),(0,t.yg)("p",null,"This form field is suitable for transmitting files or other binary data through HTTP requests."),(0,t.yg)("p",null,"The data is typically encoded in a way that can be transmitted as text (e.g., Base64 encoding) and decoded on the receiving end. The transfer encoding can be one of the following: ",(0,t.yg)("inlineCode",{parentName:"p"},"SevenBit"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"EightBit"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Binary"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"QuotedPrintable"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Base64"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"XToken"),"."),(0,t.yg)("h2",{id:"creating-a-form"},"Creating a Form"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"Form"),"'s companion object offers several convenient methods for constructing form data, whether from individual form fields, key-value pairs, multipart bytes, query parameters, or URL-encoded data. We'll cover each of these methods and provide examples to illustrate their usage."),(0,t.yg)("h3",{id:"creating-an-empty-form"},"Creating an Empty Form"),(0,t.yg)("p",null,"We can create an empty form using the empty method:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.http._\n\nval emptyForm = Form.empty\n")),(0,t.yg)("p",null,"This creates an empty form with no fields."),(0,t.yg)("h3",{id:"creating-a-form-from-form-fields"},"Creating a Form from Form Fields"),(0,t.yg)("p",null,"We can create a form by providing individual form fields using the ",(0,t.yg)("inlineCode",{parentName:"p"},"Form.apply")," method. This method takes one or more FormField objects:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval form = Form(\n  FormField.Simple("name", "John"),\n  FormField.Simple("age", "42"),\n)\n')),(0,t.yg)("h3",{id:"creating-a-form-from-key-value-pairs"},"Creating a Form from Key-Value Pairs"),(0,t.yg)("p",null,"We can create a form from key-value pairs using the ",(0,t.yg)("inlineCode",{parentName:"p"},"Form.fromStrings")," method:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval formData = Form.fromStrings(\n  "username" -> "johndoe",\n  "password" -> "secret",\n)\n')),(0,t.yg)("h3",{id:"decoding-raw-multipart-bytes-into-a-form"},"Decoding Raw Multipart Bytes into a Form"),(0,t.yg)("p",null,"We can create a form from multipart bytes using the ",(0,t.yg)("inlineCode",{parentName:"p"},"Form.fromMultipartBytes")," method. This is useful when handling multipart form data received in HTTP requests."),(0,t.yg)("p",null,"Assume we have received the following multipart data:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval multipartBytes =\n  s"""|--boundary123\\r\n      |Content-Disposition: form-data; name="field1"\\r\n      |\\r\n      |value1\\r\n      |--boundary123\\r\n      |Content-Disposition: form-data; name="field2"\\r\n      |\\r\n      |value2\\r\n      |--boundary123\\r\n      |Content-Disposition: form-data; name="file1"; filename="filename1.txt"\\r\n      |Content-Type: text/plain\\r\n      |\\r\n      |Contents of filename1.txt\\r\n      |--boundary123\\r\n      |Content-Disposition: form-data; name="file2"; filename="filename2.txt"\\r\n      |Content-Type: text/plain\\r\n      |\\r\n      |Contents of filename2.txt\\r\n      |--boundary123--\\r\\n""".stripMargin.getBytes(Charsets.Utf8)\n')),(0,t.yg)("p",null,"We can decode it with the following code:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nval charset = Charsets.Utf8\n\nval formTask: Task[Form] =\n  Form.fromMultipartBytes(Chunk.fromArray(multipartBytes), charset, Some(Boundary("boundary123")))\n\nval formData: Task[Chunk[FormField]] = formTask.map(_.formData)\n')),(0,t.yg)("h3",{id:"creating-a-form-from-query-parameters"},"Creating a Form from Query Parameters"),(0,t.yg)("p",null,"We can create a form from query parameters using the ",(0,t.yg)("inlineCode",{parentName:"p"},"Form.fromQueryParams")," method:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval queryParams: QueryParams = QueryParams(\n    "name" -> "John",   \n    "age" -> "42"       \n  )\n\nval form = Form.fromQueryParams(queryParams)\n')),(0,t.yg)("h3",{id:"creating-a-form-from-url-encoded-data"},"Creating a Form from URL-Encoded Data"),(0,t.yg)("p",null,"We can create a form from URL-encoded data using the ",(0,t.yg)("inlineCode",{parentName:"p"},"Form.fromURLEncoded")," method:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval encodedData: String = "username=johndoe&password=secret" \n// encodedData: String = "username=johndoe&password=secret"\n\nval formResult: Either[FormDecodingError, Form] =\n  Form.fromURLEncoded(encodedData, Charsets.Utf8)\n// formResult: Either[FormDecodingError, Form] = Right(\n//   value = Form(\n//     formData = IndexedSeq(\n//       Simple(name = "username", value = "johndoe"),\n//       Simple(name = "password", value = "secret")\n//     )\n//   )\n// )\n')),(0,t.yg)("h2",{id:"operations"},"Operations"),(0,t.yg)("h3",{id:"appending-fields-to-a-form"},"Appending Fields to a Form"),(0,t.yg)("p",null,"We can append fields to an existing form using the ",(0,t.yg)("inlineCode",{parentName:"p"},"+")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"append")," operator:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval form =\n  Form(\n    FormField.simpleField("username", "johndoe"),\n    FormField.simpleField("password", "secretpassword"),\n  ) + FormField.simpleField("age", "42")\n// form: Form = Form(\n//   formData = IndexedSeq(\n//     Simple(name = "username", value = "johndoe"),\n//     Simple(name = "password", value = "secretpassword"),\n//     Simple(name = "age", value = "42")\n//   )\n// )\n')),(0,t.yg)("h3",{id:"accessing-fields-in-a-form"},"Accessing Fields in a Form"),(0,t.yg)("p",null,"We can access fields in a form using the ",(0,t.yg)("inlineCode",{parentName:"p"},"get")," method, which returns an option containing the first field with the specified name:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'form.get("username")\n// res8: Option[FormField] = Some(\n//   value = Simple(name = "username", value = "johndoe")\n// )\n')),(0,t.yg)("p",null,"This method allows us to retrieve a specific field from the form by its name."),(0,t.yg)("h3",{id:"encoding-forms"},"Encoding Forms"),(0,t.yg)("p",null,"We can encode forms using multipart encoding or URL encoding."),(0,t.yg)("h4",{id:"multipart-encoding"},"Multipart Encoding"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"Form#multipartBytes")," method takes the boundary and encodes the form using multipart encoding and returns the multipart byte stream:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio.stream._\n\nval form: Form = ???\nval multipartStream: ZStream[Any, Nothing, Byte] = \n    form.multipartBytes(Boundary("boundary123"))\n')),(0,t.yg)("h4",{id:"url-encoding"},"URL Encoding"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"Form#urlEncoded")," method encodes the form using URL encoding and returns the encoded string:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nform.urlEncoded\n// res10: String = "username=johndoe&password=secretpassword&age=42"\n\nform.urlEncoded(Charsets.Utf8)\n// res11: String = "username=johndoe&password=secretpassword&age=42"\n')),(0,t.yg)("h3",{id:"converting-form-to-query-parameters"},"Converting Form to Query Parameters"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"toQueryParams")," method in the Form object allows us to convert a form into query parameters:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval queryParams: QueryParams = form.toQueryParams\n// queryParams: QueryParams = JavaLinkedHashMapQueryParams(\n//   underlying = {username=[johndoe], password=[secretpassword], age=[42]}\n// )\n\nqueryParams.encode\n// res12: String = "?username=johndoe&password=secretpassword&age=42"\n')))}c.isMDXComponent=!0}}]);