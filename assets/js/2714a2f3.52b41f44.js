"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[25573],{15680:(e,n,i)=>{i.d(n,{xA:()=>c,yg:()=>f});var t=i(96540);function o(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){o(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function p(e,n){if(null==e)return{};var i,t,o=function(e,n){if(null==e)return{};var i,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(o[i]=e[i]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=t.createContext({}),g=function(e){var n=t.useContext(l),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},c=function(e){var n=g(e.components);return t.createElement(l.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=g(i),d=o,f=s["".concat(l,".").concat(d)]||s[d]||m[d]||r;return i?t.createElement(f,a(a({ref:n},c),{},{components:i})):t.createElement(f,a({ref:n},c))}));function f(e,n){var i=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=i.length,a=new Array(r);a[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[s]="string"==typeof e?e:o,a[1]=p;for(var g=2;g<r;g++)a[g]=i[g];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},20221:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>g});var t=i(58168),o=(i(96540),i(15680));const r={id:"providing-different-implementation-of-a-service",title:"Providing Different Implementation of a Service",sidebar_label:"Multiple Implementations"},a=void 0,p={unversionedId:"reference/di/providing-different-implementation-of-a-service",id:"reference/di/providing-different-implementation-of-a-service",title:"Providing Different Implementation of a Service",description:"One of the benefits of using dependency injection is that, we can write our application in a way that without modifying the application logic, we can provide different implementations of services to our application.",source:"@site/docs/reference/di/providing-different-implementation-of-a-service.md",sourceDirName:"reference/di",slug:"/reference/di/providing-different-implementation-of-a-service",permalink:"/reference/di/providing-different-implementation-of-a-service",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/di/providing-different-implementation-of-a-service.md",tags:[],version:"current",frontMatter:{id:"providing-different-implementation-of-a-service",title:"Providing Different Implementation of a Service",sidebar_label:"Multiple Implementations"},sidebar:"reference-sidebar",previous:{title:"Dependency Propagation",permalink:"/reference/di/dependency-propagation"},next:{title:"Dependency Memoization",permalink:"/reference/di/dependency-memoization"}},l={},g=[{value:"Example 1: Config Service",id:"example-1-config-service",level:2},{value:"Example 2: Logging Service",id:"example-2-logging-service",level:2}],c={toc:g},s="wrapper";function m(e){let{components:n,...i}=e;return(0,o.yg)(s,(0,t.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"One of the benefits of using dependency injection is that, we can write our application in a way that without modifying the application logic, we can provide different implementations of services to our application."),(0,o.yg)("h2",{id:"example-1-config-service"},"Example 1: Config Service"),(0,o.yg)("p",null,"In the next example, we have a ZIO application that uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"AppConfig")," service:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ncase class AppConfig(poolSize: Int)\n\nobject AppConfig {\n  def poolSize: ZIO[AppConfig, Nothing, Int] =\n    ZIO.serviceWith[AppConfig](_.poolSize)\n\n  val appArgsLayer: ZLayer[ZIOAppArgs, Nothing, AppConfig] =\n    ZLayer {\n      ZIOAppArgs.getArgs\n        .map(_.headOption.map(_.toInt).getOrElse(8))\n        .map(poolSize => AppConfig(poolSize))\n    }\n\n  val systemEnvLayer: ZLayer[Any, SecurityException, AppConfig] =\n    ZLayer.fromZIO(\n      System\n        .env("POOL_SIZE")\n        .map(_.headOption.map(_.toInt).getOrElse(8))\n        .map(poolSize => AppConfig(poolSize))\n    )\n}\n\nobject MainApp extends ZIOAppDefault {\n  val myApp: ZIO[AppConfig, Nothing, Unit] =\n    for {\n      poolSize <- AppConfig.poolSize\n      _        <- ZIO.debug(s"Application started with $poolSize pool size.")\n    } yield ()\n\n  def run = myApp.provideSome[ZIOAppArgs](AppConfig.appArgsLayer)\n}\n')),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"AppConfig")," has two layers, ",(0,o.yg)("inlineCode",{parentName:"p"},"appArgsLayer")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"systemEnvLayer"),". The first one uses command-line arguments to create the ",(0,o.yg)("inlineCode",{parentName:"p"},"AppConfig")," and the second one uses environment variables. As we can see, without changing the core logic of our application, we can easily change the way we get the configuration:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-diff"},'object MainApp extends ZIOAppDefault {\n  val myApp: ZIO[AppConfig, Nothing, Unit] =\n    for {\n      poolSize <- AppConfig.poolSize\n      _        <- ZIO.debug(s"Application started with $poolSize pool size.")\n    } yield ()\n\n-  def run = myApp.provideSome[ZIOAppArgs](AppConfig.appArgsLayer)\n+  def run = myApp.provide(AppConfig.systemEnvLayer)\n}\n')),(0,o.yg)("h2",{id:"example-2-logging-service"},"Example 2: Logging Service"),(0,o.yg)("p",null,"In this example, we have a ZIO application that uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"Logging")," service. And we provided two implementations of the ",(0,o.yg)("inlineCode",{parentName:"p"},"Logging")," service: ",(0,o.yg)("inlineCode",{parentName:"p"},"SimpleLogger")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"DateTimeLogger"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nimport java.io.IOException\n\ntrait Logging {\n  def log(msg: String): ZIO[Any, IOException, Unit]\n}\n\nobject Logging {\n  def log(msg: String): ZIO[Logging, IOException, Unit] =\n    ZIO.serviceWithZIO[Logging](_.log(msg))\n}\n\ncase class DateTimeLogger() extends Logging {\n  override def log(msg: String): ZIO[Any, IOException, Unit] =\n    for {\n      dt <- Clock.currentDateTime\n      _  <- Console.printLine(s"$dt: $msg")\n    } yield ()\n}\n\nobject DateTimeLogger {\n  val live: ULayer[DateTimeLogger] =\n    ZLayer.succeed(DateTimeLogger())\n}\n\ncase class SimpleLogger() extends Logging {\n  override def log(msg: String): ZIO[Any, IOException, Unit] =\n    Console.printLine(msg)\n}\nobject SimpleLogger {\n  val live: ULayer[SimpleLogger] =\n    ZLayer.succeed(SimpleLogger())\n}\n')),(0,o.yg)("p",null,"Now, let's write a ZIO application that uses the ",(0,o.yg)("inlineCode",{parentName:"p"},"Logging")," service:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nval myApp: ZIO[Logging, IOException, Unit] =\n  for {\n    _ <- Logging.log("Application started.")\n    _ <- Logging.log("Application ended.")\n  } yield ()\n')),(0,o.yg)("p",null,"Now, we can run our application, just by providing one of the implementations of the ",(0,o.yg)("inlineCode",{parentName:"p"},"Logging")," service. Let's run it with the ",(0,o.yg)("inlineCode",{parentName:"p"},"SimpleLogger")," implementation:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"object MainApp extends ZIOAppDefault {\n  def run = myApp.provide(SimpleLogger.live)\n}\n")),(0,o.yg)("p",null,"Now, we can see that, without changing the core logic of our application, we can easily change the logger implementation:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"object MainApp extends ZIOAppDefault {\n  def run = myApp.provide(DateTimeLogger.live)\n}\n")))}m.isMDXComponent=!0}}]);