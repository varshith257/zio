"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[38006],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>y});var t=r(96540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(r),m=i,y=f["".concat(s,".").concat(m)]||f[m]||u[m]||a;return r?t.createElement(y,o(o({ref:n},p),{},{components:r})):t.createElement(y,o({ref:n},p))}));function y(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[f]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},86606:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(58168),i=(r(96540),r(15680));const a={id:"sink",title:"Sink"},o=void 0,l={unversionedId:"reference/stream/sink",id:"version-1.0.18/reference/stream/sink",title:"Sink",description:"Sink[E, A, L, B] is a type alias for ZSink[Any, E, A, L, B]. We can think of a Sink as a function that does not require any services and will consume a variable amount of A elements (could be 0, 1, or many!), might fail with an error of type E, and will eventually yield a value of type B. The L is the type of elements in the leftover.",source:"@site/versioned_docs/version-1.0.18/reference/stream/sink.md",sourceDirName:"reference/stream",slug:"/reference/stream/sink",permalink:"/1.0.18/reference/stream/sink",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/stream/sink.md",tags:[],version:"1.0.18",frontMatter:{id:"sink",title:"Sink"},sidebar:"overview_sidebar",previous:{title:"ZSink",permalink:"/1.0.18/reference/stream/zsink"},next:{title:"SubscriptionRef",permalink:"/1.0.18/reference/stream/subscription-ref"}},s={},c=[],p={toc:c},f="wrapper";function u(e){let{components:n,...r}=e;return(0,i.yg)(f,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Sink[E, A, L, B]")," is a type alias for ",(0,i.yg)("inlineCode",{parentName:"p"},"ZSink[Any, E, A, L, B]"),". We can think of a ",(0,i.yg)("inlineCode",{parentName:"p"},"Sink")," as a function that does not require any services and will consume a variable amount of ",(0,i.yg)("inlineCode",{parentName:"p"},"A")," elements (could be 0, 1, or many!), might fail with an error of type ",(0,i.yg)("inlineCode",{parentName:"p"},"E"),", and will eventually yield a value of type ",(0,i.yg)("inlineCode",{parentName:"p"},"B"),". The ",(0,i.yg)("inlineCode",{parentName:"p"},"L")," is the type of elements in the leftover."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"type Sink[+E, A, +L, +B] = ZSink[Any, E, A, L, B]\n")))}u.isMDXComponent=!0}}]);