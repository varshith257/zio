"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[47968],{15680:(e,n,a)=>{a.d(n,{xA:()=>u,yg:()=>g});var i=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,i,r=function(e,n){if(null==e)return{};var a,i,r={},t=Object.keys(e);for(i=0;i<t.length;i++)a=t[i],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(i=0;i<t.length;i++)a=t[i],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var a=e.components,r=e.mdxType,t=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(a),p=r,g=d["".concat(c,".").concat(p)]||d[p]||y[p]||t;return a?i.createElement(g,l(l({ref:n},u),{},{components:a})):i.createElement(g,l({ref:n},u))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var t=a.length,l=new Array(t);l[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<t;s++)l[s]=a[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},54963:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>y,frontMatter:()=>t,metadata:()=>o,toc:()=>s});var i=a(58168),r=(a(96540),a(15680));const t={id:"automatic-zlayer-derivation",title:"Automatic ZLayer Derivation"},l=void 0,o={unversionedId:"reference/contextual/automatic-zlayer-derivation",id:"reference/contextual/automatic-zlayer-derivation",title:"Automatic ZLayer Derivation",description:"ZIO's ZLayer is a powerful tool for building modular, testable, and composable applications. With the ZLayer.derive",source:"@site/docs/reference/contextual/automatic-zlayer-derivation.md",sourceDirName:"reference/contextual",slug:"/reference/contextual/automatic-zlayer-derivation",permalink:"/reference/contextual/automatic-zlayer-derivation",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/contextual/automatic-zlayer-derivation.md",tags:[],version:"current",frontMatter:{id:"automatic-zlayer-derivation",title:"Automatic ZLayer Derivation"},sidebar:"reference-sidebar",previous:{title:"ZLayer",permalink:"/reference/contextual/zlayer"},next:{title:"RLayer",permalink:"/reference/contextual/rlayer"}},c={},s=[{value:"Basic Use Cases",id:"basic-use-cases",level:2},{value:"Default Values",id:"default-values",level:2},{value:"Pre-defined Default Values",id:"pre-defined-default-values",level:3},{value:"<code>Config[A]</code>",id:"configa",level:4},{value:"Some Concurrency Primitives",id:"some-concurrency-primitives",level:4},{value:"Creating New Default Value",id:"creating-new-default-value",level:3},{value:"Overriding Predefined Default Values",id:"overriding-predefined-default-values",level:3},{value:"Caveat: Use <code>Default.WithContext[R, E, A]</code> instead of <code>Default[A]</code> for type annotation",id:"caveat-use-defaultwithcontextr-e-a-instead-of-defaulta-for-type-annotation",level:3},{value:"Attaching Scoped Resources",id:"attaching-scoped-resources",level:2},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:3},{value:"Caveat: Manual layers do not respect <code>ZLayer.Derive.Scoped</code> and <code>ZLayer.Derive.AcquireRelease</code>",id:"caveat-manual-layers-do-not-respect-zlayerderivescoped-and-zlayerderiveacquirerelease",level:3}],u={toc:s},d="wrapper";function y(e){let{components:n,...a}=e;return(0,r.yg)(d,(0,i.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"ZIO's ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer")," is a powerful tool for building modular, testable, and composable applications. With the ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.derive"),"\nutility, you can automatically derive simple ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer")," instances for your services, reducing boilerplate and simplifying\nyour codebase."),(0,r.yg)("h2",{id:"basic-use-cases"},"Basic Use Cases"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nclass Database(connection: String)\nobject Database {\n  val layer: ZLayer[String, Nothing, Database] = ZLayer.derive[Database]\n}\n\nclass UserService(db: Database)\nobject UserService {\n  val layer: ZLayer[Database, Nothing, UserService] = ZLayer.derive[UserService]\n}\n")),(0,r.yg)("h2",{id:"default-values"},"Default Values"),(0,r.yg)("p",null,"For services that might have default values or configurations, ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.derive")," can use implicit\n",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Default[A]")," values:"),(0,r.yg)("h3",{id:"pre-defined-default-values"},"Pre-defined Default Values"),(0,r.yg)("p",null,"There are some pre-defined ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Default[A]")," instances for the following types:"),(0,r.yg)("h4",{id:"configa"},(0,r.yg)("inlineCode",{parentName:"h4"},"Config[A]")),(0,r.yg)("p",null,"When a service ",(0,r.yg)("inlineCode",{parentName:"p"},"A")," has a constructor parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"B")," and there's an implicit ",(0,r.yg)("inlineCode",{parentName:"p"},"Config[B]")," instance, ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.derive"),"\nautomatically loads ",(0,r.yg)("inlineCode",{parentName:"p"},"B")," using ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO.config"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ncase class APIClientConfig(appKey: String, secretKey: Config.Secret)\nobject APIClientConfig {\n  // Because we have an implicit `Config[APIClientConfig]` in scope...\n  implicit val config: Config[APIClientConfig] =\n    (Config.string("appKey") ++ Config.secret("secretKey")).map {\n      case (uri, key) => APIClientConfig(uri, key)\n    }\n}\n\nclass APIClient(config: APIClientConfig) { /* ... */ }\nobject APIClient {\n\n  // `APIClientConfig` is automatically loaded using `ZIO.config` by `ZLayer.derive`,\n  // instead of being required as a layer input.\n  val layer: ZLayer[Any, Config.Error, APIClient] = ZLayer.derive[APIClient]\n}\n')),(0,r.yg)("p",null,"Refer to ",(0,r.yg)("a",{parentName:"p",href:"/reference/configuration/"},"Configuration")," for more about ",(0,r.yg)("inlineCode",{parentName:"p"},"Config"),"."),(0,r.yg)("h4",{id:"some-concurrency-primitives"},"Some Concurrency Primitives"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Promise[E, A]")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Queue[A]")," (using ",(0,r.yg)("inlineCode",{parentName:"li"},"Queue.unbounded"),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Hub[A]")," (using ",(0,r.yg)("inlineCode",{parentName:"li"},"Hub.unbounded"),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Ref[A]")," (when ",(0,r.yg)("inlineCode",{parentName:"li"},"A")," has a default instance)")),(0,r.yg)("h3",{id:"creating-new-default-value"},"Creating New Default Value"),(0,r.yg)("p",null,"There are three main ways to create a ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Default"),":"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"ZLayer.Derive.Default.succeed")," for creating default values from simple values."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"ZLayer.Derive.Default.fromZIO")," for creating default values from effects."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"ZLayer.Derive.Default.fromLayer")," for creating default values from layers.")),(0,r.yg)("h3",{id:"overriding-predefined-default-values"},"Overriding Predefined Default Values"),(0,r.yg)("p",null,"At times, you may want to override a default value in specific scenarios. To achieve this, you can define your own\nimplicit value in a scope with a higher implicit priority, like a closer lexical scope."),(0,r.yg)("p",null,"A common scenario for this is when you want to discard a pre-defined default value and instead treat it as a dependency.\nUse ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Default.service")," for this purpose:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport ZLayer.Derive.Default\n\nclass Wheels(number: Int)\nobject Wheels {\n  implicit val defaultWheels: Default.WithContext[Any, Nothing, Wheels] =\n    Default.succeed(new Wheels(4))\n}\nclass Car(wheels: Wheels)\n\nval carLayer1: ZLayer[Any, Nothing, Car] = ZLayer.derive[Car] // wheels.number == 4\nval carLayer2: ZLayer[Wheels, Nothing, Car] = locally {\n  // The default instance is discarded\n  implicit val newWheels: Default.WithContext[Wheels, Nothing, Wheels] =\n     Default.service[Wheels]\n\n  ZLayer.derive[Car]\n}\n")),(0,r.yg)("h3",{id:"caveat-use-defaultwithcontextr-e-a-instead-of-defaulta-for-type-annotation"},"Caveat: Use ",(0,r.yg)("inlineCode",{parentName:"h3"},"Default.WithContext[R, E, A]")," instead of ",(0,r.yg)("inlineCode",{parentName:"h3"},"Default[A]")," for type annotation"),(0,r.yg)("p",null,"When providing type annotations for ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.derive"),", you must use ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Default.WithContext[R, E, A]")," instead\nof the more general ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Default[A]"),". Using the latter will result in a compilation error due to missing type\ndetails."),(0,r.yg)("p",null,"If you're uncertain about the exact type signature, a practical approach is to omit the type annotation initially. Then,\nuse your IDE's autocomplete feature to insert the inferred type."),(0,r.yg)("h2",{id:"attaching-scoped-resources"},"Attaching Scoped Resources"),(0,r.yg)("p",null,"For services requiring resource management, ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.derive")," offers built-in support for scoped values. When a service\n",(0,r.yg)("inlineCode",{parentName:"p"},"A")," implements the ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Scoped[-R, +E]")," trait, ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.derive[A]")," automatically recognizes it. As a result,\nthe ",(0,r.yg)("inlineCode",{parentName:"p"},"scoped")," effect is executed during the layer's construction and finalization phases."),(0,r.yg)("p",null,"The 'resource' might be a background task, a lock file, or etc., that can be managed by ",(0,r.yg)("a",{parentName:"p",href:"/reference/resource/scope"},(0,r.yg)("inlineCode",{parentName:"a"},"Scope")),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\ntrait Connection {\n  def healthCheck: ZIO[Any, Throwable, Unit]\n  // ...\n}\n\nclass ThirdPartyService(connection: Connection) extends ZLayer.Derive.Scoped[Any, Nothing] {\n\n  // Repeats health check every 10 seconds in background during the layer's lifetime\n  override def scoped(implicit trace: Trace): ZIO[Scope, Nothing, Any] =\n    connection.healthCheck\n      .ignoreLogged\n      .repeat(Schedule.spaced(10.seconds))\n      .forkScoped\n}\n\nobject ThirdPartyService {\n  // `ZLayer.Derive.Scoped` should be used with `ZLayer.derive`\n  val layer: ZLayer[Connection, Nothing, ThirdPartyService] = ZLayer.derive[ThirdPartyService]\n}\n")),(0,r.yg)("p",null,"If ",(0,r.yg)("inlineCode",{parentName:"p"},"scoped")," fails during resource acquisition, the entire ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer")," initialization process fails."),(0,r.yg)("h3",{id:"lifecycle-hooks"},"Lifecycle Hooks"),(0,r.yg)("p",null,"Additionally, there's the ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.AcquireRelease[R, E, A]")," trait. This is a specialized version of\n",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Derive.Scoped")," designed for added convenience, allowing users to define initialization and finalization hooks\ndistinctly."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport java.io.File\n\ndef acquireLockFile(path: String): ZIO[Any, Throwable, File] = ???\ndef deleteFile(file: File): ZIO[Any, Throwable, Unit] = ???\n\nclass ASingletonService(lockFilePath: String) extends ZLayer.Derive.AcquireRelease[Any, Throwable, File] {\n\n  override def acquire: ZIO[Any, Throwable, File] =\n     acquireLockFile(lockFilePath)\n\n  override def release(lockFile: File): ZIO[Any, Nothing, Any] =\n     deleteFile(lockFile).ignore\n}\n\nobject ASingletonService {\n  // Note: it's for illustrative example. In a real-world application, you will probably want to\n  //       put the `String` in a config.\n  val layer: ZLayer[String, Throwable, ASingletonService] = ZLayer.derive[ASingletonService]\n}\n")),(0,r.yg)("h3",{id:"caveat-manual-layers-do-not-respect-zlayerderivescoped-and-zlayerderiveacquirerelease"},"Caveat: Manual layers do not respect ",(0,r.yg)("inlineCode",{parentName:"h3"},"ZLayer.Derive.Scoped")," and ",(0,r.yg)("inlineCode",{parentName:"h3"},"ZLayer.Derive.AcquireRelease")),(0,r.yg)("p",null,"When manually creating ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer")," instances without using ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.derive"),", the lifecycle hooks won't be automatically\ninvoked. Refer to ",(0,r.yg)("a",{parentName:"p",href:"/reference/resource/"},"Resource Management in ZIO")," for more details about general resource management\nin ZIO."))}y.isMDXComponent=!0}}]);