"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[28711],{15680:(e,r,t)=>{t.d(r,{xA:()=>f,yg:()=>d});var n=t(96540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},f=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},b=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),u=s(t),b=i,d=u["".concat(l,".").concat(b)]||u[b]||p[b]||a;return t?n.createElement(d,o(o({ref:r},f),{},{components:t})):n.createElement(d,o({ref:r},f))}));function d(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=b;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},44937:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=t(58168),i=(t(96540),t(15680));const a={id:"fiberstatus",title:"Fiber.Status"},o=void 0,c={unversionedId:"reference/fiber/fiberstatus",id:"reference/fiber/fiberstatus",title:"Fiber.Status",description:"Fiber.Status describes the current status of a Fiber.",source:"@site/docs/reference/fiber/fiberstatus.md",sourceDirName:"reference/fiber",slug:"/reference/fiber/fiberstatus",permalink:"/reference/fiber/fiberstatus",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/fiber/fiberstatus.md",tags:[],version:"current",frontMatter:{id:"fiberstatus",title:"Fiber.Status"},sidebar:"reference-sidebar",previous:{title:"FiberId",permalink:"/reference/fiber/fiberid"},next:{title:"Introduction to ZIO's Synchronization Primitives",permalink:"/reference/sync/"}},l={},s=[],f={toc:s},u="wrapper";function p(e){let{components:r,...t}=e;return(0,i.yg)(u,(0,n.A)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Fiber.Status")," describes the current status of a ",(0,i.yg)("a",{parentName:"p",href:"/reference/fiber/fiber.md"},"Fiber"),"."),(0,i.yg)("p",null,"Each fiber can be in one of the following status:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Done"),(0,i.yg)("li",{parentName:"ul"},"Running"),(0,i.yg)("li",{parentName:"ul"},"Suspended")),(0,i.yg)("p",null,"In the following example, we are going to ",(0,i.yg)("inlineCode",{parentName:"p"},"await")," on a never-ending fiber and determine the id of that fiber, which we are blocking on:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nfor {\n  f1 <- ZIO.never.fork\n  f2 <- f1.await.fork\n  blockingOn <- f2.status\n    .collect(()) { case Fiber.Status.Suspended(_, _, blockingOn) =>\n      blockingOn\n    }\n    .eventually\n} yield (assert(blockingOn == f1.id))\n")))}p.isMDXComponent=!0}}]);