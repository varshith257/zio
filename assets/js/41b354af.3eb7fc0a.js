"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[10321],{15680:(e,a,r)=>{r.d(a,{xA:()=>u,yg:()=>g});var t=r(96540);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=t.createContext({}),p=function(e){var a=t.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):o(o({},a),e)),r},u=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),d=n,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return r?t.createElement(g,o(o({ref:a},u),{},{components:r})):t.createElement(g,o({ref:a},u))}));function g(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[c]="string"==typeof e?e:n,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},58287:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var t=r(58168),n=(r(96540),r(15680));const l={id:"wrappers",title:"Wrappers"},o="Client wrappers",i={unversionedId:"zio-aws/wrappers",id:"zio-aws/wrappers",title:"Wrappers",description:"Service modules",source:"@site/docs/zio-aws/wrappers.md",sourceDirName:"zio-aws",slug:"/zio-aws/wrappers",permalink:"/zio-aws/wrappers",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-aws/wrappers.md",tags:[],version:"current",frontMatter:{id:"wrappers",title:"Wrappers"},sidebar:"ecosystem-sidebar",previous:{title:"Artifacts",permalink:"/zio-aws/artifacts"},next:{title:"Configuration",permalink:"/zio-aws/configuration"}},s={},p=[{value:"Service modules",id:"service-modules",level:3},{value:"Operations",id:"operations",level:3},{value:"Model wrappers",id:"model-wrappers",level:3},{value:"Mocks",id:"mocks",level:3}],u={toc:p},c="wrapper";function m(e){let{components:a,...r}=e;return(0,n.yg)(c,(0,t.A)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"client-wrappers"},"Client wrappers"),(0,n.yg)("h3",{id:"service-modules"},"Service modules"),(0,n.yg)("p",null,"For each AWS Service the library defines a ",(0,n.yg)("em",{parentName:"p"},"ZIO service")," with wrapper functions for all the ",(0,n.yg)("em",{parentName:"p"},"operations"),", a ",(0,n.yg)("inlineCode",{parentName:"p"},"live"),"\nimplementation calling the Java SDK and a ",(0,n.yg)("inlineCode",{parentName:"p"},"mock")," implementation using ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-mock"},"zio-mock"),"."),(0,n.yg)("p",null,"The live implementation depends on a core ",(0,n.yg)("em",{parentName:"p"},"AWS configuration layer"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"val live: ZLayer[AwsConfig, Throwable, Ec2]\n")),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"AwsConfig")," layer defines how each service's async Java client gets configured, including the http client which is\nprovided by another layer ",(0,n.yg)("inlineCode",{parentName:"p"},"AwsConfig")," is depending on."),(0,n.yg)("p",null,"Each module has accessor functions for ",(0,n.yg)("em",{parentName:"p"},"all operations")," of the given service."),(0,n.yg)("h3",{id:"operations"},"Operations"),(0,n.yg)("p",null,"For simple request-response operations the library generates a very light wrapper:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def deleteVolume(request: DeleteVolumeRequest): ZIO[Ec2, AwsError, DeleteVolumeResponse.ReadOnly]\n")),(0,n.yg)("p",null,"For operations where either the input or the output or both are ",(0,n.yg)("em",{parentName:"p"},"byte streams"),", a ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream")," wrapper is generated:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def getObject(request: GetObjectRequest): ZIO[S3, AwsError, StreamingOutputResult[Any, GetObjectResponse.ReadOnly, Byte]]\ndef putObject(request: PutObjectRequest, body: ZStream[Any, AwsError, Byte]): ZIO[S3, AwsError, PutObjectResponse.ReadOnly]\n")),(0,n.yg)("p",null,"where the output is a stream packed together with additional response data:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"case class StreamingOutputResult[R, Response, Item](\n  response: Response,\n  output: ZStream[R, AwsError, Item]\n)\n")),(0,n.yg)("p",null,"For operations with ",(0,n.yg)("em",{parentName:"p"},"event streams")," a ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream")," of a model type gets generated:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def startStreamTranscription(request: StartStreamTranscriptionRequest, input: ZStream[Any, AwsError, AudioStream]): ZStream[TranscribeStreaming, AwsError, TranscriptEvent.ReadOnly]\n")),(0,n.yg)("p",null,"And for all operations that supports ",(0,n.yg)("em",{parentName:"p"},"pagination"),", streaming wrappers gets generated:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def scan(request: ScanRequest): ZStream[DynamoDb, AwsError, Map[AttributeName, AttributeValue.ReadOnly]]\n")),(0,n.yg)("p",null,"Note that for event streaming or paginating operations returning a ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream")," the actual AWS call happens when the stream gets pulled."),(0,n.yg)("p",null,"For use cases when calling the ",(0,n.yg)("em",{parentName:"p"},"paginating")," interface directly is necessary - for example when forwarding paginated results through a HTTP API, the library generates non-streaming wrappers as well for these methods."),(0,n.yg)("p",null,"For example the DynamoDB ",(0,n.yg)("inlineCode",{parentName:"p"},"scan")," method's non-streaming variant is defined as:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"def scanPaginated(request: ScanRequest): ZIO[DynamoDb, ScanResponse.ReadOnly]\n")),(0,n.yg)("h3",{id:"model-wrappers"},"Model wrappers"),(0,n.yg)("p",null,"For each model type a set of wrappers are generated, providing the following functionality:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Case classes with default parameter values instead of the ",(0,n.yg)("em",{parentName:"li"},"builder pattern")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://zio.github.io/zio-prelude/docs/newtypes/"},"zio-prelude's newtype wrappers")," for primitive types"),(0,n.yg)("li",{parentName:"ul"},"Automatic conversion to Scala collection types"),(0,n.yg)("li",{parentName:"ul"},"ADTs instead of the Java enums "),(0,n.yg)("li",{parentName:"ul"},'ZIO getter functions to "get or fail" the optional model fields'),(0,n.yg)("li",{parentName:"ul"},"Using zio-prelude's ",(0,n.yg)("inlineCode",{parentName:"li"},"Optional")," type to eliminate boilerplate when constructing models with many optional fields")),(0,n.yg)("p",null,"The following example from the ",(0,n.yg)("inlineCode",{parentName:"p"},"zio-aws-elasticsearch")," library shows how the generated case classes look like, to be used as input for the service operations:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"case class DescribePackagesFilter(name: Optional[DescribePackagesFilterName] = Optional.Absent, \n                                  value: Optional[Iterable[primitives.DescribePackagesFilterValue]] = Optional.Absent) {\n    def buildAwsValue(): software.amazon.awssdk.services.elasticsearch.model.DescribePackagesFilter = {\n      import DescribePackagesFilter.zioAwsBuilderHelper.BuilderOps\n      software.amazon.awssdk.services.elasticsearch.model.DescribePackagesFilter\n        .builder()\n        .optionallyWith(name.map(value => value.unwrap))(_.name)\n        .optionallyWith(value.map(value => value.map { item => item: java.lang.String }.asJava))(_.value)\n        .build()\n    }\n\n    def asReadOnly: DescribePackagesFilter.ReadOnly = DescribePackagesFilter.wrap(buildAwsValue())\n}\n")),(0,n.yg)("p",null,"When processing the ",(0,n.yg)("em",{parentName:"p"},"results")," of the operations (either directly or though the ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream")," wrappers), the AWS Java model types are wrapped\nby a ",(0,n.yg)("em",{parentName:"p"},"read-only wrapper interface"),". The following example shows one from the ",(0,n.yg)("inlineCode",{parentName:"p"},"transcribe")," module:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object CreateMedicalVocabularyResponse {\n  private lazy val zioAwsBuilderHelper: BuilderHelper[software.amazon.awssdk.services.transcribe.model.CreateMedicalVocabularyResponse] = BuilderHelper.apply\n\n  trait ReadOnly {\n    def editable: CreateMedicalVocabularyResponse = CreateMedicalVocabularyResponse(vocabularyNameValue.map(value => value), languageCodeValue.map(value => value), vocabularyStateValue.map(value => value), lastModifiedTimeValue.map(value => value), failureReasonValue.map(value => value))\n    def vocabularyName: Optional[VocabularyName]\n    def languageCode: Optional[LanguageCode]\n    def vocabularyState: Optional[VocabularyState]\n    def lastModifiedTime: Optional[DateTime]\n    def failureReason: Optional[FailureReason]\n    def getVocabularyName: ZIO[Any, AwsError, VocabularyName] = AwsError.unwrapOptionField("vocabularyName", vocabularyNameValue)\n    def getLanguageCode: ZIO[Any, AwsError, LanguageCode] = AwsError.unwrapOptionField("languageCode", languageCodeValue)\n    def getVocabularyState: ZIO[Any, AwsError, VocabularyState] = AwsError.unwrapOptionField("vocabularyState", vocabularyStateValue)\n    def getLastModifiedTime: ZIO[Any, AwsError, DateTime] = AwsError.unwrapOptionField("lastModifiedTime", lastModifiedTimeValue)\n    def getFailureReason: ZIO[Any, AwsError, FailureReason] = AwsError.unwrapOptionField("failureReason", failureReasonValue)\n  }\n\n  private class Wrapper(impl: software.amazon.awssdk.services.transcribe.model.CreateMedicalVocabularyResponse) extends CreateMedicalVocabularyResponse.ReadOnly {\n    // ... implements the ReadOnly interface by querying the underlying Java object\n  }\n\n  def wrap(impl: software.amazon.awssdk.services.transcribe.model.CreateMedicalVocabularyResponse): ReadOnly = new Wrapper(impl)\n}\n')),(0,n.yg)("p",null,"As a large part of the models in the AWS SDK are defined as ",(0,n.yg)("em",{parentName:"p"},"optional"),", the generated wrapper also contains ZIO accessor functions,\nwhich lift the option value to make it more comfortable to chain the AWS operations."),(0,n.yg)("h3",{id:"mocks"},"Mocks"),(0,n.yg)("p",null,"Each module also contains generated ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-mock"},(0,n.yg)("em",{parentName:"a"},"ZIO Test mocks"))," for the given service."),(0,n.yg)("p",null,"The following example shows how to use them with the ",(0,n.yg)("inlineCode",{parentName:"p"},"zio-aws-athena")," library:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'val athena = AthenaMock.StartQueryExecution(\n  hasField(\n    "queryString",\n    (startQueryExecutionRequest: StartQueryExecutionRequest) =>\n      startQueryExecutionRequest.queryString,\n      equalTo(givenQuery)\n  ),\n  value(\n    StartQueryExecutionResponse.wrap(\n      software.amazon.awssdk.services.athena.model.StartQueryExecutionResponse\n        .builder()\n        .queryExecutionId(executionId)\n        build()\n    )\n  )\n)\n\ncodeUsingAthena.provide(athena)\n')))}m.isMDXComponent=!0}}]);