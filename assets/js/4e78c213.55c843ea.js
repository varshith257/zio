"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[17184],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>f});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=d(t),u=o,f=l["".concat(c,".").concat(u)]||l[u]||m[u]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},83247:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(58168),o=(t(96540),t(15680));const a={id:"integration-with-zio-streams",title:"Integration with ZIO Streams"},i=void 0,s={unversionedId:"zio-schema/integration-with-zio-streams",id:"zio-schema/integration-with-zio-streams",title:"Integration with ZIO Streams",description:"In addition to the regular encode and decode functions, each codec also has a streaming version of these functions called streamEncoder and streamDecoder. By invoking these methods on codecs, we can obtain a ZPipeline where the encoder and decoder are integrated into the ZPipeline stream transformer.",source:"@site/docs/zio-schema/integration-with-zio-streams.md",sourceDirName:"zio-schema",slug:"/zio-schema/integration-with-zio-streams",permalink:"/zio-schema/integration-with-zio-streams",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/integration-with-zio-streams.md",tags:[],version:"current",frontMatter:{id:"integration-with-zio-streams",title:"Integration with ZIO Streams"}},c={},d=[],p={toc:d},l="wrapper";function m(e){let{components:n,...t}=e;return(0,o.yg)(l,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"In addition to the regular ",(0,o.yg)("inlineCode",{parentName:"p"},"encode")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"decode")," functions, each codec also has a streaming version of these functions called ",(0,o.yg)("inlineCode",{parentName:"p"},"streamEncoder")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"streamDecoder"),". By invoking these methods on codecs, we can obtain a ",(0,o.yg)("inlineCode",{parentName:"p"},"ZPipeline")," where the encoder and decoder are integrated into the ",(0,o.yg)("inlineCode",{parentName:"p"},"ZPipeline")," stream transformer."),(0,o.yg)("p",null,"We can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"ZPipline")," to transform (encode/decode) a stream of values of type ",(0,o.yg)("inlineCode",{parentName:"p"},"A")," into a stream of values of type ",(0,o.yg)("inlineCode",{parentName:"p"},"B"),". "),(0,o.yg)("p",null,"For example, assume we have a stream of ",(0,o.yg)("inlineCode",{parentName:"p"},"Person")," values, and we want to encode them into a stream of bytes and then convert back to ",(0,o.yg)("inlineCode",{parentName:"p"},"Person")," values. We can do this as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.stream._\nimport zio.schema._\nimport zio.schema.codec.JsonCodec\n\nobject Main extends ZIOAppDefault {\n  case class Person(name: String, age: Int)\n\n  object Person {\n    implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\n  }\n\n  def run: ZIO[Any, Exception, Unit] =\n    ZStream\n      .fromIterable(Seq(Person("John", 42)))\n      .debug("the input object is")\n      .via(JsonCodec.schemaBasedBinaryCodec[Person].streamEncoder)\n      .via(ZPipeline.utfDecode)\n      .debug("json string of person")\n      .via(ZPipeline.utf8Encode)\n      .via(JsonCodec.schemaBasedBinaryCodec[Person].streamDecoder)\n      .debug("person after roundtrip")\n      .runDrain\n}\n')))}m.isMDXComponent=!0}}]);