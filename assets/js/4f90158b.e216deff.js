"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[29738],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var o=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function g(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=o.createContext({}),p=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(a.Provider,{value:n},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=g(e,["components","mdxType","originalType","parentName"]),s=p(t),u=r,y=s["".concat(a,".").concat(u)]||s[u]||f[u]||i;return t?o.createElement(y,l(l({ref:n},c),{},{components:t})):o.createElement(y,l({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var g={};for(var a in n)hasOwnProperty.call(n,a)&&(g[a]=n[a]);g.originalType=e,g[s]="string"==typeof e?e:r,l[1]=g;for(var p=2;p<i;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},71168:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>g,toc:()=>p});var o=t(58168),r=(t(96540),t(15680));const i={id:"log-filter",title:"Log Filter"},l=void 0,g={unversionedId:"zio-logging/log-filter",id:"zio-logging/log-filter",title:"Log Filter",description:"A LogFilter represents function/conditions for log filtering.",source:"@site/docs/zio-logging/log-filter.md",sourceDirName:"zio-logging",slug:"/zio-logging/log-filter",permalink:"/zio-logging/log-filter",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/log-filter.md",tags:[],version:"current",frontMatter:{id:"log-filter",title:"Log Filter"},sidebar:"ecosystem-sidebar",previous:{title:"Logger Context and Annotations",permalink:"/zio-logging/logger-context-and-annotations"},next:{title:"Console Logger",permalink:"/zio-logging/console-logger"}},a={},p=[{value:"Configuration",id:"configuration",level:2}],c={toc:p},s="wrapper";function f(e){let{components:n,...t}=e;return(0,r.yg)(s,(0,o.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"A ",(0,r.yg)("inlineCode",{parentName:"p"},"LogFilter")," represents function/conditions for log filtering."),(0,r.yg)("p",null,"Following filter"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.LogLevel\nimport zio.logging.LogFilter\n\nval filter = LogFilter.logLevelByName(\n    LogLevel.Debug,\n    "io.netty" -> LogLevel.Info, \n    "io.grpc.netty" -> LogLevel.Info,\n    "org.my.**.ServiceX" -> LogLevel.Trace, // glob-like (any paths) filter\n    "org.my.X*Layers" -> LogLevel.Info // glob-like (single or partial path) filter\n)\n')),(0,r.yg)("p",null,"will use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Debug")," log level for everything except for log events with the logger name\nprefixed by either ",(0,r.yg)("inlineCode",{parentName:"p"},'List("io", "netty")')," or ",(0,r.yg)("inlineCode",{parentName:"p"},'List("io", "grpc", "netty")')," or ",(0,r.yg)("inlineCode",{parentName:"p"},'List("org", "my", "**", "ServiceX")')," or ",(0,r.yg)("inlineCode",{parentName:"p"},'List("org", "my", "X*Layers")'),".\nLogger name is extracted from log annotation or ",(0,r.yg)("inlineCode",{parentName:"p"},"zio.Trace"),"."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"LogFilter.filter")," returns a version of ",(0,r.yg)("inlineCode",{parentName:"p"},"zio.ZLogger")," that only logs messages when this filter is satisfied."),(0,r.yg)("h2",{id:"configuration"},"Configuration"),(0,r.yg)("p",null,"the configuration for filter (",(0,r.yg)("inlineCode",{parentName:"p"},"zio.logging.LogFilter.LogLevelByNameConfig"),") has the following configuration structure:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'{\n    # LogLevel values: ALL, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, OFF\n    \n    # root LogLevel, default value: INFO\n    rootLevel = DEBUG \n    \n    # LogLevel configurations for specific logger names, or prefixes, default value: empty\n    mappings {\n      "io.netty" = "INFO"\n      "io.grpc.netty" = "INFO"\n    }\n}\n')),(0,r.yg)("p",null,"this configuration is equivalent to following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.LogLevel\nimport zio.logging.LogFilter\n\nval config =\n  LogFilter.LogLevelByNameConfig(LogLevel.Debug, Map("io.netty" -> LogLevel.Info, "io.grpc.netty" -> LogLevel.Info))\n\nval filter = LogFilter.logLevelByName(config)    \n')))}f.isMDXComponent=!0}}]);