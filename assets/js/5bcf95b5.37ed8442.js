"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[87492],{15680:(e,n,o)=>{o.d(n,{xA:()=>l,yg:()=>h});var t=o(96540);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function c(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=t.createContext({}),d=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):c(c({},n),e)),o},l=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=d(o),u=a,h=p["".concat(s,".").concat(u)]||p[u]||m[u]||r;return o?t.createElement(h,c(c({ref:n},l),{},{components:o})):t.createElement(h,c({ref:n},l))}));function h(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=o.length,c=new Array(r);c[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:a,c[1]=i;for(var d=2;d<r;d++)c[d]=o[d];return t.createElement.apply(null,c)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},74254:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=o(58168),a=(o(96540),o(15680));const r={id:"bson",title:"Bson Codecs",sidebar_label:"BSON"},c=void 0,i={unversionedId:"zio-schema/derivations/codecs/bson",id:"zio-schema/derivations/codecs/bson",title:"Bson Codecs",description:"Introduction",source:"@site/docs/zio-schema/derivations/codecs/bson.md",sourceDirName:"zio-schema/derivations/codecs",slug:"/zio-schema/derivations/codecs/bson",permalink:"/zio-schema/derivations/codecs/bson",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/codecs/bson.md",tags:[],version:"current",frontMatter:{id:"bson",title:"Bson Codecs",sidebar_label:"BSON"},sidebar:"ecosystem-sidebar",previous:{title:"Apache Thrift",permalink:"/zio-schema/derivations/codecs/thrift"},next:{title:"JSON",permalink:"/zio-schema/derivations/codecs/json"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"BsonSchemaCodec",id:"bsonschemacodec",level:2},{value:"Example",id:"example",level:2}],l={toc:d},p="wrapper";function m(e){let{components:n,...o}=e;return(0,a.yg)(p,(0,t.A)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"BSON (Binary JSON) is a binary serialization format used to store and exchange data efficiently. In this article, we will explore how to derive BSON codecs from a ZIO Schema. The ",(0,a.yg)("inlineCode",{parentName:"p"},"zio-schema-bson")," module, provides support for deriving codecs from ZIO Schema, and makes it easy to communicate data in BSON format."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("p",null,"To use BSON codecs, you need to add the following dependency to your Scala project:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-schema-bson" % 1.5.0\n')),(0,a.yg)("h2",{id:"bsonschemacodec"},"BsonSchemaCodec"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"BsonSchemaCodec")," object inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"zio.schema.codec")," package provides the ",(0,a.yg)("inlineCode",{parentName:"p"},"bsonCodec")," operator which allows us to derive Protobuf codecs from a ZIO Schema:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"object BsonSchemaCodec {\n  def bsonCodec[A](schema: Schema[A]): BsonCodec[A]\n}\n")),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)("p",null,"Let's see an example of how to derive a BSON codec for a case class using ZIO Schema:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'import org.bson.BsonValue\nimport zio._\nimport zio.bson._\nimport zio.schema.codec._\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen\n  implicit val bsonCodec: BsonCodec[Person] =\n    BsonSchemaCodec.bsonCodec(Person.schema)\n}\n\nobject Main extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("Bson Example:")\n    person: Person     = Person("John", 42)\n    encoded: BsonValue = person.toBsonValue\n    _       <- ZIO.debug(s"person object encoded to BsonValue: $encoded")\n    decoded <- ZIO.fromEither(encoded.as[Person])\n    _ <- ZIO.debug(s"BsonValue of person object decoded to Person: $decoded")\n  } yield ()\n}\n')),(0,a.yg)("p",null,"In the example above, we defined a case class ",(0,a.yg)("inlineCode",{parentName:"p"},"Person")," with fields ",(0,a.yg)("inlineCode",{parentName:"p"},"name")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"age"),". We then derived a ZIO Schema for the ",(0,a.yg)("inlineCode",{parentName:"p"},"Person")," case class using ",(0,a.yg)("inlineCode",{parentName:"p"},"DeriveSchema.gen"),"."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"BsonSchemaCodec.bsonCodec")," method allowed us to create a BSON codec for the ",(0,a.yg)("inlineCode",{parentName:"p"},"Person")," case class by passing its corresponding ZIO Schema. Now, we can effortlessly encode ",(0,a.yg)("inlineCode",{parentName:"p"},"Person")," objects to BSON and decode BSON values back to Person instances."))}m.isMDXComponent=!0}}]);