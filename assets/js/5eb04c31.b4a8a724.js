"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[9288],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var o=n(96540);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,s=function(e,t){if(null==e)return{};var n,o,s={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=s,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(g,r(r({ref:t},c),{},{components:n})):o.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,r=new Array(a);r[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:s,r[1]=i;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},64267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(58168),s=(n(96540),n(15680));const a={id:"index",title:"Introduction to ZIO Test Assertions"},r=void 0,i={unversionedId:"reference/test/assertions/index",id:"reference/test/assertions/index",title:"Introduction to ZIO Test Assertions",description:"Assertions are used to make sure that the assumptions on computations are exactly what we expect them to be. They are executable checks for a property that must be true in our code. Also, they can be seen as a specification of a program and facilitate understanding of programs.",source:"@site/docs/reference/test/assertions/index.md",sourceDirName:"reference/test/assertions",slug:"/reference/test/assertions/",permalink:"/reference/test/assertions/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/assertions/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Test Assertions"},sidebar:"reference-sidebar",previous:{title:"JUnit Integration",permalink:"/reference/test/junit-integration"},next:{title:"Classic Assertions",permalink:"/reference/test/assertions/classic-assertions"}},l={},p=[{value:"Built-in Assertions",id:"built-in-assertions",level:2},{value:"Logical Operations",id:"logical-operations",level:2},{value:"Composable Nested Assertions",id:"composable-nested-assertions",level:2},{value:"Testing using Assertions",id:"testing-using-assertions",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,s.yg)(m,(0,o.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Assertions are used to make sure that the assumptions on computations are exactly what we expect them to be. They are ",(0,s.yg)("em",{parentName:"p"},"executable checks")," for a property that must be true in our code. Also, they can be seen as a ",(0,s.yg)("em",{parentName:"p"},"specification of a program")," and facilitate understanding of programs."),(0,s.yg)("p",null,"An ",(0,s.yg)("inlineCode",{parentName:"p"},"Assertion[A]")," is a statement that can be used to assert the predicate of type ",(0,s.yg)("inlineCode",{parentName:"p"},"A => Boolean"),". It is a piece of code that checks whether a value of type ",(0,s.yg)("inlineCode",{parentName:"p"},"A")," satisfies some condition. If the condition is satisfied, the assertion passes; otherwise, it fails. We can think of the ",(0,s.yg)("inlineCode",{parentName:"p"},"Assertion[A]")," as a function from ",(0,s.yg)("inlineCode",{parentName:"p"},"A")," to ",(0,s.yg)("inlineCode",{parentName:"p"},"Boolean"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},"case class Assertion[-A](arrow: TestArrow[A, Boolean]) {\n  def test(value: A): Boolean = ???\n  def run(value: => A): TestResult = ???\n}\n")),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"Assertion")," has a companion object with lots of predefined assertions that can be used to test values of different types. For example, the ",(0,s.yg)("inlineCode",{parentName:"p"},"Assertion.equalTo")," takes a value of type ",(0,s.yg)("inlineCode",{parentName:"p"},"A")," and returns an assertion that checks whether the value is equal to the given value:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.test._\nimport zio.test.Assertion\n\ndef sut = 40 + 2\nval assertion: Assertion[Int] = Assertion.equalTo[Int, Int](42)\nassertion.test(sut) // true\n")),(0,s.yg)("admonition",{type:"note"},(0,s.yg)("p",{parentName:"admonition"},"Behind the scenes, the ",(0,s.yg)("inlineCode",{parentName:"p"},"Assertion")," type uses a ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow")," type to represent the function from ",(0,s.yg)("inlineCode",{parentName:"p"},"A")," to ",(0,s.yg)("inlineCode",{parentName:"p"},"Boolean"),". For example, instead of using a predefined ",(0,s.yg)("inlineCode",{parentName:"p"},"equalTo")," assertion, we can create our assertion directly from a ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow"),":"),(0,s.yg)("pre",{parentName:"admonition"},(0,s.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.test._\n\ndef sut = 40 + 2\nval assertion: Assertion[Int] = Assertion(TestArrow.fromFunction(_ == 42))\nassertion.test(sut) // true\n")),(0,s.yg)("p",{parentName:"admonition"},"Please note that the ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow")," is the fundamental building block of assertions specially the complex ones. Usually, as the end user, we do not require interacting with ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow")," directly. But it is good to know that it is there and how it works. We will see more about ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow")," in the next sections.")),(0,s.yg)("h2",{id:"built-in-assertions"},"Built-in Assertions"),(0,s.yg)("p",null,"The companion object of ",(0,s.yg)("inlineCode",{parentName:"p"},"Assertion")," provides a comprehensive set of predefined assertions that can be used to test values of different types. We have a separate page for introducing the ",(0,s.yg)("a",{parentName:"p",href:"/reference/test/assertions/built-in-assertions"},"built-in assertions")," in ZIO Test."),(0,s.yg)("h2",{id:"logical-operations"},"Logical Operations"),(0,s.yg)("p",null,"As a proposition, assertions compose using logical conjunction and disjunction and can be negated:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.test._\n\nval greaterThanZero: Assertion[Int] = Assertion.isPositive\nval lessThanFive   : Assertion[Int] = Assertion.isLessThan(5)\nval equalTo10      : Assertion[Int] = Assertion.equalTo(10)\n\nval assertion: Assertion[Int] = greaterThanZero && lessThanFive || !equalTo10\n")),(0,s.yg)("p",null,"After composing them, we can run it on any expression:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval result: TestResult = assertion.run(10)\n")),(0,s.yg)("h2",{id:"composable-nested-assertions"},"Composable Nested Assertions"),(0,s.yg)("p",null,"Besides the logical operators, we can also combine assertions like the following to have assertions on more complex types like ",(0,s.yg)("inlineCode",{parentName:"p"},"Option[Int]"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},'val assertion: Assertion[Option[Int]] = Assertion.isSome(Assertion.equalTo(5))\n\ntest("optional value is some(5)") {\n  assert(Some(1 + 4))(assertion)\n}\n')),(0,s.yg)("p",null,"This nested assertion will pass only if the given value is ",(0,s.yg)("inlineCode",{parentName:"p"},"Some(5)"),"."),(0,s.yg)("p",null,"We can also combine assertions on more complex types like ",(0,s.yg)("inlineCode",{parentName:"p"},"Either[Int, Option[Int]]"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.test.Assertion.{isRight, isSome, equalTo, hasField}\n\ntest("either value is right(Some(5))") {\n  assert(Right(Some(1 + 4)))(isRight(isSome(equalTo(5))))\n}\n')),(0,s.yg)("p",null,"Here we're checking deeply nested values inside an ",(0,s.yg)("inlineCode",{parentName:"p"},"Either")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"Option"),". Because ",(0,s.yg)("inlineCode",{parentName:"p"},"Assertion"),"s compose this is not a problem. All layers are being peeled off tested for the condition until the final value is reached."),(0,s.yg)("p",null,"Here the expression ",(0,s.yg)("inlineCode",{parentName:"p"},"Right(Some(1 + 4))")," is of type ",(0,s.yg)("inlineCode",{parentName:"p"},"Either[Any, Option[Int]]")," and our assertion ",(0,s.yg)("inlineCode",{parentName:"p"},"isRight(isSome(equalTo(5)))")," is of type ",(0,s.yg)("inlineCode",{parentName:"p"},"Assertion[Either[Any, Option[Int]]]")),(0,s.yg)("admonition",{type:"note"},(0,s.yg)("p",{parentName:"admonition"},"Under the hood, the above assertion uses the ",(0,s.yg)("inlineCode",{parentName:"p"},">>>")," operator of ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow")," to make the composition of two assertions sequentially:"),(0,s.yg)("pre",{parentName:"admonition"},(0,s.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.test._\nimport zio.test.Assertion\n\ndef isRight[A]: TestArrow[Either[Any, A], A] =\n  TestArrow.fromFunction(_.toOption.get)\n\ndef isSome[A]: TestArrow[Option[A], A] =\n  TestArrow.fromFunction(_.get)\n\ndef equalTo[A, B](expected: B): TestArrow[B, Boolean] =\n  TestArrow.fromFunction((actual: B) => actual == expected)\n\nval assertion: Assertion[Either[Any, Option[Int]]] = {\n  val arrow: TestArrow[Either[Any, Option[Int]], Boolean] =\n    isRight >>>        // Either[Any, Option[Int]] => Option[Int]\n      isSome[Int] >>>  // Option[Int] => Int\n      equalTo(5)       // Int => Boolean\n  Assertion(arrow)\n}\n")),(0,s.yg)("p",{parentName:"admonition"},"By composing an arrow of ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow[Either[Any, Option[Int]], Option[Int]]")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow[Option[Int], Boolean]")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow[Int, Boolean]")," we can create an arrow of ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow[Either[Any, Option[Int]], Boolean]"),". Using this technique, we can compose more arrows to create more and more complex assertions."),(0,s.yg)("p",{parentName:"admonition"},"We can see that ",(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow")," has the same analogy as ",(0,s.yg)("a",{parentName:"p",href:"/reference/contextual/zlayer"},(0,s.yg)("inlineCode",{parentName:"a"},"ZLayer")),'. We are dealing with generalization of functions and composition of functions in a pure and declarative fashion, which is called "arrow" in functional programming. In other words, with ',(0,s.yg)("inlineCode",{parentName:"p"},"TestArrow"),", we have reified the concept of a function and its composition, which allows us to manipulate functions as first-class values."),(0,s.yg)("p",{parentName:"admonition"},'One of the benefits of reification of assertions into "arrows" is that we can write macros to generate assertions from pure Scala code. This is how the smart assertions work in ZIO Test.')),(0,s.yg)("h2",{id:"testing-using-assertions"},"Testing using Assertions"),(0,s.yg)("p",null,"We have two types of methods for writing test assertions:"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("strong",{parentName:"li"},(0,s.yg)("a",{parentName:"strong",href:"/reference/test/assertions/classic-assertions"},"Classic Assertions")),"\u2014 This one is the classic way of asserting ordinary values (",(0,s.yg)("inlineCode",{parentName:"li"},"assert"),") and ZIO effects (",(0,s.yg)("inlineCode",{parentName:"li"},"assertZIO"),") without using macros."),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("strong",{parentName:"li"},(0,s.yg)("a",{parentName:"strong",href:"/reference/test/assertions/smart-assertions"},"Smart Assertions")),"\u2014 This is a unified syntax for asserting both ordinary values and ZIO effects using the ",(0,s.yg)("inlineCode",{parentName:"li"},"assertTrue")," macro.")))}u.isMDXComponent=!0}}]);