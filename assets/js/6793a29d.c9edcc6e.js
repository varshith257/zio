"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[69160],{15680:(e,n,a)=>{a.d(n,{xA:()=>y,yg:()=>g});var o=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,o)}return a}function t(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,o,r=function(e,n){if(null==e)return{};var a,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)a=i[o],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)a=i[o],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=o.createContext({}),c=function(e){var n=o.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):t(t({},n),e)),a},y=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,y=l(e,["components","mdxType","originalType","parentName"]),s=c(a),u=r,g=s["".concat(p,".").concat(u)]||s[u]||d[u]||i;return a?o.createElement(g,t(t({ref:n},y),{},{components:a})):o.createElement(g,t({ref:n},y))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,t=new Array(i);t[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:r,t[1]=l;for(var c=2;c<i;c++)t[c]=a[c];return o.createElement.apply(null,t)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},19791:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>t,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=a(58168),r=(a(96540),a(15680));const i={id:"automatic-layer-construction",title:"Automatic Layer Construction"},t=void 0,l={unversionedId:"reference/di/automatic-layer-construction",id:"reference/di/automatic-layer-construction",title:"Automatic Layer Construction",description:"ZIO also has an automatic layer construction facility, which takes care of building dependency graphs from the individual layers and building blocks. So instead of manually composing layers together to build the final layer, we can only provide individual layers to the ZIO application, and it will do the rest.",source:"@site/docs/reference/di/automatic-layer-construction.md",sourceDirName:"reference/di",slug:"/reference/di/automatic-layer-construction",permalink:"/reference/di/automatic-layer-construction",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/di/automatic-layer-construction.md",tags:[],version:"current",frontMatter:{id:"automatic-layer-construction",title:"Automatic Layer Construction"},sidebar:"reference-sidebar",previous:{title:"Manual Layer Construction",permalink:"/reference/di/manual-layer-construction"},next:{title:"Dependency Propagation",permalink:"/reference/di/dependency-propagation"}},p={},c=[{value:"Providing Individual Layers to a ZIO Application",id:"providing-individual-layers-to-a-zio-application",level:2},{value:"Automatically Assembling Layers",id:"automatically-assembling-layers",level:2},{value:"ZLayer Debugging",id:"zlayer-debugging",level:2}],y={toc:c},s="wrapper";function d(e){let{components:n,...a}=e;return(0,r.yg)(s,(0,o.A)({},y,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"ZIO also has an automatic layer construction facility, which takes care of building dependency graphs from the individual layers and building blocks. So instead of manually composing layers together to build the final layer, we can only provide individual layers to the ZIO application, and it will do the rest."),(0,r.yg)("p",null,"The automatic layer construction takes place at the ",(0,r.yg)("em",{parentName:"p"},"compile-time"),", so if there is a problem in providing a layer, we will receive an error or warning message. So it helps us to diagnose the problem. Additionally, it has a way to print the dependency graph using built-in debug layers."),(0,r.yg)("h2",{id:"providing-individual-layers-to-a-zio-application"},"Providing Individual Layers to a ZIO Application"),(0,r.yg)("p",null,"When we provide individual layers using ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO#provide"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO#provideCustom"),", or ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO#provideSome")," to a ZIO application, the compiler will create the dependency graph automatically from the provided layers:"),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"We have a ",(0,r.yg)("a",{parentName:"p",href:"/reference/di/dependency-propagation"},"separate section")," that describes different methods for providing layers to the ZIO application.")),(0,r.yg)("p",null,"Assume we have written the following services (",(0,r.yg)("inlineCode",{parentName:"p"},"Cake"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Chocolate"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Flour"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"Spoon"),"):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\ntrait Cake\n\nobject Cake {\n  val live: ZLayer[Chocolate & Flour, Nothing, Cake] =\n    for {\n      _ <- ZLayer.environment[Chocolate & Flour]\n      cake <- ZLayer.succeed(new Cake {})\n    } yield cake\n}\n\ntrait Spoon\n\nobject Spoon {\n  val live: ULayer[Spoon] =\n    ZLayer.succeed(new Spoon {})\n}\n\ntrait Chocolate\n\nobject Chocolate {\n  val live: ZLayer[Spoon, Nothing, Chocolate] =\n    ZLayer.service[Spoon].project(_ => new Chocolate {})\n}\n\ntrait Flour\n\nobject Flour {\n  val live: ZLayer[Spoon, Nothing, Flour] =\n    ZLayer.service[Spoon].project(_ => new Flour {})\n}\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Cake")," service has the following dependency graph:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"          Cake\n          /   \\\n   Chocolate   Flour\n       |         |\n     Spoon     Spoon\n")),(0,r.yg)("p",null,"Now we can write an application that uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"Cake")," service as below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nimport java.io.IOException\n\nval myApp: ZIO[Cake, IOException, Unit] = for {\n  cake <- ZIO.service[Cake]\n  _    <- Console.printLine(s"Yay! I baked a cake with flour and chocolate: $cake")\n} yield ()\n')),(0,r.yg)("p",null,"The type of ",(0,r.yg)("inlineCode",{parentName:"p"},"myApp")," indicates we should provide ",(0,r.yg)("inlineCode",{parentName:"p"},"Cake")," to this ZIO application to run it. Let's give it that and see what happens:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"object MainApp extends ZIOAppDefault {\n  def run =\n    myApp.provide(Cake.live)\n}\n\n// error:\n// \n// \u2500\u2500\u2500\u2500 ZLAYER ERROR \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// \n//  Please provide layers for the following 2 types:\n// \n//    Required by Cake.live\n//    1. Chocolate\n//    2. Flour\n//    \n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,r.yg)("p",null,"Here are the errors that will be printed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"\u2500\u2500\u2500\u2500 ZLAYER ERROR \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n Please provide layers for the following 2 types:\n\n   Required by Cake.live\n   1. Chocolate\n   2. Flour\n   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,r.yg)("p",null,"It says that we missed providing ",(0,r.yg)("inlineCode",{parentName:"p"},"Chocolate")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Flour")," layers. Now let's add these two missing layers:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run =\n    myApp.provide(\n      Cake.live,\n      Chocolate.live,\n      Flour.live\n    )\n}\n\n// error:\n// \n// \u2500\u2500\u2500\u2500 ZLAYER ERROR \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// \n// Please provide a layer for the following type:\n// \n// Required by Flour.live\n// 1. Spoon\n// \n// Required by Chocolate.live\n// 1. Spoon\n// \n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,r.yg)("p",null,"Again, the compiler asks us to provide another dependency called ",(0,r.yg)("inlineCode",{parentName:"p"},"Spoon"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"\u2500\u2500\u2500\u2500 ZLAYER ERROR \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nPlease provide a layer for the following type:\n\nRequired by Flour.live\n1. Spoon\n\nRequired by Chocolate.live\n1. Spoon\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,r.yg)("p",null,"Finally, our application compiles without any errors:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run =\n    myApp.provide(\n      Cake.live,\n      Chocolate.live,\n      Flour.live,\n      Spoon.live  \n    )\n}\n")),(0,r.yg)("p",null,"Note that the order of dependencies doesn't matter. We can provide them in any order."),(0,r.yg)("p",null,"Now, let's compare the automatic layer construction with the manual one:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nobject MainApp extends ZIOAppDefault {\n\n  val layers: ULayer[Cake] =\n      (((Spoon.live >>> Chocolate.live) ++ (Spoon.live >>> Flour.live)) >>> Cake.live)\n\n  def run = myApp.provideLayer(layers)\n\n}\n")),(0,r.yg)("h2",{id:"automatically-assembling-layers"},"Automatically Assembling Layers"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"ZLayer.make","[R]")," \u2014 Using ",(0,r.yg)("inlineCode",{parentName:"li"},"ZLayer.make[R]"),", we can provide a type ",(0,r.yg)("inlineCode",{parentName:"li"},"R")," and then provide individual layers as arguments, it will automatically assemble these layers to create a layer of type ",(0,r.yg)("inlineCode",{parentName:"li"},"R"),".")),(0,r.yg)("p",null,"For example, we can create a ",(0,r.yg)("inlineCode",{parentName:"p"},"Cake")," layer as below:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval cakeLayer: ZLayer[Any, Nothing, Cake] =\n  ZLayer.make[Cake](\n    Cake.live,\n    Chocolate.live,\n    Flour.live,\n    Spoon.live\n  )\n")),(0,r.yg)("p",null,"We can also create a layer for intersections of services:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval chocolateAndFlourLayer: ZLayer[Any, Nothing, Chocolate & Flour] =\n  ZLayer.make[Chocolate & Flour](\n    Chocolate.live,\n    Flour.live,\n    Spoon.live\n  )\n")),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"ZLayer.makeSome","[R0, R]")," \u2014 Automatically constructs a layer for the provided type ",(0,r.yg)("inlineCode",{parentName:"li"},"R"),", leaving a remainder ",(0,r.yg)("inlineCode",{parentName:"li"},"R0"),":")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval cakeLayer: ZLayer[Spoon, Nothing, Cake] =\n  ZLayer.makeSome[Spoon, Cake](\n    Cake.live,\n    Chocolate.live,\n    Flour.live\n  )\n")),(0,r.yg)("h2",{id:"zlayer-debugging"},"ZLayer Debugging"),(0,r.yg)("p",null,"To debug ZLayer construction, we have two built-in layers, i.e., ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Debug.tree")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Debug.mermaid"),"."),(0,r.yg)("p",null,"Let's include the ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Debug.tree")," layer into the layer construction:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run =\n    myApp.provide(\n      Cake.live,\n      Chocolate.live,\n      Flour.live,\n      Spoon.live,\n      ZLayer.Debug.tree\n    )\n}\n")),(0,r.yg)("p",null,"The following debug messages will be generated by the compiler:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"[info]   ZLayer Wiring Graph\n[info]\n[info] \u25c9 Cake.live\n[info] \u251c\u2500\u25d1 Chocolate.live\n[info] \u2502 \u2570\u2500\u25d1 Spoon.live\n[info] \u2570\u2500\u25d1 Flour.live\n[info]   \u2570\u2500\u25d1 Spoon.live\n[info] \n")),(0,r.yg)("p",null,"If we use the ",(0,r.yg)("inlineCode",{parentName:"p"},"ZLayer.Debug.mermaid")," layer, it will generate the following debug messages:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"[info]   ZLayer Wiring Graph  \n[info] \n[info] \u25c9 Cake.live\n[info] \u251c\u2500\u25d1 Chocolate.live\n[info] \u2502 \u2570\u2500\u25d1 Spoon.live\n[info] \u2570\u2500\u25d1 Flour.live\n[info]   \u2570\u2500\u25d1 Spoon.live\n[info] \n[info] Mermaid Live Editor Link\n[info] https://mermaid-js.github.io/mermaid-live-editor/edit/#eyJjb2RlIjoiZ3JhcGhcbiAgICBDb25zb2xlLmxpdmVcbiAgICBDYWtlLmxpdmUgLS0+IENob2NvbGF0ZS5saXZlXG4gICAgQ2FrZS5saXZlIC0tPiBGbG91ci5saXZlXG4gICAgRmxvdXIubGl2ZSAtLT4gU3Bvb24ubGl2ZVxuICAgIFNwb29uLmxpdmVcbiAgICBDaG9jb2xhdGUubGl2ZSAtLT4gU3Bvb24ubGl2ZVxuICAgICIsIm1lcm1haWQiOiAie1xuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiXG59IiwgInVwZGF0ZUVkaXRvciI6IHRydWUsICJhdXRvU3luYyI6IHRydWUsICJ1cGRhdGVEaWFncmFtIjogdHJ1ZX0=\n")))}d.isMDXComponent=!0}}]);