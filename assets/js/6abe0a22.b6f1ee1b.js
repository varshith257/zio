"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[97022],{15680:(e,r,t)=>{t.d(r,{xA:()=>l,yg:()=>f});var n=t(96540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||s;return t?n.createElement(f,i(i({ref:r},l),{},{components:t})):n.createElement(f,i({ref:r},l))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=d;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var p=2;p<s;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},14247:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var n=t(58168),o=(t(96540),t(15680));const s={id:"interactive-processes",title:"Interactive Processes"},i=void 0,a={unversionedId:"zio-process/interactive-processes",id:"zio-process/interactive-processes",title:"Interactive Processes",description:"Sometimes you want to interact with a process in a back-and-forth manner by sending requests to the process and receiving responses back. For example, interacting with a repl-like process like node -i, python -i, etc. or an ssh server.",source:"@site/docs/zio-process/interactive-processes.md",sourceDirName:"zio-process",slug:"/zio-process/interactive-processes",permalink:"/zio-process/interactive-processes",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-process/interactive-processes.md",tags:[],version:"current",frontMatter:{id:"interactive-processes",title:"Interactive Processes"},sidebar:"ecosystem-sidebar",previous:{title:"Piping",permalink:"/zio-process/piping"},next:{title:"Other",permalink:"/zio-process/other"}},c={},p=[],l={toc:p},u="wrapper";function m(e){let{components:r,...t}=e;return(0,o.yg)(u,(0,n.A)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Sometimes you want to interact with a process in a back-and-forth manner by sending requests to the process and receiving responses back. For example, interacting with a repl-like process like ",(0,o.yg)("inlineCode",{parentName:"p"},"node -i"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"python -i"),", etc. or an ssh server."),(0,o.yg)("p",null,"Here is an example of communicating with an interactive NodeJS shell:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'for {\n  commandQueue <- Queue.unbounded[Chunk[Byte]]\n  process      <- Command("node", "-i").stdin(ProcessInput.fromQueue(commandQueue)).run\n  sep          <- System.lineSeparator\n  fiber        <- process.stdout.linesStream.foreach { line =>\n                    ZIO.debug(s"Response from REPL: $line")\n                  }.fork\n  _            <- commandQueue.offer(Chunk.fromArray(s"1+1${sep}".getBytes(StandardCharsets.UTF_8)))\n  _            <- commandQueue.offer(Chunk.fromArray(s"2**8${sep}".getBytes(StandardCharsets.UTF_8)))\n  _            <- commandQueue.offer(Chunk.fromArray(s"process.exit(0)${sep}".getBytes(StandardCharsets.UTF_8)))  \n  _            <- fiber.join  \n} yield ()\n')),(0,o.yg)("p",null,"You would probably want to create a helper for the repeated code, but this just a minimal example to help get you started."))}m.isMDXComponent=!0}}]);