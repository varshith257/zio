"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2468],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,g=c["".concat(l,".").concat(u)]||c[u]||d[u]||o;return n?r.createElement(g,i(i({ref:t},m),{},{components:n})):r.createElement(g,i({ref:t},m))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},67060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(58168),a=(n(96540),n(15680));const o={id:"streaming",title:"Streaming Examples",sidebar_label:"Streaming"},i=void 0,s={unversionedId:"zio-http/examples/streaming",id:"zio-http/examples/streaming",title:"Streaming Examples",description:"Streaming Request",source:"@site/docs/zio-http/examples/streaming.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/streaming",permalink:"/zio-http/examples/streaming",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/streaming.md",tags:[],version:"current",frontMatter:{id:"streaming",title:"Streaming Examples",sidebar_label:"Streaming"},sidebar:"ecosystem-sidebar",previous:{title:"WebSocket Server & Client",permalink:"/zio-http/examples/websocket"},next:{title:"Endpoint",permalink:"/zio-http/examples/endpoint"}},l={},p=[{value:"Streaming Request",id:"streaming-request",level:2},{value:"Streaming Response",id:"streaming-response",level:2},{value:"Streaming File",id:"streaming-file",level:2}],m={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"streaming-request"},"Streaming Request"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/RequestStreaming.scala"',title:'"zio-http-example/src/main/scala/example/RequestStreaming.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject RequestStreaming extends ZIOAppDefault {\n\n  // Create HTTP route which echos back the request body\n  val app = Routes(Method.POST / "echo" -> handler { (req: Request) =>\n    // Returns a stream of bytes from the request\n    // The stream supports back-pressure\n    val stream = req.body.asStream\n\n    // Creating HttpData from the stream\n    // This works for file of any size\n    val data = Body.fromStreamChunked(stream)\n\n    Response(body = data)\n  })\n\n  // Run it like any simple app\n  val run: UIO[ExitCode] =\n    Server.serve(app).provide(Server.default).exitCode\n}\n')),(0,a.yg)("h2",{id:"streaming-response"},"Streaming Response"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/StreamingResponse.scala"',title:'"zio-http-example/src/main/scala/example/StreamingResponse.scala"'},'package example\n\nimport zio.{http, _}\n\nimport zio.stream.ZStream\n\nimport zio.http._\n\n/**\n * Example to encode content using a ZStream\n */\nobject StreamingResponse extends ZIOAppDefault {\n  // Starting the server (for more advanced startup configuration checkout `HelloWorldAdvanced`)\n  def run = Server.serve(routes).provide(Server.default)\n\n  // Create a message as a Chunk[Byte]\n  def message = Chunk.fromArray("Hello world !\\r\\n".getBytes(Charsets.Http))\n\n  def routes: Routes[Any, Response] = Routes(\n    // Simple (non-stream) based route\n    Method.GET / "health" -> handler(Response.ok),\n\n    // ZStream powered response\n    Method.GET / "stream" ->\n      handler(\n        http.Response(\n          status = Status.Ok,\n          body = Body.fromStream(ZStream.fromChunk(message), message.length.toLong), // Encoding content using a ZStream\n        ),\n      ),\n  )\n}\n')),(0,a.yg)("h2",{id:"streaming-file"},"Streaming File"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/FileStreaming.scala"',title:'"zio-http-example/src/main/scala/example/FileStreaming.scala"'},'package example\n\nimport java.io.File\nimport java.nio.file.Paths\n\nimport zio._\n\nimport zio.stream.ZStream\n\nimport zio.http._\n\nobject FileStreaming extends ZIOAppDefault {\n\n  // Create HTTP route\n  val app = Routes(\n    Method.GET / "health" -> Handler.ok,\n\n    // Read the file as ZStream\n    // Uses the blocking version of ZStream.fromFile\n    Method.GET / "blocking" -> Handler.fromStreamChunked(ZStream.fromPath(Paths.get("README.md"))),\n\n    // Uses netty\'s capability to write file content to the Channel\n    // Content-type response headers are automatically identified and added\n    // Adds content-length header and does not use Chunked transfer encoding\n    Method.GET / "video" -> Handler.fromFile(new File("src/main/resources/TestVideoFile.mp4")),\n    Method.GET / "text"  -> Handler.fromFile(new File("src/main/resources/TestFile.txt")),\n  ).sandbox\n\n  // Run it like any simple app\n  val run =\n    Server.serve(app).provide(Server.default)\n}\n')))}d.isMDXComponent=!0}}]);