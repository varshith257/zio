"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[90372],{15680:(e,r,n)=>{n.d(r,{xA:()=>s,yg:()=>f});var t=n(96540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=t.createContext({}),c=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(p.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||l;return n?t.createElement(f,i(i({ref:r},s),{},{components:n})):t.createElement(f,i({ref:r},s))}));function f(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var p in r)hasOwnProperty.call(r,p)&&(o[p]=r[p]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},57263:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var t=n(58168),a=(n(96540),n(15680));const l={id:"parallel-operators",title:"Parallel Operators"},i=void 0,o={unversionedId:"reference/stream/zsink/parallel-operators",id:"reference/stream/zsink/parallel-operators",title:"Parallel Operators",description:"Parallel Zipping",source:"@site/docs/reference/stream/zsink/concurrency-and-parallelism.md",sourceDirName:"reference/stream/zsink",slug:"/reference/stream/zsink/parallel-operators",permalink:"/reference/stream/zsink/parallel-operators",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zsink/concurrency-and-parallelism.md",tags:[],version:"current",frontMatter:{id:"parallel-operators",title:"Parallel Operators"},sidebar:"reference-sidebar",previous:{title:"Sink Operations",permalink:"/reference/stream/zsink/operations"},next:{title:"Leftovers",permalink:"/reference/stream/zsink/leftovers"}},p={},c=[{value:"Parallel Zipping",id:"parallel-zipping",level:2},{value:"Racing",id:"racing",level:2}],s={toc:c},u="wrapper";function m(e){let{components:r,...n}=e;return(0,a.yg)(u,(0,t.A)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"parallel-zipping"},"Parallel Zipping"),(0,a.yg)("p",null,"Like ",(0,a.yg)("inlineCode",{parentName:"p"},"ZStream"),", two ",(0,a.yg)("inlineCode",{parentName:"p"},"ZSink")," can be zipped together. Both of them will be run in parallel, and their results will be combined in a tuple:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stream._\n\nval kafkaSink: ZSink[Any, Throwable, Record, Record, Unit] =\n  ZSink.foreach[Any, Throwable, Record](record => ZIO.attempt(???))\n\nval pulsarSink: ZSink[Any, Throwable, Record, Record, Unit] =\n  ZSink.foreach[Any, Throwable, Record](record => ZIO.attempt(???))\n\nval stream: ZSink[Any, Throwable, Record, Record, Unit] =\n  kafkaSink zipPar pulsarSink \n")),(0,a.yg)("h2",{id:"racing"},"Racing"),(0,a.yg)("p",null,"We are able to ",(0,a.yg)("inlineCode",{parentName:"p"},"race")," multiple sinks, they will run in parallel, and the one that wins will provide the result of our program:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"val stream: ZSink[Any, Throwable, Record, Record, Unit] =\n  kafkaSink race pulsarSink \n")),(0,a.yg)("p",null,"To determine which one succeeded, we should use the ",(0,a.yg)("inlineCode",{parentName:"p"},"ZSink#raceBoth")," combinator, it returns an ",(0,a.yg)("inlineCode",{parentName:"p"},"Either")," result."))}m.isMDXComponent=!0}}]);