"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[12727],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>h});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(58168),r=(n(96540),n(15680));const i={id:"authentication",title:"Authentication Example",sidebar_label:"Authentication"},o=void 0,s={unversionedId:"zio-http/examples/authentication",id:"zio-http/examples/authentication",title:"Authentication Example",description:"Authentication Server Example",source:"@site/docs/zio-http/examples/authentication.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/authentication",permalink:"/zio-http/examples/authentication",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/authentication.md",tags:[],version:"current",frontMatter:{id:"authentication",title:"Authentication Example",sidebar_label:"Authentication"},sidebar:"ecosystem-sidebar",previous:{title:"Middleware CORS Handling",permalink:"/zio-http/examples/middleware-cors-handling"},next:{title:"Graceful Shutdown",permalink:"/zio-http/examples/graceful-shutdown"}},l={},c=[{value:"Authentication Server Example",id:"authentication-server-example",level:2},{value:"Authentication Client Example",id:"authentication-client-example",level:2},{value:"Middleware Basic Authentication Example",id:"middleware-basic-authentication-example",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"authentication-server-example"},"Authentication Server Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/AuthenticationServer.scala"',title:'"zio-http-example/src/main/scala/example/AuthenticationServer.scala"'},'package example\n\nimport java.time.Clock\n\nimport scala.util.Try\n\nimport zio._\n\nimport zio.http._\n\nimport pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim}\n\n/**\n * This is an example to demonstrate bearer Authentication middleware. The\n * Server has 2 routes. The first one is for login, Upon a successful login, it\n * will return a jwt token for accessing protected routes. The second route is a\n * protected route that is accessible only if the request has a valid jwt token.\n * AuthenticationClient example can be used to makes requests to this server.\n */\nobject AuthenticationServer extends ZIOAppDefault {\n  implicit val clock: Clock = Clock.systemUTC\n\n  // Secret Authentication key\n  val SECRET_KEY = "secretKey"\n\n  def jwtEncode(username: String, key: String): String =\n    Jwt.encode(JwtClaim(subject = Some(username)).issuedNow.expiresIn(300), key, JwtAlgorithm.HS512)\n\n  def jwtDecode(token: String, key: String): Try[JwtClaim] =\n    Jwt.decode(token, key, Seq(JwtAlgorithm.HS512))\n\n  val bearerAuthWithContext: HandlerAspect[Any, String] =\n    HandlerAspect.interceptIncomingHandler(Handler.fromFunctionZIO[Request] { request =>\n      request.header(Header.Authorization) match {\n        case Some(Header.Authorization.Bearer(token)) =>\n          ZIO\n            .fromTry(jwtDecode(token.value.asString, SECRET_KEY))\n            .orElseFail(Response.badRequest("Invalid or expired token!"))\n            .flatMap(claim => ZIO.fromOption(claim.subject).orElseFail(Response.badRequest("Missing subject claim!")))\n            .map(u => (request, u))\n\n        case _ => ZIO.fail(Response.unauthorized.addHeaders(Headers(Header.WWWAuthenticate.Bearer(realm = "Access"))))\n      }\n    })\n\n  def routes: Routes[Any, Response] =\n    Routes(\n      // A route that is accessible only via a jwt token\n      Method.GET / "profile" / "me" -> handler { (_: Request) =>\n        ZIO.serviceWith[String](name => Response.text(s"Welcome $name!"))\n      } @@ bearerAuthWithContext,\n\n      // A login route that is successful only if the password is the reverse of the username\n      Method.GET / "login" ->\n        handler { (request: Request) =>\n          val form = request.body.asMultipartForm.orElseFail(Response.badRequest)\n          for {\n            username <- form\n              .map(_.get("username"))\n              .flatMap(ff => ZIO.fromOption(ff).orElseFail(Response.badRequest("Missing username field!")))\n              .flatMap(ff => ZIO.fromOption(ff.stringValue).orElseFail(Response.badRequest("Missing username value!")))\n            password <- form\n              .map(_.get("password"))\n              .flatMap(ff => ZIO.fromOption(ff).orElseFail(Response.badRequest("Missing password field!")))\n              .flatMap(ff => ZIO.fromOption(ff.stringValue).orElseFail(Response.badRequest("Missing password value!")))\n          } yield\n            if (password.reverse.hashCode == username.hashCode)\n              Response.text(jwtEncode(username, SECRET_KEY))\n            else\n              Response.unauthorized("Invalid username or password.")\n        },\n    ) @@ Middleware.debug\n\n  override val run = Server.serve(routes).provide(Server.default)\n}\n')),(0,r.yg)("h2",{id:"authentication-client-example"},"Authentication Client Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/AuthenticationClient.scala"',title:'"zio-http-example/src/main/scala/example/AuthenticationClient.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject AuthenticationClient extends ZIOAppDefault {\n\n  /**\n   * This example is trying to access a protected route in AuthenticationServer\n   * by first making a login request to obtain a jwt token and use it to access\n   * a protected route. Run AuthenticationServer before running this example.\n   */\n  val url = "http://localhost:8080"\n\n  val loginUrl = URL.decode(s"${url}/login").toOption.get\n  val greetUrl = URL.decode(s"${url}/profile/me").toOption.get\n\n  val program = for {\n    client   <- ZIO.service[Client]\n    // Making a login request to obtain the jwt token. In this example the password should be the reverse string of username.\n    token    <- client\n      .batched(\n        Request\n          .get(loginUrl)\n          .withBody(\n            Body.fromMultipartForm(\n              Form(\n                FormField.simpleField("username", "John"),\n                FormField.simpleField("password", "nhoJ"),\n              ),\n              Boundary("boundary123"),\n            ),\n          ),\n      )\n      .flatMap(_.body.asString)\n    // Once the jwt token is procured, adding it as a Bearer token in Authorization header while accessing a protected route.\n    response <- client.batched(Request.get(greetUrl).addHeader(Header.Authorization.Bearer(token)))\n    body     <- response.body.asString\n    _        <- Console.printLine(body)\n  } yield ()\n\n  override val run = program.provide(Client.default)\n\n}\n')),(0,r.yg)("h2",{id:"middleware-basic-authentication-example"},"Middleware Basic Authentication Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/BasicAuth.scala"',title:'"zio-http-example/src/main/scala/example/BasicAuth.scala"'},'package example\n\nimport zio._\n\nimport zio.http.Middleware.basicAuth\nimport zio.http._\nimport zio.http.codec.PathCodec.string\n\nobject BasicAuth extends ZIOAppDefault {\n\n  // Http app that requires basic auth\n  val user: Routes[Any, Response] = Routes(\n    Method.GET / "user" / string("name") / "greet" ->\n      handler { (name: String, _: Request) =>\n        Response.text(s"Welcome to the ZIO party! ${name}")\n      },\n  )\n\n  // Add basic auth middleware\n  val routes: Routes[Any, Response] = user @@ basicAuth("admin", "admin")\n\n  val run = Server.serve(routes).provide(Server.default)\n}\n')))}d.isMDXComponent=!0}}]);