"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[24421],{15680:(e,r,a)=>{a.d(r,{xA:()=>p,yg:()=>u});var t=a(96540);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function i(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var y=t.createContext({}),m=function(e){var r=t.useContext(y),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},p=function(e){var r=m(e.components);return t.createElement(y.Provider,{value:r},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,y=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=m(a),f=n,u=s["".concat(y,".").concat(f)]||s[f]||c[f]||o;return a?t.createElement(u,l(l({ref:r},p),{},{components:a})):t.createElement(u,l({ref:r},p))}));function u(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=f;var i={};for(var y in r)hasOwnProperty.call(r,y)&&(i[y]=r[y]);i.originalType=e,i[s]="string"==typeof e?e:n,l[1]=i;for(var m=2;m<o;m++)l[m]=a[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}f.displayName="MDXCreateElement"},23664:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>y,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var t=a(58168),n=(a(96540),a(15680));const o={id:"tarray",title:"TArray"},l=void 0,i={unversionedId:"reference/stm/tarray",id:"version-1.0.18/reference/stm/tarray",title:"TArray",description:"TArray is an array of mutable references that can participate in transactions in STM.",source:"@site/versioned_docs/version-1.0.18/reference/stm/tarray.md",sourceDirName:"reference/stm",slug:"/reference/stm/tarray",permalink:"/1.0.18/reference/stm/tarray",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/stm/tarray.md",tags:[],version:"1.0.18",frontMatter:{id:"tarray",title:"TArray"}},y={},m=[{value:"Create a TArray",id:"create-a-tarray",level:2},{value:"Retrieve the value from a TArray",id:"retrieve-the-value-from-a-tarray",level:2},{value:"Update the value of a TArray",id:"update-the-value-of-a-tarray",level:2},{value:"Transform elements of a TArray",id:"transform-elements-of-a-tarray",level:2},{value:"Perform side-effect for TArray elements",id:"perform-side-effect-for-tarray-elements",level:2}],p={toc:m},s="wrapper";function c(e){let{components:r,...a}=e;return(0,n.yg)(s,(0,t.A)({},p,a,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"TArray")," is an array of mutable references that can participate in transactions in STM."),(0,n.yg)("h2",{id:"create-a-tarray"},"Create a TArray"),(0,n.yg)("p",null,"Creating an empty ",(0,n.yg)("inlineCode",{parentName:"p"},"TArray"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval emptyTArray: STM[Nothing, TArray[Int]] = TArray.empty[Int]\n")),(0,n.yg)("p",null,"Or creating a ",(0,n.yg)("inlineCode",{parentName:"p"},"TArray")," with specified values:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval specifiedValuesTArray: STM[Nothing, TArray[Int]] = TArray.make(1, 2, 3)\n")),(0,n.yg)("p",null,"Alternatively, you can create a ",(0,n.yg)("inlineCode",{parentName:"p"},"TArray")," by providing a collection of values:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval iterableTArray: STM[Nothing, TArray[Int]] = TArray.fromIterable(List(1, 2, 3))\n")),(0,n.yg)("h2",{id:"retrieve-the-value-from-a-tarray"},"Retrieve the value from a TArray"),(0,n.yg)("p",null,"The n-th element of the array can be obtained as follows:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval tArrayGetElem: UIO[Int] = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  elem   <- tArray(2)\n} yield elem).commit\n")),(0,n.yg)("p",null,"Accessing the non-existing indexes aborts the transaction with ",(0,n.yg)("inlineCode",{parentName:"p"},"ArrayIndexOutOfBoundsException"),"."),(0,n.yg)("h2",{id:"update-the-value-of-a-tarray"},"Update the value of a TArray"),(0,n.yg)("p",null,"Updating the n-th element of an array can be done as follows:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval tArrayUpdateElem: UIO[TArray[Int]] = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  _      <- tArray.update(2, el => el + 10)\n} yield tArray).commit\n")),(0,n.yg)("p",null,"Updating the n-th element of an array can be done effectfully via ",(0,n.yg)("inlineCode",{parentName:"p"},"updateM"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval tArrayUpdateMElem: UIO[TArray[Int]] = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  _      <- tArray.updateM(2, el => STM.succeed(el + 10))\n} yield tArray).commit\n")),(0,n.yg)("p",null,"Updating the non-existing indexes aborts the transaction with ",(0,n.yg)("inlineCode",{parentName:"p"},"ArrayIndexOutOfBoundsException"),"."),(0,n.yg)("h2",{id:"transform-elements-of-a-tarray"},"Transform elements of a TArray"),(0,n.yg)("p",null,"The transform function ",(0,n.yg)("inlineCode",{parentName:"p"},"A => A")," allows computing a new value for every element in the array: "),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval transformTArray: UIO[TArray[Int]] = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  _      <- tArray.transform(a => a * a)\n} yield tArray).commit\n")),(0,n.yg)("p",null,"The elements can be mapped effectfully via ",(0,n.yg)("inlineCode",{parentName:"p"},"transformM"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval transformMTArray: UIO[TArray[Int]] = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  _      <- tArray.transformM(a => STM.succeed(a * a))\n} yield tArray).commit\n")),(0,n.yg)("p",null,"Folds the elements of a ",(0,n.yg)("inlineCode",{parentName:"p"},"TArray")," using the specified associative binary operator:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval foldTArray: UIO[Int] = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  sum    <- tArray.fold(0)(_ + _)\n} yield sum).commit\n")),(0,n.yg)("p",null,"The elements can be folded effectfully via ",(0,n.yg)("inlineCode",{parentName:"p"},"foldM"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval foldMTArray: UIO[Int] = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  sum    <- tArray.foldM(0)((acc, el) => STM.succeed(acc + el))\n} yield sum).commit\n")),(0,n.yg)("h2",{id:"perform-side-effect-for-tarray-elements"},"Perform side-effect for TArray elements"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"foreach")," is used for performing side-effect for each element in the array:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.stm._\n\nval foreachTArray = (for {\n  tArray <- TArray.make(1, 2, 3, 4)\n  _      <- tArray.foreach(a => STM.succeed(println(a)))\n} yield tArray).commit\n")))}c.isMDXComponent=!0}}]);