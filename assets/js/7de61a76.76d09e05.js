"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[19390],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>y});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,y=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return r?t.createElement(y,i(i({ref:n},p),{},{components:r})):t.createElement(y,i({ref:n},p))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},10054:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=r(58168),o=(r(96540),r(15680));const a={id:"performance",title:"Performance"},i=void 0,s={unversionedId:"zio-json/performance",id:"zio-json/performance",title:"Performance",description:'The following benchmarks are freely available to run on your hardware with sbt "zioJsonJVM/jmh:run -prof gc" and can be extended to include more niche libraries. We only compare zio-json against Circe and Play as they are the incumbent solutions used by most of the Scala ecosystem.',source:"@site/docs/zio-json/performance.md",sourceDirName:"zio-json",slug:"/zio-json/performance",permalink:"/zio-json/performance",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-json/performance.md",tags:[],version:"current",frontMatter:{id:"performance",title:"Performance"},sidebar:"ecosystem-sidebar",previous:{title:"Manual Instances",permalink:"/zio-json/manual-instances"},next:{title:"Security",permalink:"/zio-json/security"}},c={},l=[{value:"Even More Performance",id:"even-more-performance",level:2}],p={toc:l},m="wrapper";function u(e){let{components:n,...r}=e;return(0,o.yg)(m,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"The following benchmarks are freely available to run on your hardware with ",(0,o.yg)("inlineCode",{parentName:"p"},'sbt "zioJsonJVM/jmh:run -prof gc"')," and can be extended to include more niche libraries. We only compare ",(0,o.yg)("inlineCode",{parentName:"p"},"zio-json")," against Circe and Play as they are the incumbent solutions used by most of the Scala ecosystem."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"zio-json"),", when used in legacy mode (i.e. using a ",(0,o.yg)("inlineCode",{parentName:"p"},"StringReader"),"), is typically x2 faster than Circe and x5 faster than Play. When used with Loom, ",(0,o.yg)("inlineCode",{parentName:"p"},"zio-json")," has finished its work before the others even begin. The following benchmarks are therefore only for legacy mode comparisons."),(0,o.yg)("p",null,"There are two main factors to consider when comparing the performance of JSON libraries: memory usage and operations per second. We perform measurements in one thread at a time but in a real server situation, there are multiple threads each consuming resources."),(0,o.yg)("p",null,"Here are JMH benchmarks (higher ",(0,o.yg)("inlineCode",{parentName:"p"},"ops/sec")," is better, lower ",(0,o.yg)("inlineCode",{parentName:"p"},"MB/sec")," is better) on a standard Google Maps API performance-testing dataset (stressing array and number parsing). Note that a better metric for memory usage might be ",(0,o.yg)("inlineCode",{parentName:"p"},"MB")," per decode or encode, since it can be misleading to have the same ",(0,o.yg)("inlineCode",{parentName:"p"},"MB/sec")," but be processing more JSON: the library that consumes the least amount of memory is likely to have highest throughput."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec      MB/sec\nzio    15761 \xb1 283   1633 \xb1 29     | 14289 \xb1  84  2214 \xb1 12\ncirce   8832 \xb1 269   1816 \xb1 55     | 11980 \xb1 142  2030 \xb1 24\nplay    5756 \xb1  47   2260 \xb1 19     |  6669 \xb1 160  2677 \xb1 64\n")),(0,o.yg)("p",null,"on a standard Twitter API performance-testing dataset (stressing nested case classes with lots of fields)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec      MB/sec\nzio    16989 \xb1 113    827 \xb1  6     | 23085 \xb1 641  1791 \xb1 50\ncirce  16010 \xb1  72   1349 \xb1  6     | 15664 \xb1 209  1627 \xb1 22\nplay    5256 \xb1 165   1231 \xb1 39     | 15580 \xb1 314  2260 \xb1 45\n")),(0,o.yg)("p",null,"on a standard GeoJSON performance-testing dataset (stressing nested sealed traits that use a discriminator)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec       MB/sec\nzio    17104 \xb1 155   2768 \xb1 25     | 5372 \xb1 26      817 \xb1  4\ncirce   8388 \xb1 118   2879 \xb1 41     | 4762 \xb1 47      592 \xb1  6\nplay     704 \xb1   9   3946 \xb1 55     | 2587 \xb1 24     1091 \xb1 10\n")),(0,o.yg)("p",null,"and on a standard synthetic performance-testing dataset (stressing nested recursive types)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"       Decoding                    | Encoding\n       ops/sec       MB/sec        | ops/sec       MB/sec\nzio    59099 \xb1 1307  2108 \xb1 46     | 32048 \xb1  240  2573 \xb1 19\ncirce  19609 \xb1  370  2873 \xb1 53     | 13830 \xb1  109  1730 \xb1 14\nplay    9001 \xb1  182  3348 \xb1 67     | 14529 \xb1  200  3533 \xb1 48\n")),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"zio-json")," easily wins every benchmark except ops/sec for the Twitter test data where Circe matches ops/sec but loses heavily on memory usage. Play loses on every benchmark."),(0,o.yg)("h2",{id:"even-more-performance"},"Even More Performance"),(0,o.yg)("p",null,"If ",(0,o.yg)("inlineCode",{parentName:"p"},"zio-json")," isn't fast enough for you, then try out ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/plokhotnyuk/jsoniter-scala"},"jsoniter-scala"),"; whereas ",(0,o.yg)("inlineCode",{parentName:"p"},"zio-json")," is fully integrated into ZIO, including streams and pipeline support, jsoniter is library agnostic."),(0,o.yg)("p",null,"JSON is an inefficient transport format and everybody would benefit from a port of this library to msgpack or protobuf. For legacy services, a port supporting XML is also be possible."))}u.isMDXComponent=!0}}]);