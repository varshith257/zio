"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[59027],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>v});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(r),u=a,v=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return r?n.createElement(v,i(i({ref:t},c),{},{components:r})):n.createElement(v,i({ref:t},c))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},17665:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=r(58168),a=(r(96540),r(15680));const l={id:"https-client-server",title:"HTTPS Client and Server Example",sidebar_label:"Https Client and Server"},i=void 0,o={unversionedId:"zio-http/examples/https-client-server",id:"zio-http/examples/https-client-server",title:"HTTPS Client and Server Example",description:"Client Example",source:"@site/docs/zio-http/examples/https-client-server.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/https-client-server",permalink:"/zio-http/examples/https-client-server",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/https-client-server.md",tags:[],version:"current",frontMatter:{id:"https-client-server",title:"HTTPS Client and Server Example",sidebar_label:"Https Client and Server"},sidebar:"ecosystem-sidebar",previous:{title:"HTTP Client-Server",permalink:"/zio-http/examples/http-client-server"},next:{title:"Serving Static Files",permalink:"/zio-http/examples/serving-static-files"}},s={},p=[{value:"Client Example",id:"client-example",level:2},{value:"Server Example",id:"server-example",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.yg)(m,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"client-example"},"Client Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HttpsClient.scala"',title:'"zio-http-example/src/main/scala/example/HttpsClient.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.client.NettyClientDriver\n\nobject HttpsClient extends ZIOAppDefault {\n  val url     = URL.decode("https://jsonplaceholder.typicode.com/todos/1").toOption.get\n  val headers = Headers(Header.Host("jsonplaceholder.typicode.com"))\n\n  val sslConfig = ClientSSLConfig.FromTrustStoreResource(\n    trustStorePath = "truststore.jks",\n    trustStorePassword = "changeit",\n  )\n\n  val clientConfig = ZClient.Config.default.ssl(sslConfig)\n\n  val program = for {\n    data <- ZClient.batched(Request.get(url).addHeaders(headers))\n    _    <- Console.printLine(data)\n  } yield ()\n\n  val run =\n    program.provide(\n      ZLayer.succeed(clientConfig),\n      Client.customized,\n      NettyClientDriver.live,\n      DnsResolver.default,\n      ZLayer.succeed(NettyConfig.default),\n    )\n\n}\n')),(0,a.yg)("h2",{id:"server-example"},"Server Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HttpsHelloWorld.scala"',title:'"zio-http-example/src/main/scala/example/HttpsHelloWorld.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject HttpsHelloWorld extends ZIOAppDefault {\n  // Create HTTP route\n  val routes: Routes[Any, Response] = Routes(\n    Method.GET / "text" -> handler(Response.text("Hello World!")),\n    Method.GET / "json" -> handler(Response.json("""{"greetings": "Hello World!"}""")),\n  )\n\n  /**\n   * In this example, a private key and certificate are loaded from resources.\n   * For testing this example with curl, make sure the private key "server.key",\n   * and the certificate "server.crt" are inside the resources directory, which\n   * is by default "src/main/resources".\n   *\n   * You can use the following command to create a self-signed TLS certificate.\n   * This command will create two files: "server.key" and "server.crt".\n   *\n   * openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes \\ -keyout\n   * server.key -out server.crt \\ -subj "/CN=example.com/OU=?/O=?/L=?/ST=?/C=??"\n   * \\ -addext "subjectAltName=DNS:example.com,DNS:www.example.com,IP:10.0.0.1"\n   *\n   * Alternatively you can create the keystore and certificate using the\n   * following link\n   * https://medium.com/@maanadev/netty-with-https-tls-9bf699e07f01\n   */\n\n  val sslConfig = SSLConfig.fromResource(\n    behaviour = SSLConfig.HttpBehaviour.Accept,\n    certPath = "server.crt",\n    keyPath = "server.key",\n  )\n\n  private val config = Server.Config.default\n    .port(8090)\n    .ssl(sslConfig)\n\n  private val configLayer = ZLayer.succeed(config)\n\n  override val run =\n    Server.serve(routes).provide(configLayer, Server.live)\n\n}\n')))}d.isMDXComponent=!0}}]);