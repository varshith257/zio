"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[29035],{15680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>y});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var g=t.createContext({}),s=function(e){var n=t.useContext(g),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,l=e.originalType,g=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=s(r),u=o,y=p["".concat(g,".").concat(u)]||p[u]||m[u]||l;return r?t.createElement(y,i(i({ref:n},c),{},{components:r})):t.createElement(y,i({ref:n},c))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=u;var a={};for(var g in n)hasOwnProperty.call(n,g)&&(a[g]=n[g]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},72978:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var t=r(58168),o=(r(96540),r(15680));const l={id:"metrics",title:"Log Metrics"},i=void 0,a={unversionedId:"zio-logging/metrics",id:"zio-logging/metrics",title:"Log Metrics",description:"Log metrics collecting metrics related to ZIO logging (all ZIO.log* functions).",source:"@site/docs/zio-logging/metrics.md",sourceDirName:"zio-logging",slug:"/zio-logging/metrics",permalink:"/zio-logging/metrics",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/metrics.md",tags:[],version:"current",frontMatter:{id:"metrics",title:"Log Metrics"},sidebar:"ecosystem-sidebar",previous:{title:"SLF4J v1 bridge",permalink:"/zio-logging/slf4j1-bridge"},next:{title:"Testing",permalink:"/zio-logging/testing"}},g={},s=[{value:"Examples",id:"examples",level:2},{value:"Console logger with metrics",id:"console-logger-with-metrics",level:3}],c={toc:s},p="wrapper";function m(e){let{components:n,...r}=e;return(0,o.yg)(p,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Log metrics collecting metrics related to ZIO logging (all ",(0,o.yg)("inlineCode",{parentName:"p"},"ZIO.log*")," functions).\nAs ZIO core supporting multiple loggers, this logging metrics collector is implemented as specific ",(0,o.yg)("inlineCode",{parentName:"p"},"ZLogger"),"\nwhich is responsible just for collecting metrics of all logs - ",(0,o.yg)("inlineCode",{parentName:"p"},"ZIO.log*")," functions."),(0,o.yg)("p",null,"The Metrics layer"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"val layer = zio.logging.logMetrics\n")),(0,o.yg)("p",null,"will add a default metric named ",(0,o.yg)("inlineCode",{parentName:"p"},"zio_log_total")," with the label ",(0,o.yg)("inlineCode",{parentName:"p"},"level")," which will be\nincremented for each log message with the value of ",(0,o.yg)("inlineCode",{parentName:"p"},"level")," being the corresponding log level label in lower case."),(0,o.yg)("p",null,"Metrics:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.All")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"all")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.Fatal")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"fatal")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.Error")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"error")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.Warning")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"warn")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.Info")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"info")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.Debug")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"debug")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.Trace")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"trace")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"LogLevel.None")," -> ",(0,o.yg)("inlineCode",{parentName:"li"},"off"))),(0,o.yg)("p",null,"Custom names for the metric and label can be set via:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'val layer = zio.logging.logMetricsWith("log_counter", "log_level")\n')),(0,o.yg)("h2",{id:"examples"},"Examples"),(0,o.yg)("p",null,"You can find the source\ncode ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-logging/tree/master/examples"},"here")),(0,o.yg)("h3",{id:"console-logger-with-metrics"},"Console logger with metrics"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'package zio.logging.example\n\nimport zio.logging.{ consoleLogger, logMetrics }\nimport zio.metrics.connectors.MetricsConfig\nimport zio.metrics.connectors.prometheus.{ PrometheusPublisher, prometheusLayer, publisherLayer }\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppArgs, ZIOAppDefault, ZLayer, _ }\n\nobject MetricsApp extends ZIOAppDefault {\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> (consoleLogger() ++ logMetrics)\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    (for {\n      _            <- ZIO.logInfo("Start")\n      _            <- ZIO.logWarning("Some warning")\n      _            <- ZIO.logError("Some error")\n      _            <- ZIO.logError("Another error")\n      _            <- ZIO.sleep(1.second)\n      metricValues <- ZIO.serviceWithZIO[PrometheusPublisher](_.get)\n      _            <- Console.printLine(metricValues)\n      _            <- ZIO.logInfo("Done")\n    } yield ExitCode.success)\n      .provideLayer((ZLayer.succeed(MetricsConfig(200.millis)) ++ publisherLayer) >+> prometheusLayer)\n\n}\n')),(0,o.yg)("p",null,"Expected Console Output:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'timestamp=2023-03-15T08:44:39.93193+01:00  level=INFO thread=zio-fiber-6 message="Start"\ntimestamp=2023-03-15T08:44:39.951764+01:00 level=WARN thread=zio-fiber-6 message="Some warning"\ntimestamp=2023-03-15T08:44:39.95388+01:00  level=ERROR thread=zio-fiber-6 message="Some error"\ntimestamp=2023-03-15T08:44:39.954738+01:00 level=ERROR thread=zio-fiber-6 message="Another error"\n# TYPE zio_log_total counter\n# HELP zio_log_total\nzio_log_total{level="error",} 2.0 1678866280778\n# TYPE zio_log_total counter\n# HELP zio_log_total\nzio_log_total{level="warn",} 1.0 1678866280778\n# TYPE zio_log_total counter\n# HELP zio_log_total\nzio_log_total{level="info",} 1.0 1678866280778\ntimestamp=2023-03-15T08:44:40.972877+01:00 level=INFO thread=zio-fiber-6 message="Done"\n')))}m.isMDXComponent=!0}}]);