"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[24467],{15680:(e,n,r)=>{r.d(n,{xA:()=>m,yg:()=>f});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(r),g=a,f=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return r?t.createElement(f,i(i({ref:n},m),{},{components:r})):t.createElement(f,i({ref:n},m))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},20769:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=r(58168),a=(r(96540),r(15680));const o={id:"consuming-streams",title:"Consuming Streams"},i=void 0,s={unversionedId:"reference/stream/zstream/consuming-streams",id:"reference/stream/zstream/consuming-streams",title:"Consuming Streams",description:"Using a Sink",source:"@site/docs/reference/stream/zstream/consuming-streams.md",sourceDirName:"reference/stream/zstream",slug:"/reference/stream/zstream/consuming-streams",permalink:"/reference/stream/zstream/consuming-streams",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/consuming-streams.md",tags:[],version:"current",frontMatter:{id:"consuming-streams",title:"Consuming Streams"},sidebar:"reference-sidebar",previous:{title:"Operations",permalink:"/reference/stream/zstream/operations"},next:{title:"Error Handling",permalink:"/reference/stream/zstream/error-handling"}},l={},c=[{value:"Using a Sink",id:"using-a-sink",level:3},{value:"Using fold",id:"using-fold",level:3},{value:"Using foreach",id:"using-foreach",level:3}],m={toc:c},u="wrapper";function p(e){let{components:n,...r}=e;return(0,a.yg)(u,(0,t.A)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.Console._\nimport zio.stream._\n\nval result: Task[Unit] = ZStream.fromIterable(0 to 100).foreach(printLine(_))\n")),(0,a.yg)("h3",{id:"using-a-sink"},"Using a Sink"),(0,a.yg)("p",null,"To consume a stream using ",(0,a.yg)("inlineCode",{parentName:"p"},"ZSink")," we can pass ",(0,a.yg)("inlineCode",{parentName:"p"},"ZSink")," to the ",(0,a.yg)("inlineCode",{parentName:"p"},"ZStream#run")," function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"val sum: UIO[Int] = ZStream(1,2,3).run(ZSink.sum)\n")),(0,a.yg)("h3",{id:"using-fold"},"Using fold"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"ZStream#fold")," method executes the fold operation over the stream of values and returns a ",(0,a.yg)("inlineCode",{parentName:"p"},"ZIO")," effect containing the result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"val s1: ZIO[Any, Nothing, Int] = ZStream(1, 2, 3, 4, 5).runFold(0)(_ + _)\nval s2: ZIO[Any, Nothing, Int] = ZStream.iterate(1)(_ + 1).runFoldWhile(0)(_ <= 5)(_ + _)\n")),(0,a.yg)("h3",{id:"using-foreach"},"Using foreach"),(0,a.yg)("p",null,"Using ",(0,a.yg)("inlineCode",{parentName:"p"},"ZStream#foreach")," is another way of consuming elements of a stream. It takes a callback of type ",(0,a.yg)("inlineCode",{parentName:"p"},"O => ZIO[R1, E1, Any]")," which passes each element of a stream to this callback:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"ZStream(1, 2, 3).foreach(printLine(_))\n")))}p.isMDXComponent=!0}}]);