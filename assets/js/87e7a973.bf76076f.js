"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[61808],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>f});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),g=o,f=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},94111:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(58168),o=(t(96540),t(15680));const i={id:"index",title:"Introduction to ZIO Direct Style",sidebar_label:"Introduction"},r=void 0,l={unversionedId:"zio-direct/index",id:"zio-direct/index",title:"Introduction to ZIO Direct Style",description:"ZIO Direct Style is a library that allows using directly-style i.e. imperative programming with ZIO effects which is based on the Monadless paradigm.",source:"@site/docs/zio-direct/index.md",sourceDirName:"zio-direct",slug:"/zio-direct/",permalink:"/zio-direct/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-direct/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Direct Style",sidebar_label:"Introduction"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO Deriving",permalink:"/zio-deriving/"},next:{title:"Supported Constructs",permalink:"/zio-direct/supported-constructs"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"IDE Support",id:"ide-support",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Branching and Looping Support",id:"branching-and-looping-support",level:2},{value:"Great for Refs and FiberRefs!",id:"great-for-refs-and-fiberrefs",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"ZIO Direct Style is a library that allows using directly-style i.e. imperative programming with ZIO effects which is based on the Monadless paradigm."),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,o.yg)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"}))," ",(0,o.yg)("img",{parentName:"p",src:"https://github.com/zio/zio-direct/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,o.yg)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-direct_3/"},(0,o.yg)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-direct_3.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,o.yg)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-direct_3/"},(0,o.yg)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-direct_3.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,o.yg)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-direct-docs_3"},(0,o.yg)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-direct-docs_3/javadoc.svg",alt:"javadoc"}))," ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-direct"},(0,o.yg)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-direct?style=social",alt:"ZIO Direct Style"}))),(0,o.yg)("h2",{id:"installation"},"Installation"),(0,o.yg)("p",null,"To use zio-direct, add the following to your ",(0,o.yg)("inlineCode",{parentName:"p"},"build.sbt")," file."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-direct" % "1.0.0-RC7"\n')),(0,o.yg)("p",null,"You can also use zio-direct with ZStream and ZPure by importing the following modules."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Currently this is only supported in Scala 3.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'// ZStream\nlibraryDependencies += "dev.zio" %% "zio-direct-streams" % "1.0.0-RC7"\n// ZPure\nlibraryDependencies += "dev.zio" %% "zio-direct-pure" % "1.0.0-RC7"\n')),(0,o.yg)("p",null,"See the ",(0,o.yg)("a",{parentName:"p",href:"other-supported-monads"},"Other Supported Monads")," section for more details."),(0,o.yg)("h2",{id:"ide-support"},"IDE Support"),(0,o.yg)("p",null,"The preferred IDE to use with ZIO-Direct is Visual Studio Code + Metals. This is because Metals correctly reads the returns from ",(0,o.yg)("inlineCode",{parentName:"p"},"defer")," calls directly from the Scala compiler which is not the case of IntelliJ. To remedy this issue, a Library Extension is provided for ZIO-Direct. See the ",(0,o.yg)("a",{parentName:"p",href:"intellij-support"},"IntelliJ Support")," section for more details."),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"Talk at Functional Scala 2022:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Video - ",(0,o.yg)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=DgqfLfzq5eo"},"https://www.youtube.com/watch?v=DgqfLfzq5eo")),(0,o.yg)("li",{parentName:"ul"},"Slides - ",(0,o.yg)("a",{parentName:"li",href:"https://www.slideshare.net/deusaquilus/ziodirect-functional-scala-2022"},"https://www.slideshare.net/deusaquilus/ziodirect-functional-scala-2022"))),(0,o.yg)("p",null,"ZIO-Direct allows direct style programming with ZIO. This library provides a ",(0,o.yg)("em",{parentName:"p"},"syntactic sugar")," that is more powerful than for-comprehensions as well as more natural to use. Simply add the ",(0,o.yg)("inlineCode",{parentName:"p"},".run")," suffix to any ZIO effect in order to retrieve its value."),(0,o.yg)("p",null,"ZIO-Direct works by using macros to rewrite sequential code into flatMap-chains based on the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/monadless/monadless"},"Monadless")," paradigm. The values resulting in ",(0,o.yg)("inlineCode",{parentName:"p"},".run")," calls from the ZIO effects are not actually awaited. Instead, they are rolled-up into a chain of flatMaps."),(0,o.yg)("p",null,"For example, in imperative programming operations typically are done in a simple set of steps."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"object FileOps:\n  def read(file: File): String\n  def write(file: File, content: String): Unit\n\nval textA = read(fileA)\nval textB = read(fileB)\nwrite(fileC, textA + textB)\n")),(0,o.yg)("p",null,"Using functional programming, the equivalent of this functionality is a set of nested flatMap-chains."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"object FileOps\n  def read(file: File): ZIO[Any, Throwable, String]\n  def write(file: File, content: String): ZIO[Any, Throwable, Unit]\n\nread(fileA).flatMap { textA =>\n  read(fileB).flatMap { textB =>\n    write(fileC, textA + textB)\n  }\n}\n")),(0,o.yg)("p",null,"In order to avoid this complexity scala provides a for-comprehension syntactic sugar."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"for {\n  textA <- read(fileA)\n  textB <- read(fileB)\n  _ <- write(fileC, textA + textB)\n} yield ()\n")),(0,o.yg)("p",null,"Unfortunately this syntactic sugar is limited in many cases, for example, inserting a conditional value inside is impossible."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'for {\n  textA <- read(fileA)\n  // Not a possible syntax\n  if (fileA.contains("some string")) {\n    textB <- read(fileB)\n    _ <- write(fileC, textA + textB)\n  }\n} yield ()\n')),(0,o.yg)("p",null,"ZIO-Direct offers an equivalent syntactic sugar that is more ergonomic and allows many constructs that for-comprehensions do not."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'defer {\n  val textA = read(fileA).run\n  if (fileA.contains("some string")) {\n    val textB = read(fileB).run\n    write(fileC, textA + textB).run\n  }\n}\n')),(0,o.yg)("h1",{id:"zio-tailored"},"ZIO-Tailored"),(0,o.yg)("p",null,"ZIO-Direct is specifically tailored to ZIO capabilities as it supports Environment and Error composition in ZIO effects similar to the for-comprehension."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"val out: ZIO[CustomerConfig & DistributorConfig, CustomerGetException | DistrubutorGetException, (Customer, Distributor)] =\n  defer {\n    // Get a customer-configuration object from the environment and extract its .url field\n    val custUrl: String = ZIO.service[CustomerConfig].run.url\n    // Get a distributor-configuration from the environment and extract its .url field\n    val distUrl: String = ZIO.service[DistributorConfig].run.url\n    (\n      // Use the two configurations to make an HTTP-call\n      parseCustomer(httpGetCustomer(custUrl).run),\n      parseDistrubutor(httpGetDistributor(distUrl).run)\n    )\n  }\n")),(0,o.yg)("h2",{id:"branching-and-looping-support"},"Branching and Looping Support"),(0,o.yg)("p",null,"Unlike the for-comprehension, ZIO-Direct supports branching and looping in the use of flatMaps composition.\nLet's have a look at a another non-trivial example."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"class Database:\n  def nextRow(): ZIO[Any, Throwable, Row]\n  def hasNextRow(): ZIO[Any, Throwable, Boolean]\n  def lockNextRow(): ZIO[Any, Throwable, Boolean]\nobject Database:\n  def open: ZIO[Any, Throwable, Database]\n\ndefer {\n  // Open a database connection\n  val db = Database.open().run\n  // See if there is is a next-row\n  while (db.hasNextRow().run) {\n    // try to lock, if aquired continue\n    if (db.lockNextRow().run)\n      val nextRow = db.nextRow().run\n      doSomethingWith(nextRow)\n    else\n      waitT()\n  }\n}\n")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"NOTE: The above database-api is imaginary.")),(0,o.yg)("p",null,"The above code needs to be translated into something like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"Database.open.flatMap { db =>\n  def whileFun(): ZIO[Any, Throwable, Unit] =\n    db.hasNextRow().flatMap { hasNextRow =>\n      if (hasNextRow)(\n        db.lockNextRow().flatMap { lockNextRow =>\n          if (!lockNextRow)\n            db.nextRow().map(nextRow => doSomethingWith(nextRow))\n          else\n            ZIO.succeed(waitT())\n        }\n      ).flatMap(_ => whileFun())\n      else\n        ZIO.unit\n    }\n  whileFun()\n}\n")),(0,o.yg)("p",null,"Note that normally this is the exact code that would have to be written to capture such functionality For-comprehensions do not provide a way to do looping and branching so in such cases\na combination of flatMaps and recursion is necessary to avoid calling effects unnecessarily."),(0,o.yg)("h2",{id:"great-for-refs-and-fiberrefs"},"Great for Refs and FiberRefs!"),(0,o.yg)("p",null,"ZIO-direct makes it much easier to use ZIO mutable Ref and FiberRef variables. Since retrieveing and updating Ref and FiberRef variables requries a flatMap/for-comprehension call, it is typically very difficult to use them with branching/looping constructs. ZIO-direct makes these cases much easier."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"class DatabaseApi {\n  val connRef = FiberRef.make[Option[Connection]](None)\n  def openConnection(): Connection = lowLevelDatabaseApi.openConnection()\n  def transaction(action: Action) =\n    defer {\n      val conn = connRef.get.run\n      if (conn == None) {\n        connRef.set(Some(openConnection())).run\n      }\n      val conn1 = connRef.get.run\n      conn.execute(action).run\n    }\n}\n")),(0,o.yg)("p",null,"Instead of having to write the following code:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"class DatabaseApi {\n  val connRef = FiberRef.make[Option[Connection]](None)\n  def openConnection(): Connection = lowLevelDatabaseApi.openConnection()\n  def transaction(action: Action) =\n    connRef.get.flatMap { conn =>\n      (if (conn == None) {\n        connRef.set(Some(openConnection()))\n      } else {\n        ZIO.unit\n      }).flatMap(_ => connRef.get.flatMap { conn1 =>\n        conn1.execute(action)\n      })\n    }\n\n  // Note that for-comprehensions do not help very much in this use-case\n  def transaction0(action: Action) =\n    for {\n      conn <- connRef.get\n      _ <- if (conn == None) {\n        connRef.set(Some(openConnection()))\n      } else {\n        ZIO.unit\n      }\n      conn1 <- connRef.get\n      _ <- conn1.execute(action)\n    }\n}\n")))}u.isMDXComponent=!0}}]);