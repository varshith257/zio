"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[32313],{15680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>d});var i=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=i.createContext({}),c=function(e){var t=i.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),u=n,d=m["".concat(o,".").concat(u)]||m[u]||f[u]||a;return r?i.createElement(d,s(s({ref:t},p),{},{components:r})):i.createElement(d,s({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:n,s[1]=l;for(var c=2;c<a;c++)s[c]=r[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9177:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=r(58168),n=(r(96540),r(15680));const a={id:"serving-static-files",title:"Serving Static Files Example",sidebar_label:"Serving Static Files"},s=void 0,l={unversionedId:"zio-http/examples/serving-static-files",id:"zio-http/examples/serving-static-files",title:"Serving Static Files Example",description:"Serving Static Files",source:"@site/docs/zio-http/examples/serving-static-files.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/serving-static-files",permalink:"/zio-http/examples/serving-static-files",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/serving-static-files.md",tags:[],version:"current",frontMatter:{id:"serving-static-files",title:"Serving Static Files Example",sidebar_label:"Serving Static Files"},sidebar:"ecosystem-sidebar",previous:{title:"Https Client and Server",permalink:"/zio-http/examples/https-client-server"},next:{title:"HTML Templating",permalink:"/zio-http/examples/html-templating"}},o={},c=[{value:"Serving Static Files",id:"serving-static-files",level:2},{value:"Serving Static Resource Files",id:"serving-static-resource-files",level:2}],p={toc:c},m="wrapper";function f(e){let{components:t,...r}=e;return(0,n.yg)(m,(0,i.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"serving-static-files"},"Serving Static Files"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/StaticFiles.scala"',title:'"zio-http-example/src/main/scala/example/StaticFiles.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject StaticFiles extends ZIOAppDefault {\n\n  /**\n   * Creates an HTTP app that only serves static files from resources via\n   * "/static". For paths other than the resources directory, see\n   * [[zio.http.Middleware.serveDirectory]].\n   */\n  val routes = Routes.empty @@ Middleware.serveResources(Path.empty / "static")\n\n  override def run = Server.serve(routes).provide(Server.default)\n}\n')),(0,n.yg)("h2",{id:"serving-static-resource-files"},"Serving Static Resource Files"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/StaticServer.scala"',title:'"zio-http-example/src/main/scala/example/StaticServer.scala"'},'package example\n\nimport zio.ZIOAppDefault\n\nimport zio.http._\nimport zio.http.codec.PathCodec.trailing\nimport zio.http.template._\n\nobject StaticServer extends ZIOAppDefault {\n\n  // A simple app to serve static resource files from a local directory.\n  val app = Routes(\n    Method.GET / "static" / trailing -> handler {\n      val extractPath    = Handler.param[(Path, Request)](_._1)\n      val extractRequest = Handler.param[(Path, Request)](_._2)\n\n      for {\n        path <- extractPath\n        file <- Handler.getResourceAsFile(path.encode)\n        http <-\n        // Rendering a custom UI to list all the files in the directory\n        extractRequest >>> (if (file.isDirectory) {\n                              // Accessing the files in the directory\n                              val files = file.listFiles.toList.sortBy(_.getName)\n                              val base  = "/static/"\n                              val rest  = path\n\n                              // Custom UI to list all the files in the directory\n                              Handler.template(s"File Explorer ~$base${path}") {\n                                ul(\n                                  li(a(href := s"$base$rest", "..")),\n                                  files.map { file =>\n                                    li(\n                                      a(\n                                        href := s"$base${path.encode}${if (path.isRoot) file.getName\n                                          else "/" + file.getName}",\n                                        file.getName,\n                                      ),\n                                    )\n                                  },\n                                )\n                              }\n                            }\n\n                            // Return the file if it\'s a static resource\n                            else if (file.isFile) Handler.fromFile(file)\n\n                            // Return a 404 if the file doesn\'t exist\n                            else Handler.notFound)\n      } yield http\n    },\n  ).sandbox\n\n  val run = Server.serve(app).provide(Server.default)\n\n}\n')))}f.isMDXComponent=!0}}]);