"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[92977],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),d=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(c.Provider,{value:n},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=d(t),m=i,y=s["".concat(c,".").concat(m)]||s[m]||g[m]||r;return t?a.createElement(y,o(o({ref:n},p),{},{components:t})):a.createElement(y,o({ref:n},p))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},37147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(58168),i=(t(96540),t(15680));const r={id:"service-pattern",title:"The Four Elements of Service Pattern",sidebar_label:"Service Pattern"},o=void 0,l={unversionedId:"reference/service-pattern/service-pattern",id:"reference/service-pattern/service-pattern",title:"The Four Elements of Service Pattern",description:"Writing services in ZIO using the Service Pattern is very similar to the object-oriented way of defining services. We use scala traits to define services, classes to implement services, and constructors to define service dependencies. Finally, we lift the class constructor into the ZLayer.",source:"@site/docs/reference/service-pattern/service-pattern.md",sourceDirName:"reference/service-pattern",slug:"/reference/service-pattern/",permalink:"/reference/service-pattern/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/service-pattern/service-pattern.md",tags:[],version:"current",frontMatter:{id:"service-pattern",title:"The Four Elements of Service Pattern",sidebar_label:"Service Pattern"},sidebar:"reference-sidebar",previous:{title:"Introduction to Writing ZIO Services",permalink:"/reference/service-pattern/introduction"},next:{title:"Polymorphic Services",permalink:"/reference/service-pattern/defining-polymorphic-services-in-zio"}},c={},d=[{value:"1. Service Definition",id:"1-service-definition",level:2},{value:"2. Service Implementation",id:"2-service-implementation",level:2},{value:"3. Service Dependencies",id:"3-service-dependencies",level:2},{value:"4. ZLayer (Constructor)",id:"4-zlayer-constructor",level:2},{value:"Assembling the application",id:"assembling-the-application",level:2}],p={toc:d},s="wrapper";function g(e){let{components:n,...t}=e;return(0,i.yg)(s,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Writing services in ZIO using the ",(0,i.yg)("em",{parentName:"p"},"Service Pattern")," is very similar to the object-oriented way of defining services. We use scala traits to define services, classes to implement services, and constructors to define service dependencies. Finally, we lift the class constructor into the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLayer"),"."),(0,i.yg)("p",null,"Let's start learning this service pattern by writing a ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepo")," service:"),(0,i.yg)("h2",{id:"1-service-definition"},"1. Service Definition"),(0,i.yg)("p",null,"Traits are how we define services. A service could be all the stuff that is related to one concept with singular responsibility. We define the service definition with a trait named ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepo"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nfinal case class Doc(\n  title: String,\n  description: String,\n  language: String,\n  format: String,\n  content: Array[Byte]\n)\n\ntrait DocRepo {\n  def get(id: String): ZIO[Any, Throwable, Doc]\n\n  def save(document: Doc): ZIO[Any, Throwable, String]\n\n  def delete(id: String): ZIO[Any, Throwable, Unit]\n\n  def findByTitle(title: String): ZIO[Any, Throwable, List[Doc]]\n}\n")),(0,i.yg)("h2",{id:"2-service-implementation"},"2. Service Implementation"),(0,i.yg)("p",null,"It is the same as what we did in an object-oriented fashion. We implement the service with the Scala class:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"final class DocRepoLive() extends DocRepo {\n  override def get(id: String): ZIO[Any, Throwable, Doc] = ???\n\n  override def save(document: Doc): ZIO[Any, Throwable, String] = ???\n\n  override def delete(id: String): ZIO[Any, Throwable, Unit] = ???\n\n  override def findByTitle(title: String): ZIO[Any, Throwable, List[Doc]] = ???\n}\n")),(0,i.yg)("h2",{id:"3-service-dependencies"},"3. Service Dependencies"),(0,i.yg)("p",null,"We might need ",(0,i.yg)("inlineCode",{parentName:"p"},"MetadataRepo")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"BlobStorage")," services to implement the ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepo")," service. Here, we put its dependencies into its constructor. All the dependencies are just interfaces, not implementation. Just like what we did in object-oriented style."),(0,i.yg)("p",null,"First, we need to define the interfaces for ",(0,i.yg)("inlineCode",{parentName:"p"},"MetadataRepo")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"BlobStorage")," services:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"final case class Metadata(\n  title: String,\n  description: String,\n  language: String,\n  format: String\n)\n\ntrait MetadataRepo {\n  def get(id: String): ZIO[Any, Throwable, Metadata]\n\n  def put(id: String, metadata: Metadata): ZIO[Any, Throwable, Unit]\n\n  def delete(id: String): ZIO[Any, Throwable, Unit]\n\n  def findByTitle(title: String): ZIO[Any, Throwable, Map[String, Metadata]]\n}\n\ntrait BlobStorage {\n  def get(id: String): ZIO[Any, Throwable, Array[Byte]]\n\n  def put(content: Array[Byte]): ZIO[Any, Throwable, String]\n\n  def delete(id: String): ZIO[Any, Throwable, Unit]\n}\n")),(0,i.yg)("p",null,"Now, we can implement the ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepo")," service:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"final class DocRepoLive(\n  metadataRepo: MetadataRepo,\n  blobStorage: BlobStorage\n) extends DocRepo {\n  override def get(id: String): ZIO[Any, Throwable, Doc] =\n    (metadataRepo.get(id) <&> blobStorage.get(id)).map {\n      case (metadata, content) =>\n        Doc(\n          title = metadata.title,\n          description = metadata.description,\n          language = metadata.language,\n          format = metadata.format,\n          content = content\n        )\n    }\n    \n  override def save(document: Doc): ZIO[Any, Throwable, String] =\n    for {\n      id       <- blobStorage.put(document.content)\n      metadata = Metadata(\n        title = document.title,\n        description = document.description,\n        language = document.language,\n        format = document.format\n      )\n      _        <- metadataRepo.put(id, metadata)\n    } yield id\n\n  override def delete(id: String): ZIO[Any, Throwable, Unit] = blobStorage.delete(id) &> metadataRepo.delete(id).unit\n\n  override def findByTitle(title: String): ZIO[Any, Throwable, List[Doc]] =\n    for {\n      metadatas <- metadataRepo.findByTitle(title)\n      content   <- ZIO.foreachPar(metadatas) { (id, metadata) =>\n                     blobStorage\n                       .get(id)\n                       .map { content =>\n                         val doc = Doc(\n                           title = metadata.title,\n                           description = metadata.description,\n                           language = metadata.language,\n                           format = metadata.format,\n                           content = content\n                         )\n                    \n                         id -> doc\n                       }\n                   }\n    } yield content.values.toList\n}\n")),(0,i.yg)("h2",{id:"4-zlayer-constructor"},"4. ZLayer (Constructor)"),(0,i.yg)("p",null,"Now, we create a companion object for ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepoLive")," data type and lift the service implementation into the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZLayer"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'object DocRepo {\n  /**\n   * The "live" implementation of the `DocRepo` service.\n   */\n  val live: ZLayer[BlobStorage & MetadataRepo, Nothing, DocRepo] =\n    ZLayer {\n      for {\n        metadataRepo <- ZIO.service[MetadataRepo]\n        blobStorage  <- ZIO.service[BlobStorage]\n      } yield new DocRepoLive(metadataRepo, blobStorage)\n    }\n}\n')),(0,i.yg)("p",null,"And voila! We have implemented the ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepo")," service using the ",(0,i.yg)("em",{parentName:"p"},"Service Pattern"),"."),(0,i.yg)("h2",{id:"assembling-the-application"},"Assembling the application"),(0,i.yg)("p",null,"Similarly, we need to implement the ",(0,i.yg)("inlineCode",{parentName:"p"},"BlobStorage")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"MetadataRepo")," services:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"object InmemoryBlobStorage {\n  /**\n   * An in-memory implementation of the `BlobStorage` service.\n   */\n  val layer = \n    ZLayer {\n      ???\n    } \n}\n\nobject InmemoryMetadataRepo {\n  /**\n   * An in-memory implementation of the `MetadataRepo` service.\n   */\n  val layer = \n    ZLayer {\n      ???\n    }\n}\n")),(0,i.yg)("p",null,"This is how ZIO services are created. Let's use the ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepo")," service in our application. We should provide ",(0,i.yg)("inlineCode",{parentName:"p"},"DocRepo")," layer to be able to run the application:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport java.io.IOException\n\nobject MainApp extends ZIOAppDefault {\n  val app =\n    for {\n      docRepo <- ZIO.service[DocRepo]\n      id      <- docRepo.save(\n                    Doc(\n                      "title",\n                      "description",\n                      "en",\n                      "text/plain",\n                      "content".getBytes()\n                    )\n                 )\n      doc     <- docRepo.get(id)\n      _       <- Console.printLine(\n                   s"""\n                     |Downloaded the document with $id id:\n                     |  title: ${doc.title}\n                     |  description: ${doc.description}\n                     |  language: ${doc.language}\n                     |  format: ${doc.format}\n                     |""".stripMargin\n                 )  \n      _       <- docRepo.delete(id)\n      _       <- Console.printLine(s"Deleted the document with $id id")\n    } yield ()\n\n  def run =\n    app.provide(\n      DocRepo.live,\n      InmemoryBlobStorage.layer,\n      InmemoryMetadataRepo.layer\n    )\n}\n')),(0,i.yg)("p",null,"During writing the application, we don't care which implementation version of the ",(0,i.yg)("inlineCode",{parentName:"p"},"BlobStorage")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"MetadataRepo")," services will be injected into our ",(0,i.yg)("inlineCode",{parentName:"p"},"app"),". Later at the end of the day, it will be provided by one of ",(0,i.yg)("inlineCode",{parentName:"p"},"ZIO#provide*")," methods."),(0,i.yg)("p",null,"That's it! Very simple! ZIO encourages us to follow some of the best practices in object-oriented programming. So it doesn't require us to throw away all our object-oriented knowledge."))}g.isMDXComponent=!0}}]);