"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[55831],{15680:(e,n,r)=>{r.d(n,{xA:()=>u,yg:()=>m});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,m=p["".concat(s,".").concat(d)]||p[d]||y[d]||o;return r?t.createElement(m,i(i({ref:n},u),{},{components:r})):t.createElement(m,i({ref:n},u))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},59210:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=r(58168),a=(r(96540),r(15680));const o={id:"index",title:"Introduction to ZIO's Synchronization Primitives"},i=void 0,c={unversionedId:"reference/sync/index",id:"reference/sync/index",title:"Introduction to ZIO's Synchronization Primitives",description:"When we access shared resources in a concurrent environment, we should choose a proper synchronization mechanism to avoid incorrect results and data inconsistencies. ZIO provides a set of synchronization primitives and concurrent data structures in the zio-concurrent module that helps us to achieve the desired synchronization.",source:"@site/docs/reference/sync/index.md",sourceDirName:"reference/sync",slug:"/reference/sync/",permalink:"/reference/sync/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/sync/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO's Synchronization Primitives"},sidebar:"reference-sidebar",previous:{title:"Fiber.Status",permalink:"/reference/fiber/fiberstatus"},next:{title:"ReentrantLock",permalink:"/reference/sync/reentrantlock"}},s={},l=[{value:"Installation",id:"installation",level:2},{value:"Synchronization",id:"synchronization",level:2},{value:"Concurrent Data Structures",id:"concurrent-data-structures",level:2}],u={toc:l},p="wrapper";function y(e){let{components:n,...r}=e;return(0,a.yg)(p,(0,t.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"When we access shared resources in a concurrent environment, we should choose a proper synchronization mechanism to avoid incorrect results and data inconsistencies. ZIO provides a set of synchronization primitives and concurrent data structures in the ",(0,a.yg)("inlineCode",{parentName:"p"},"zio-concurrent")," module that helps us to achieve the desired synchronization."),(0,a.yg)("h2",{id:"installation"},"Installation"),(0,a.yg)("p",null,"In order to use this library, we need to add the following line in our ",(0,a.yg)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-concurrent" % "2.x.x"\n')),(0,a.yg)("h2",{id:"synchronization"},"Synchronization"),(0,a.yg)("p",null,"ZIO has several synchronization tools:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("a",{parentName:"strong",href:"/reference/sync/reentrantlock"},(0,a.yg)("inlineCode",{parentName:"a"},"ReentrantLock"))),"\u2014 The ",(0,a.yg)("inlineCode",{parentName:"li"},"ReentrantLock")," is a synchronization tool that is useful for synchronizing blocks of code."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("a",{parentName:"strong",href:"/reference/sync/countdownlatch"},(0,a.yg)("inlineCode",{parentName:"a"},"CountDownLatch"))),"\u2014 The ",(0,a.yg)("inlineCode",{parentName:"li"},"CountDownLatch")," is a synchronization tool that allows one or more fibers to wait for the finalization of multiple operations."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("a",{parentName:"strong",href:"/reference/sync/cyclicbarrier"},(0,a.yg)("inlineCode",{parentName:"a"},"CyclicBarrier"))),"\u2014 The ",(0,a.yg)("inlineCode",{parentName:"li"},"CyclicBarrier")," is a synchronization tool that allows a set of fibers to all wait for each other to reach a common barrier point.")),(0,a.yg)("h2",{id:"concurrent-data-structures"},"Concurrent Data Structures"),(0,a.yg)("p",null,"It also has some concurrent data structure:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("a",{parentName:"strong",href:"/reference/sync/concurrentmap"},(0,a.yg)("inlineCode",{parentName:"a"},"ConcurrentMap"))),"\u2014 A ",(0,a.yg)("inlineCode",{parentName:"li"},"ConcurrentMap")," is a Map wrapper over ",(0,a.yg)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("a",{parentName:"strong",href:"/reference/sync/concurrentset"},(0,a.yg)("inlineCode",{parentName:"a"},"ConcurrentSet"))),"\u2014 A ",(0,a.yg)("inlineCode",{parentName:"li"},"ConcurrentSet")," is a Set wrapper over ",(0,a.yg)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap"),".")))}y.isMDXComponent=!0}}]);