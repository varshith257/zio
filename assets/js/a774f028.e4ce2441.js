"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[1066],{15680:(e,n,o)=>{o.d(n,{xA:()=>l,yg:()=>y});var a=o(96540);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,a)}return o}function c(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,a,t=function(e,n){if(null==e)return{};var o,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var s=a.createContext({}),d=function(e){var n=a.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):c(c({},n),e)),o},l=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var o=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=d(o),u=t,y=p["".concat(s,".").concat(u)]||p[u]||m[u]||r;return o?a.createElement(y,c(c({ref:n},l),{},{components:o})):a.createElement(y,c({ref:n},l))}));function y(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=o.length,c=new Array(r);c[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:t,c[1]=i;for(var d=2;d<r;d++)c[d]=o[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},45126:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=o(58168),t=(o(96540),o(15680));const r={id:"json",title:"JSON Codecs",sidebar_label:"JSON"},c=void 0,i={unversionedId:"zio-schema/derivations/codecs/json",id:"zio-schema/derivations/codecs/json",title:"JSON Codecs",description:"Introduction",source:"@site/docs/zio-schema/derivations/codecs/json.md",sourceDirName:"zio-schema/derivations/codecs",slug:"/zio-schema/derivations/codecs/json",permalink:"/zio-schema/derivations/codecs/json",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/derivations/codecs/json.md",tags:[],version:"current",frontMatter:{id:"json",title:"JSON Codecs",sidebar_label:"JSON"},sidebar:"ecosystem-sidebar",previous:{title:"BSON",permalink:"/zio-schema/derivations/codecs/bson"},next:{title:"MessagePack",permalink:"/zio-schema/derivations/codecs/message-pack"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"JsonCodec",id:"jsoncodec",level:2},{value:"BinaryCodec",id:"binarycodec",level:2}],l={toc:d},p="wrapper";function m(e){let{components:n,...o}=e;return(0,t.yg)(p,(0,a.A)({},l,o,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"introduction"},"Introduction"),(0,t.yg)("p",null,"JSON (JavaScript Object Notation) is a widely used data interchange format for transmitting and storing data. ZIO Schema provides ",(0,t.yg)("inlineCode",{parentName:"p"},"zio-schema-json")," module which has functionality to derive JSON codecs from a ZIO Schema. JSON codecs allow us to easily serialize and deserialize data in JSON format. In this article, we will explore how derive JSON codecs using the ZIO Schema."),(0,t.yg)("h2",{id:"installation"},"Installation"),(0,t.yg)("p",null,"To derive JSON codecs from a ZIO Schema, we need to add the following dependency to our ",(0,t.yg)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-schema-json" % 1.5.0\n')),(0,t.yg)("h2",{id:"jsoncodec"},"JsonCodec"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"JsonCodec")," object inside the ",(0,t.yg)("inlineCode",{parentName:"p"},"zio.schema.codec")," package provides the ",(0,t.yg)("inlineCode",{parentName:"p"},"jsonCodec")," operator which allows us to derive JSON codecs from a ZIO Schema:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"object JsonCodec {\n  def jsonCodec[A](schema: Schema[A]): zio.json.JsonCodec[A] = ???\n}\n")),(0,t.yg)("p",null,"Let's try an example to see how it works:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.json._\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] =\n    DeriveSchema.gen\n  implicit val jsonCodec: zio.json.JsonCodec[Person] =\n    zio.schema.codec.JsonCodec.jsonCodec(schema)\n}\n\nobject Main extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("JSON Codec Example:")\n    person: Person  = Person("John", 42)\n    encoded: String = person.toJson\n    _       <- ZIO.debug(s"person object encoded to JSON string: $encoded")\n    decoded <- ZIO.fromEither(Person.jsonCodec.decodeJson(encoded))\n    _       <- ZIO.debug(s"JSON object decoded to Person class: $decoded")\n  } yield ()\n}\n')),(0,t.yg)("h2",{id:"binarycodec"},"BinaryCodec"),(0,t.yg)("p",null,"We can also derive a binary codec from a ZIO Schema using the ",(0,t.yg)("inlineCode",{parentName:"p"},"schemaBasedBinaryCodec"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"object JsonCodec {\n  implicit def schemaBasedBinaryCodec[A](implicit schema: Schema[A]): BinaryCodec[A] = ???\n}\n")),(0,t.yg)("p",null,"Let's try an example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.schema.codec.BinaryCodec\nimport zio.schema.{DeriveSchema, Schema}\n\ncase class Person(name: String, age: Int)\n\nobject Person {\n  implicit val schema: Schema[Person] =\n    DeriveSchema.gen\n  implicit val jsonBinaryCodec: BinaryCodec[Person] =\n    zio.schema.codec.JsonCodec.schemaBasedBinaryCodec(schema)\n}\n\nobject Main extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.debug("JSON Codec Example:")\n    person: Person = Person("John", 42)\n    encoded: Chunk[Byte] = Person.jsonBinaryCodec.encode(person)\n    _ <- ZIO.debug(s"person object encoded to Binary JSON: ${toHex(encoded)}")\n    decoded <- ZIO.fromEither(Person.jsonBinaryCodec.decode(encoded))\n    _ <- ZIO.debug(s"JSON object decoded to Person class: $decoded")\n  } yield ()\n\n  def toHex(bytes: Chunk[Byte]): String =\n    bytes.map("%02x".format(_)).mkString(" ")\n}\n')),(0,t.yg)("p",null,"The output of the above program is:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},"JSON Codec Example:\nperson object encoded to JSON string: 7b 22 6e 61 6d 65 22 3a 22 4a 6f 68 6e 22 2c 22 61 67 65 22 3a 34 32 7d\nJSON object decoded to Person class: Person(John,42)\n")),(0,t.yg)("p",null,"By utilizing JSON codecs derived from ZIO Schema, developers can easily serialize and deserialize data in JSON format without writing boilerplate code. This enhances productivity and simplifies data handling in Scala applications."))}m.isMDXComponent=!0}}]);