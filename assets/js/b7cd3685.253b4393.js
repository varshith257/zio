"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[49221],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>u});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,u=d["".concat(s,".").concat(m)]||d[m]||g[m]||o;return t?a.createElement(u,r(r({ref:n},c),{},{components:t})):a.createElement(u,r({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59877:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(58168),i=(t(96540),t(15680));const o={id:"client",title:"Client"},r=void 0,l={unversionedId:"zio-http/reference/client",id:"zio-http/reference/client",title:"Client",description:"ZClient is an HTTP client that enables us to make HTTP requests and handle responses in a purely functional manner. ZClient leverages the ZIO library's capabilities to provide a high-performance, asynchronous, and type-safe HTTP client solution.",source:"@site/docs/zio-http/reference/client.md",sourceDirName:"zio-http/reference",slug:"/zio-http/reference/client",permalink:"/zio-http/reference/client",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/client.md",tags:[],version:"current",frontMatter:{id:"client",title:"Client"},sidebar:"ecosystem-sidebar",previous:{title:"Server",permalink:"/zio-http/reference/server"},next:{title:"Routes",permalink:"/zio-http/reference/routing/routes"}},s={},p=[{value:"Key Features",id:"key-features",level:2},{value:"Making HTTP Requests",id:"making-http-requests",level:2},{value:"&quot;Streaming&quot; Client",id:"streaming-client",level:3},{value:"&quot;Batched&quot; Client",id:"batched-client",level:3},{value:"Performing WebSocket Connections",id:"performing-websocket-connections",level:2},{value:"Configuring Headers",id:"configuring-headers",level:2},{value:"Composable URLs",id:"composable-urls",level:2},{value:"Client Aspects/Middlewares",id:"client-aspectsmiddlewares",level:2},{value:"Debugging Aspects",id:"debugging-aspects",level:3},{value:"Logging Aspects",id:"logging-aspects",level:3},{value:"Follow Redirects",id:"follow-redirects",level:3},{value:"Configuring ZIO HTTP Client",id:"configuring-zio-http-client",level:2},{value:"Configuring SSL",id:"configuring-ssl",level:3},{value:"Configuring Proxy",id:"configuring-proxy",level:3},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Enabling Response Decompression",id:"enabling-response-decompression",level:3},{value:"Customizing <code>ClientDriver</code> and <code>DnsResolver</code>",id:"customizing-clientdriver-and-dnsresolver",level:2},{value:"Examples",id:"examples",level:2},{value:"Simple Client Example",id:"simple-client-example",level:3},{value:"ClientServer Example",id:"clientserver-example",level:3},{value:"Authentication Client Example",id:"authentication-client-example",level:3},{value:"Reconnecting WebSocket Client Example",id:"reconnecting-websocket-client-example",level:3}],c={toc:p},d="wrapper";function g(e){let{components:n,...t}=e;return(0,i.yg)(d,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"ZClient")," is an HTTP client that enables us to make HTTP requests and handle responses in a purely functional manner. ZClient leverages the ZIO library's capabilities to provide a high-performance, asynchronous, and type-safe HTTP client solution."),(0,i.yg)("h2",{id:"key-features"},"Key Features"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Purely Functional"),": ZClient is built on top of the ZIO library, enabling a purely functional approach to handling HTTP requests and responses. This ensures referential transparency and composability, making it easy to build and reason about complex HTTP interactions."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Type-Safe"),": ZClient's API is designed to be type-safe, leveraging Scala's type system to catch errors at compile time and provide a seamless development experience. This helps prevent common runtime errors and enables developers to write robust and reliable HTTP client code."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Asynchronous & Non-blocking"),": ZClient is fully asynchronous and non-blocking, allowing us to perform multiple HTTP requests concurrently without blocking threads. This ensures optimal resource utilization and scalability, making it suitable for high-performance applications."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Middleware Support"),": ZClient provides support for middleware, allowing us to customize and extend its behavior to suit our specific requirements. We can easily plug in middleware to add functionalities such as logging, debugging, caching, and more."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Flexible Configuration"),": ZClient offers flexible configuration options, allowing us to fine-tune its behavior according to our needs. We can configure settings such as SSL, proxy, connection pooling, timeouts, and more to optimize the client's performance and behavior."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"WebSocket Support"),": In addition to traditional HTTP requests, ZClient also supports WebSocket communication, enabling bidirectional, full-duplex communication between client and server over a single, long-lived connection."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"SSL Support"),": ZClient provides built-in support for SSL (Secure Sockets Layer) connections, allowing secure communication over the network. Users can configure SSL settings such as certificates, trust stores, and encryption protocols to ensure data confidentiality and integrity."),(0,i.yg)("h2",{id:"making-http-requests"},"Making HTTP Requests"),(0,i.yg)("p",null,"We can think of a ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient")," as a function that takes a ",(0,i.yg)("inlineCode",{parentName:"p"},"Request")," and returns a ",(0,i.yg)("inlineCode",{parentName:"p"},"ZIO")," effect that calls the server with the given request and returns the response that the server sends back.\nRequests can be executed in 2 modes:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"batched"),": The entire body of the request is materialized in memory, and the connection lifecycle is managed automatically by the client."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"streaming"),": The body of the request ",(0,i.yg)("em",{parentName:"li"},"might be")," streaming, and the connection lifecycle is managed through the ",(0,i.yg)("inlineCode",{parentName:"li"},"Scope")," in the effect's environment.")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"Client"),"'s companion object contains methods that reflect the 2 modes of request execution:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"object Client {\n  def batched(request: Request): ZIO[Client, Throwable, Response] = ???\n  def streaming(request: Request): ZIO[Client & Scope, Throwable, Response] = ???\n}\n")),(0,i.yg)("h3",{id:"streaming-client"},'"Streaming" Client'),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"streaming")," mode is the default mode for executing HTTP requests. It requires the ",(0,i.yg)("inlineCode",{parentName:"p"},"Client")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"Scope")," environments to perform the request and handle the response. The ",(0,i.yg)("inlineCode",{parentName:"p"},"Client")," environment is used to make the request, while the ",(0,i.yg)("inlineCode",{parentName:"p"},"Scope")," environment is used to manage the lifecycle of resources such as connections, sockets, and other I/O-related resources that are acquired and released during the request-response operation."),(0,i.yg)("p",null,"When making a request in the ",(0,i.yg)("inlineCode",{parentName:"p"},"streaming")," mode, we need to explicitly close the ",(0,i.yg)("inlineCode",{parentName:"p"},"Scope")," once we've collected the response body:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\n// OK\nval good =\n  ZIO.scoped {\n    Client\n      .streaming(Request.get("http://jsonplaceholder.typicode.com/todos"))\n      .flatMap(_.body.asString)\n  }.flatMap(???)\n  \n// BAD: The server might be streaming the response body, and we\'ve forcefully closed the connection before it finishes\nval bad1 =\n  ZIO.scoped {\n    Client\n      .streaming(Request.get("http://jsonplaceholder.typicode.com/todos"))\n      .map(_.headers)\n  }\n    .flatMap(???)\n\n// BAD: We\'re closing the scope before collecting the response body\nval bad2 =\n  ZIO.scoped {\n      Client\n        .streaming(Request.get("http://jsonplaceholder.typicode.com/todos"))\n    }\n    .flatMap(_.body.asString)\n    .flatMap(???)\n\n// VERY BAD: The connection will not be closed until the application exits, which will lead to resource leaks!\nval bad3 =\n  Client\n    .streaming(Request.get("http://jsonplaceholder.typicode.com/todos"))\n    .flatMap(_.body.asString)\n    .flatMap(???)\n    .provideSomeLayer[Client](Scope.default)\n')),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"As a rule of thumb, you should ",(0,i.yg)("strong",{parentName:"p"},"never")," use ",(0,i.yg)("inlineCode",{parentName:"p"},"Scope.default")," with Client!"),(0,i.yg)("p",{parentName:"admonition"},"To learn more about resource management and ",(0,i.yg)("inlineCode",{parentName:"p"},"Scope")," in ZIO, refer to the ",(0,i.yg)("a",{parentName:"p",href:"https://zio.dev/reference/resource/scope"},"dedicated guide on this topic")," in the ZIO Core documentation.")),(0,i.yg)("h3",{id:"batched-client"},'"Batched" Client'),(0,i.yg)("p",null,"Handling of ",(0,i.yg)("inlineCode",{parentName:"p"},"Scope")," can quickly become cumbersome in cases where we simply want to execute an HTTP request and not handle the lifetime of the HTTP request.\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"batched")," mode is simply a sub-implementation of the ",(0,i.yg)("inlineCode",{parentName:"p"},"streaming")," mode where the ",(0,i.yg)("inlineCode",{parentName:"p"},"Scope")," (i.e., connection lifecycle) is managed automatically."),(0,i.yg)("p",null,"Executing a request via the ",(0,i.yg)("inlineCode",{parentName:"p"},"batched")," method can be done as simply as:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nval good =\n  Client\n    .batched(Request.get("http://jsonplaceholder.typicode.com/todos"))\n    .flatMap(_.body.asString)\n    .flatMap(???)\n')),(0,i.yg)("p",null,"::: warning\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"batched")," methods will materialize the entire body of the request to memory.\nUse this only when you don't need to stream the request body!\n:::"),(0,i.yg)("p",null,"We can similarly use the ",(0,i.yg)("inlineCode",{parentName:"p"},"batched")," method on an instance of ",(0,i.yg)("inlineCode",{parentName:"p"},"Client")," to return a new instance where all the methods will be executed in the ",(0,i.yg)("inlineCode",{parentName:"p"},"batched")," mode. Below is a realistic example showcasing the usage of the ",(0,i.yg)("inlineCode",{parentName:"p"},"batched")," client:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.schema.DeriveSchema\nimport zio.schema.codec.JsonCodec.schemaBasedBinaryCodec\n\ncase class Todo(\n  userId: Int,\n  id: Int,\n  title: String,\n  completed: Boolean,\n)\n\nobject Todo {\n  implicit val todoSchema = DeriveSchema.gen[Todo]\n}\n\nfinal class JsonPlaceHolderService(baseClient: Client) {\n  private val client = baseClient.batched\n\n  def todos(): ZIO[Any, Throwable, List[Todo]] =\n    client\n      .request(Request.get("http://jsonplaceholder.typicode.com/todos"))\n      .flatMap(_.body.to[List[Todo]])\n}\n')),(0,i.yg)("p",null,"ZIO HTTP has several utility methods to create different types of requests, such as ",(0,i.yg)("inlineCode",{parentName:"p"},"Client#get"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"Client#post"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"Client#put"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"Client#delete"),", etc:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Method"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"def get(suffix: String)")),(0,i.yg)("td",{parentName:"tr",align:null},"Performs a GET request with the given path suffix.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"def head(suffix: String)")),(0,i.yg)("td",{parentName:"tr",align:null},"Performs a HEAD request with the given path suffix.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"def patch(suffix: String)")),(0,i.yg)("td",{parentName:"tr",align:null},"Performs a PATCH request with the given path suffix.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"def post(suffix: String)(body: In)")),(0,i.yg)("td",{parentName:"tr",align:null},"Performs a POST request with the given path suffix and provided body.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"def put(suffix: String)(body: In)")),(0,i.yg)("td",{parentName:"tr",align:null},"Performs a PUT request with the given path suffix and provided body.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"def delete(suffix: String)")),(0,i.yg)("td",{parentName:"tr",align:null},"Performs a DELETE request with the given path suffix.")))),(0,i.yg)("h2",{id:"performing-websocket-connections"},"Performing WebSocket Connections"),(0,i.yg)("p",null,"We can also think of a client as a function that takes a ",(0,i.yg)("inlineCode",{parentName:"p"},"WebSocketApp")," and returns a ",(0,i.yg)("inlineCode",{parentName:"p"},"ZIO")," effect that performs the WebSocket operations and returns a response:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"object ZClient {\n  def socket[R](socketApp: WebSocketApp[R]): ZIO[R with Client & Scope, Throwable, Response] = ???\n}\n")),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"The ",(0,i.yg)("inlineCode",{parentName:"p"},"socket"),' method is not available on the "Batched" client!')),(0,i.yg)("p",null,"Here is a simple example of how to use the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient#socket")," method to perform a WebSocket connection:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.http.ChannelEvent._\n\nobject WebSocketSimpleClient extends ZIOAppDefault {\n\n  val url = "ws://ws.vi-server.org/mirror"\n\n  val socketApp: WebSocketApp[Any] =\n    Handler\n\n      // Listen for all websocket channel events\n      .webSocket { channel =>\n        channel.receiveAll {\n\n          // Send a "foo" message to the server once the connection is established\n          case UserEventTriggered(UserEvent.HandshakeComplete) =>\n            channel.send(Read(WebSocketFrame.text("foo"))) *>\n              ZIO.debug("Connection established and the foo message sent to the server")\n\n          // Send a "bar" if the server sends a "foo"\n          case Read(WebSocketFrame.Text("foo")) =>\n            channel.send(Read(WebSocketFrame.text("bar"))) *>\n              ZIO.debug("Received the foo message from the server and the bar message sent to the server")\n\n          // Close the connection if the server sends a "bar"\n          case Read(WebSocketFrame.Text("bar")) =>\n            ZIO.debug("Received the bar message from the server and Goodbye!") *>\n              channel.send(Read(WebSocketFrame.close(1000)))\n\n          case _ =>\n            ZIO.unit\n        }\n      }\n\n  val app: ZIO[Client, Throwable, Unit] =\n    for {\n      url    <- ZIO.fromEither(URL.decode("ws://ws.vi-server.org/mirror"))\n      client <- ZIO.serviceWith[Client](_.url(url))\n      _      <- ZIO.scoped(client.socket(socketApp) *> ZIO.never)\n    } yield ()\n\n  val run: ZIO[Any, Throwable, Any] =\n    app.provide(Client.default)\n\n}\n')),(0,i.yg)("p",null,"In the above example, we defined a WebSocket client that connects to a mirror server and sends and receives messages. When the connection is established, it receives the ",(0,i.yg)("inlineCode",{parentName:"p"},"UserEvent.HandshakeComplete"),' event and then it sends a "foo" message to the server. Consequently, the server sends a "foo" message, and the client responds with a "bar" message. Finally, the server sends a "bar" message, and the client closes the connection.'),(0,i.yg)("h2",{id:"configuring-headers"},"Configuring Headers"),(0,i.yg)("p",null,"By default, the client adds the ",(0,i.yg)("inlineCode",{parentName:"p"},"User-Agent")," header to all requests. Additionally, as the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient")," extends the ",(0,i.yg)("inlineCode",{parentName:"p"},"HeaderOps")," trait, we have access to all operations that can be performed on headers inside the client."),(0,i.yg)("p",null,"For example, to add a custom header we can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"Client#addHeader")," method:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.http.Header.Authorization\n\nval program = for {\n  client <- ZIO.serviceWith[Client](_.addHeader(Authorization.Bearer(token = "dummyBearerToken")))\n  res    <- client.request(Request.get("http://localhost:8080/users"))\n} yield ()\n')),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"To learn more about headers and how they work, check out our dedicated section called ",(0,i.yg)("a",{parentName:"p",href:"/zio-http/reference/headers/#headers-operations"},"Header Operations")," on the headers page.")),(0,i.yg)("h2",{id:"composable-urls"},"Composable URLs"),(0,i.yg)("p",null,"In ZIO HTTP, URLs are composable. This means that if we have two URLs, we can combine them to create a new URL. This is useful when we want to prevent duplication of the base URL in our code. For example, assume we have a base URL ",(0,i.yg)("inlineCode",{parentName:"p"},"http://localhost:8080")," and we want to make several requests to different endpoints and query parameters under this base URL. We can configure the client with this URL using the ",(0,i.yg)("inlineCode",{parentName:"p"},"Client#url")," and then every request will be made can be relative to this base URL:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.schema.DeriveSchema\nimport zio.schema.codec.JsonCodec.schemaBasedBinaryCodec\n\ncase class User(name: String, age: Int)\nobject User {\n  implicit val schema = DeriveSchema.gen[User]\n}\n\nval program: ZIO[Client, Throwable, Unit] =\n  for {\n    client <- ZIO.serviceWith[Client](_.url(url"http://localhost:8080").batched)\n    _      <- client.post("/users")(Body.from(User("John", 42)))\n    res    <- client.get("/users")\n    _      <- client.delete("/users/1")\n    _      <- res.body.asString.debug\n  } yield ()\n')),(0,i.yg)("p",null,"The following methods are available for setting the base URL:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Method Signature"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#url(url: URL)")),(0,i.yg)("td",{parentName:"tr",align:null},"Sets the URL directly.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#uri(uri: URI)")),(0,i.yg)("td",{parentName:"tr",align:null},"Sets the URL from the provided URI.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#path(path: String)")),(0,i.yg)("td",{parentName:"tr",align:null},"Sets the path of the URL from a string.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#path(path: Path)")),(0,i.yg)("td",{parentName:"tr",align:null},"Sets the path of the URL from a ",(0,i.yg)("inlineCode",{parentName:"td"},"Path")," object.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#port(port: Int)")),(0,i.yg)("td",{parentName:"tr",align:null},"Sets the port of the URL.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#scheme(scheme: Scheme)")),(0,i.yg)("td",{parentName:"tr",align:null},"Sets the scheme (protocol) for the URL.")))),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"Scheme")," is a sealed trait that represents the different schemes (protocols) that can be used in a request. The available schemes are ",(0,i.yg)("inlineCode",{parentName:"p"},"HTTP")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"HTTPS")," for HTTP requests, and ",(0,i.yg)("inlineCode",{parentName:"p"},"WS")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"WSS")," for WebSockets."),(0,i.yg)("p",null,"Here is the list of methods that are available for adding URL, Path, and QueryParams to the client's configuration:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Methods"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#addUrl(url: URL)")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds another URL to the existing one.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#addPath(path: String)")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds a path segment to the URL.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#addPath(path: Path)")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds a path segment from a ",(0,i.yg)("inlineCode",{parentName:"td"},"Path")," object to the URL.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#addLeadingSlash")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds a leading slash to the URL path.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#addTrailingSlash")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds a trailing slash to the URL path.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#addQueryParam(key: String, value: String)")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds a query parameter with the specified key-value pair to the URL.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"Client#addQueryParams(params: QueryParams)")),(0,i.yg)("td",{parentName:"tr",align:null},"Adds multiple query parameters to the URL from a ",(0,i.yg)("inlineCode",{parentName:"td"},"QueryParams")," object.")))),(0,i.yg)("h2",{id:"client-aspectsmiddlewares"},"Client Aspects/Middlewares"),(0,i.yg)("p",null,"Client aspects are a powerful feature of ZIO HTTP, enabling us to intercept, modify, and extend client behavior. The ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClientAspect")," is represented as a function that takes a ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient")," and returns a new ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient")," with customized behavior. We apply aspects to a client using the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient#@@")," method, allowing modification of various execution aspects such as metrics, tracing, encoding, decoding, and debugging."),(0,i.yg)("h3",{id:"debugging-aspects"},"Debugging Aspects"),(0,i.yg)("p",null,"To debug the client, we can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClientAspect.debug")," aspect, which logs the request details to the console. This is useful for debugging and troubleshooting client interactions, as it provides visibility into the low-level details of the HTTP requests and responses:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nobject ClientWithDebugAspect extends ZIOAppDefault {\n  val program =\n    for {\n      client <- ZIO.service[Client].map(_ @@ ZClientAspect.debug)\n      _      <- client.batched(Request.get("http://jsonplaceholder.typicode.com/todos"))\n    } yield ()\n\n  override val run = program.provide(Client.default)\n}\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClientAspect.debug")," also takes a partial function from ",(0,i.yg)("inlineCode",{parentName:"p"},"Response")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"String"),", which enables us to customize the logging output based on the response. This is useful for logging specific details from the response, such as status code, headers, and body:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'val debugResponse = ZClientAspect.debug { case res: Response => res.headers.mkString("\\n") }\n\nval program =\n  for {\n    client <- ZIO.service[Client].map(_ @@ debugResponse)\n    _      <- client.request(Request.get("http://jsonplaceholder.typicode.com/todos"))\n  } yield ()\n')),(0,i.yg)("h3",{id:"logging-aspects"},"Logging Aspects"),(0,i.yg)("p",null,"To log the client interactions, we can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClientAspect.requestLogging")," which logs the request details such as method, duration, url, user-agent, status code and request size."),(0,i.yg)("p",null,"Let's try an example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nval loggingAspect =\n  ZClientAspect.requestLogging(\n    loggedRequestHeaders = Set(Header.UserAgent),\n    logResponseBody = true,\n  )\n\nval program =\n  for {\n    client <- ZIO.service[Client].map(_ @@ loggingAspect)\n    _      <- client.request(Request.get("http://jsonplaceholder.typicode.com/todos"))\n  } yield ()\n')),(0,i.yg)("h3",{id:"follow-redirects"},"Follow Redirects"),(0,i.yg)("p",null,"To follow redirects, we can apply the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClientAspect.followRedirects")," aspect, which takes the maximum number of redirects to follow and a callback function that allows us to customize the behavior when a redirect is encountered:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nval followRedirects = ZClientAspect.followRedirects(3)((resp, message) => ZIO.logInfo(message).as(resp))\n\nfor {\n  client   <- ZIO.service[Client].map(_ @@ followRedirects)\n  response <- client.request(Request.get("http://google.com"))\n  _        <- response.body.asString.debug\n} yield ()\n')),(0,i.yg)("h2",{id:"configuring-zio-http-client"},"Configuring ZIO HTTP Client"),(0,i.yg)("p",null,"The ZIO HTTP Client provides a flexible configuration mechanism through the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config")," class. This class allows us to customize various aspects of the HTTP client, including SSL settings, proxy configuration, connection pool size, timeouts, and more. The ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config.default")," provides a default configuration that can be customized using ",(0,i.yg)("inlineCode",{parentName:"p"},"copy")," method or by using the utility methods provided by the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config")," class."),(0,i.yg)("p",null,"Let's take a look at the available configuration options:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"SSL Configuration"),": Allows us to specify SSL settings for secure connections."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Proxy Configuration"),": Enables us to configure a proxy server for outgoing HTTP requests."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Connection Pool Configuration"),": Defines the size of the connection pool."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Max Initial Line Length"),": Sets the maximum length of the initial line in an HTTP request or response. The default is set to 4096 characters."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Max Header Size"),": Specifies the maximum size of HTTP headers in bytes. The default is set to 8192 bytes."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Request Decompression"),": Specifies whether the client should decompress the response body if it's compressed."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Local Address"),": Specifies the local network interface or address to use for outgoing connections. It's set to None, indicating that the client will use the default local address."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Add User-Agent Header"),": Indicates whether the client should automatically add a User-Agent header to outgoing requests. It's set to true in the default configuration."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"WebSocket Configuration"),": Configures settings specific to WebSocket connections. In this example, the default WebSocket configuration is used."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Idle Timeout"),": Specifies the maximum idle time for persistent connections in seconds. The default is set to 50 seconds."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Connection Timeout"),": Specifies the maximum time to wait for establishing a connection in seconds. By default, the client has no connection timeout.")),(0,i.yg)("p",null,"Here are some of the above configuration options in more detail:"),(0,i.yg)("h3",{id:"configuring-ssl"},"Configuring SSL"),(0,i.yg)("p",null,"The default SSL configuration of ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config.default")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"None"),". To enable and configure SSL for the client, we can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config#ssl")," method. This method takes a config of type ",(0,i.yg)("inlineCode",{parentName:"p"},"ClientSSLConfig")," which supports different SSL configurations such as ",(0,i.yg)("inlineCode",{parentName:"p"},"Default"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"FromCertFile"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"FromCertResource"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"FromTrustStoreFile"),", and `FromTrustStoreResource."),(0,i.yg)("p",null,"Let's see an example of how to configure SSL for the client:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HttpsClient.scala"',title:'"zio-http-example/src/main/scala/example/HttpsClient.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.client.NettyClientDriver\n\nobject HttpsClient extends ZIOAppDefault {\n  val url     = URL.decode("https://jsonplaceholder.typicode.com/todos/1").toOption.get\n  val headers = Headers(Header.Host("jsonplaceholder.typicode.com"))\n\n  val sslConfig = ClientSSLConfig.FromTrustStoreResource(\n    trustStorePath = "truststore.jks",\n    trustStorePassword = "changeit",\n  )\n\n  val clientConfig = ZClient.Config.default.ssl(sslConfig)\n\n  val program = for {\n    data <- ZClient.batched(Request.get(url).addHeaders(headers))\n    _    <- Console.printLine(data)\n  } yield ()\n\n  val run =\n    program.provide(\n      ZLayer.succeed(clientConfig),\n      Client.customized,\n      NettyClientDriver.live,\n      DnsResolver.default,\n      ZLayer.succeed(NettyConfig.default),\n    )\n\n}\n')),(0,i.yg)("h3",{id:"configuring-proxy"},"Configuring Proxy"),(0,i.yg)("p",null,"To configure a proxy for the client, we can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"Client#proxy")," method. This method takes a ",(0,i.yg)("inlineCode",{parentName:"p"},"Proxy")," and updates the client's configuration to use the specified proxy for all requests:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nval program = for {\n  proxyUrl <- ZIO.fromEither(URL.decode("http://localhost:8123"))\n  client   <- ZIO.serviceWith[Client](_.proxy(Proxy(url = proxyUrl)))\n  res      <- client.request(Request.get("https://jsonplaceholder.typicode.com/todos"))\n} yield ()\n')),(0,i.yg)("h3",{id:"connection-pooling"},"Connection Pooling"),(0,i.yg)("p",null,"Connection pooling is a crucial mechanism in ZIO HTTP for optimizing the management of HTTP connections. By default, ZIO HTTP uses a fixed-size connection pool with a capacity of 10 connections. This means that the client can maintain up to 10 idle connections to the server for reuse. When the client makes a request, it checks the connection pool for an available connection to the server. If a connection is available, it reuses it for the request. If no connection is available, it creates a new connection and adds it to the pool."),(0,i.yg)("p",null,"To configure the connection pool, we have to update the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config#connectionPool")," field with the preferred configuration. The ",(0,i.yg)("inlineCode",{parentName:"p"},"ConnectionPoolConfig")," trait serves as a base trait for different connection pool configurations. It is a sealed trait with five different implementations:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Disabled"),": Indicates that connection pooling is disabled."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Fixed"),": Takes a single parameter, ",(0,i.yg)("inlineCode",{parentName:"li"},"size"),", which specifies a fixed size connection pool."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"FixedPerHost"),": Takes a map of ",(0,i.yg)("inlineCode",{parentName:"li"},"URL.Location.Absolute")," to ",(0,i.yg)("inlineCode",{parentName:"li"},"Fixed")," to specify a fixed size connection pool per host."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Dynamic"),": Takes three parameters, ",(0,i.yg)("inlineCode",{parentName:"li"},"minimum"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"maximum"),", and ",(0,i.yg)("inlineCode",{parentName:"li"},"ttl"),", to configure a dynamic connection pool with minimum and maximum sizes and a time-to-live (TTL) duration."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"DynamicPerHost"),": Similar to Dynamic, but with configurations per host.")),(0,i.yg)("p",null,"Also the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config")," has some utility methods to update the connection pool configuration, e.g. ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config#fixedConnectionPool")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config#dynamicConnectionPool"),". Let's see an example of how to configure the connection pool:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/ClientWithConnectionPooling.scala"',title:'"zio-http-example/src/main/scala/example/ClientWithConnectionPooling.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\nimport zio.http.netty.NettyConfig\n\nobject ClientWithConnectionPooling extends ZIOAppDefault {\n  val program = for {\n    url    <- ZIO.fromEither(URL.decode("http://jsonplaceholder.typicode.com/posts"))\n    client <- ZIO.serviceWith[Client](_.addUrl(url))\n    _      <- ZIO.foreachParDiscard(Chunk.fromIterable(1 to 100)) { i =>\n      client.batched(Request.get(i.toString)).flatMap(_.body.asString).debug\n    }\n  } yield ()\n\n  val config = ZClient.Config.default.dynamicConnectionPool(10, 20, 5.second)\n\n  override val run =\n    program.provide(\n      ZLayer.succeed(config),\n      Client.live,\n      ZLayer.succeed(NettyConfig.default),\n      DnsResolver.default,\n    )\n}\n')),(0,i.yg)("h3",{id:"enabling-response-decompression"},"Enabling Response Decompression"),(0,i.yg)("p",null,"When making HTTP requests using a client, such as a web browser or a custom HTTP client, it's essential to optimize data transfer for efficiency and performance."),(0,i.yg)("p",null,"By default, most HTTP clients do not advertise compression support when making requests to web servers. However, servers often compress response bodies when they detect that the client supports compression. To enable response compression, we need to add the ",(0,i.yg)("inlineCode",{parentName:"p"},"Accept-Encoding")," header to our HTTP requests. The ",(0,i.yg)("inlineCode",{parentName:"p"},"Accept-Encoding")," header specifies the compression algorithms supported by the client. Common values include ",(0,i.yg)("inlineCode",{parentName:"p"},"gzip")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"deflate"),". When a server receives a request with the ",(0,i.yg)("inlineCode",{parentName:"p"},"Accept-Encoding")," header, it may compress the response body using one of the specified algorithms."),(0,i.yg)("p",null,"Here's an example of an HTTP request with the Accept-Encoding header:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-http"},"GET https://example.com/\nAccept-Encoding: gzip, deflate\n")),(0,i.yg)("p",null,"When a server responds with a compressed body, it includes the Content-Encoding header to specify the compression algorithm used. The client then needs to decompress the body before processing its contents."),(0,i.yg)("p",null,"For example, a compressed response might look like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-http"},"200 OK\ncontent-encoding: gzip\ncontent-type: application/json; charset=utf-8\n\n<compressed-body>\n")),(0,i.yg)("p",null,"To decompress the response body with ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient"),", we need to enable response decompression by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZClient.Config#requestDecompression")," method:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/ClientWithDecompression.scala"',title:'"zio-http-example/src/main/scala/example/ClientWithDecompression.scala"'},'package example\n\nimport zio._\n\nimport zio.http.Header.AcceptEncoding\nimport zio.http._\nimport zio.http.netty.NettyConfig\n\nobject ClientWithDecompression extends ZIOAppDefault {\n\n  val program = for {\n    url    <- ZIO.fromEither(URL.decode("https://jsonplaceholder.typicode.com"))\n    client <- ZIO.serviceWith[Client](_.addUrl(url))\n    res    <-\n      client\n        .addHeader(AcceptEncoding(AcceptEncoding.GZip(), AcceptEncoding.Deflate()))\n        .batched(Request.get("/todos"))\n    data   <- res.body.asString\n    _      <- Console.printLine(data)\n  } yield ()\n\n  val config       = ZClient.Config.default.requestDecompression(true)\n  override val run =\n    program.provide(\n      ZLayer.succeed(config),\n      Client.live,\n      ZLayer.succeed(NettyConfig.default),\n      DnsResolver.default,\n    )\n\n}\n')),(0,i.yg)("h2",{id:"customizing-clientdriver-and-dnsresolver"},"Customizing ",(0,i.yg)("inlineCode",{parentName:"h2"},"ClientDriver")," and ",(0,i.yg)("inlineCode",{parentName:"h2"},"DnsResolver")),(0,i.yg)("p",null,"Rather than utilizing the default layer, ",(0,i.yg)("inlineCode",{parentName:"p"},"Client.default"),", we have the option to employ the ",(0,i.yg)("inlineCode",{parentName:"p"},"Client.customized")," layer. This layer requires ",(0,i.yg)("inlineCode",{parentName:"p"},"ClientDriver"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"DnsResolver"),", and the ",(0,i.yg)("inlineCode",{parentName:"p"},"Client.Config")," layers:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},"object Client {\n  val customized: ZLayer[Config with ClientDriver with DnsResolver, Throwable, Client] = ???\n}\n")),(0,i.yg)("p",null,"This empowers us to interchange the client driver with alternatives beyond the default Netty driver or to customize it to our specific requirements. Also, we can customize the DNS resolver to use a different DNS resolution mechanism."),(0,i.yg)("h2",{id:"examples"},"Examples"),(0,i.yg)("h3",{id:"simple-client-example"},"Simple Client Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/SimpleClient.scala"',title:'"zio-http-example/src/main/scala/example/SimpleClient.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject SimpleClient extends ZIOAppDefault {\n  val url = URL.decode("https://jsonplaceholder.typicode.com/todos").toOption.get\n\n  val program = for {\n    client <- ZIO.service[Client]\n    res    <- client.url(url).batched(Request.get("/"))\n    data   <- res.body.asString\n    _      <- Console.printLine(data)\n  } yield ()\n\n  override val run = program.provide(Client.default)\n\n}\n')),(0,i.yg)("h3",{id:"clientserver-example"},"ClientServer Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/ClientServer.scala"',title:'"zio-http-example/src/main/scala/example/ClientServer.scala"'},'package example\n\nimport zio.ZIOAppDefault\n\nimport zio.http._\n\nobject ClientServer extends ZIOAppDefault {\n  val url = URL.decode("http://localhost:8080/hello").toOption.get\n\n  val app = Routes(\n    Method.GET / "hello" -> handler(Response.text("hello")),\n    Method.GET / ""      -> handler(ZClient.batched(Request.get(url))),\n  ).sandbox\n\n  val run =\n    Server.serve(app).provide(Server.default, Client.default).exitCode\n}\n')),(0,i.yg)("h3",{id:"authentication-client-example"},"Authentication Client Example"),(0,i.yg)("p",null,"This example code demonstrates accessing a protected route in an ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-http/blob/main/zio-http-example/src/main/scala/example/AuthenticationClient.scala"},"authentication server")," by first obtaining a JWT token through a login request and then using that token to access the protected route:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/AuthenticationClient.scala"',title:'"zio-http-example/src/main/scala/example/AuthenticationClient.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject AuthenticationClient extends ZIOAppDefault {\n\n  /**\n   * This example is trying to access a protected route in AuthenticationServer\n   * by first making a login request to obtain a jwt token and use it to access\n   * a protected route. Run AuthenticationServer before running this example.\n   */\n  val url = "http://localhost:8080"\n\n  val loginUrl = URL.decode(s"${url}/login").toOption.get\n  val greetUrl = URL.decode(s"${url}/profile/me").toOption.get\n\n  val program = for {\n    client   <- ZIO.service[Client]\n    // Making a login request to obtain the jwt token. In this example the password should be the reverse string of username.\n    token    <- client\n      .batched(\n        Request\n          .get(loginUrl)\n          .withBody(\n            Body.fromMultipartForm(\n              Form(\n                FormField.simpleField("username", "John"),\n                FormField.simpleField("password", "nhoJ"),\n              ),\n              Boundary("boundary123"),\n            ),\n          ),\n      )\n      .flatMap(_.body.asString)\n    // Once the jwt token is procured, adding it as a Bearer token in Authorization header while accessing a protected route.\n    response <- client.batched(Request.get(greetUrl).addHeader(Header.Authorization.Bearer(token)))\n    body     <- response.body.asString\n    _        <- Console.printLine(body)\n  } yield ()\n\n  override val run = program.provide(Client.default)\n\n}\n')),(0,i.yg)("h3",{id:"reconnecting-websocket-client-example"},"Reconnecting WebSocket Client Example"),(0,i.yg)("p",null,"This example represents a WebSocket client application that automatically attempts to reconnect upon encountering errors or disconnections. It uses the ",(0,i.yg)("inlineCode",{parentName:"p"},"Promise")," to notify about WebSocket errors:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/WebSocketReconnectingClient.scala"',title:'"zio-http-example/src/main/scala/example/WebSocketReconnectingClient.scala"'},'package example\n\nimport zio._\n\nimport zio.http.ChannelEvent.{ExceptionCaught, Read, UserEvent, UserEventTriggered}\nimport zio.http._\n\nobject WebSocketReconnectingClient extends ZIOAppDefault {\n\n  val url = "ws://ws.vi-server.org/mirror"\n\n  // A promise is used to be able to notify application about websocket errors\n  def makeSocketApp(p: Promise[Nothing, Throwable]): WebSocketApp[Any] =\n    Handler\n\n      // Listen for all websocket channel events\n      .webSocket { channel =>\n        channel.receiveAll {\n\n          // On connect send a "foo" message to the server to start the echo loop\n          case UserEventTriggered(UserEvent.HandshakeComplete) =>\n            channel.send(ChannelEvent.Read(WebSocketFrame.text("foo")))\n\n          // On receiving "foo", we\'ll reply with another "foo" to keep echo loop going\n          case Read(WebSocketFrame.Text("foo"))                =>\n            ZIO.logInfo("Received foo message.") *>\n              ZIO.sleep(1.second) *>\n              channel.send(ChannelEvent.Read(WebSocketFrame.text("foo")))\n\n          // Handle exception and convert it to failure to signal the shutdown of the socket connection via the promise\n          case ExceptionCaught(t)                              =>\n            ZIO.fail(t)\n\n          case _ =>\n            ZIO.unit\n        }\n      }.tapErrorZIO { f =>\n        // signal failure to application\n        p.succeed(f)\n      }\n\n  val app: ZIO[Client & Scope, Throwable, Unit] = {\n    (for {\n      p <- zio.Promise.make[Nothing, Throwable]\n      _ <- makeSocketApp(p).connect(url).catchAll { t =>\n        // convert a failed connection attempt to an error to trigger a reconnect\n        p.succeed(t)\n      }\n      f <- p.await\n      _ <- ZIO.logError(s"App failed: $f")\n      _ <- ZIO.logError(s"Trying to reconnect...")\n      _ <- ZIO.sleep(1.seconds)\n    } yield {\n      ()\n    }) *> app\n  }\n\n  val run =\n    ZIO.scoped(app).provide(Client.default)\n\n}\n')))}g.isMDXComponent=!0}}]);