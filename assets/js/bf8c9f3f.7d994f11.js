"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[9066],{15680:(e,a,r)=>{r.d(a,{xA:()=>p,yg:()=>u});var n=r(96540);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function i(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?i(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function o(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=n.createContext({}),y=function(e){var a=n.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},p=function(e){var a=y(e.components);return n.createElement(s.Provider,{value:a},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=y(r),c=t,u=g["".concat(s,".").concat(c)]||g[c]||m[c]||i;return r?n.createElement(u,l(l({ref:a},p),{},{components:r})):n.createElement(u,l({ref:a},p))}));function u(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=r.length,l=new Array(i);l[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[g]="string"==typeof e?e:t,l[1]=o;for(var y=2;y<i;y++)l[y]=r[y];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},10724:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>y});var n=r(58168),t=(r(96540),r(15680));const i={id:"index",title:"Introduction"},l=void 0,o={unversionedId:"reference/index",id:"version-1.0.18/reference/index",title:"Introduction",description:"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:",source:"@site/versioned_docs/version-1.0.18/reference/index.md",sourceDirName:"reference",slug:"/reference/",permalink:"/1.0.18/reference/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/index.md",tags:[],version:"1.0.18",frontMatter:{id:"index",title:"Introduction"},sidebar:"overview_sidebar",previous:{title:"Platforms",permalink:"/1.0.18/overview/overview_platforms"},next:{title:"Summary",permalink:"/1.0.18/reference/core/"}},s={},y=[{value:"Core Data Types",id:"core-data-types",level:2},{value:"Contextual Data Types",id:"contextual-data-types",level:2},{value:"Concurrency",id:"concurrency",level:2},{value:"Fiber Primitives",id:"fiber-primitives",level:3},{value:"Concurrency Primitives",id:"concurrency-primitives",level:3},{value:"Synchronization aids",id:"synchronization-aids",level:3},{value:"STM",id:"stm",level:3},{value:"Resource Management",id:"resource-management",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2}],p={toc:y},g="wrapper";function m(e){let{components:a,...r}=e;return(0,t.yg)(g,(0,n.A)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#core-data-types"},"Core Data Types")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#contextual-data-types"},"Contextual Data Types")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#concurrency"},"Concurrency"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#fiber-primitives"},"Fiber Primitives")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#concurrency-primitives"},"Concurrency Primitives")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#synchronization-aids"},"Synchronization Aids")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#stm"},"STM")))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#resource-management"},"Resource Management")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#streaming"},"Streaming")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",{parentName:"li",href:"#miscellaneous"},"Miscellaneous"))),(0,t.yg)("h2",{id:"core-data-types"},"Core Data Types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/zio"},"ZIO"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO")," is a value that models an effectful program, which might fail or succeed.",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/uio"},"UIO"))," \u2014 An ",(0,t.yg)("inlineCode",{parentName:"li"},"UIO[A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[Any, Nothing, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/urio"},"URIO"))," \u2014 An ",(0,t.yg)("inlineCode",{parentName:"li"},"URIO[R, A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[R, Nothing, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/task"},"Task"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Task[A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[Any, Throwable, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/rio"},"RIO"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"RIO[R, A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[R, Throwable, A]"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/io"},"IO"))," \u2014 An ",(0,t.yg)("inlineCode",{parentName:"li"},"IO[E, A]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[Any, E, A]"),"."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/exit"},"Exit"))," \u2014 An ",(0,t.yg)("inlineCode",{parentName:"li"},"Exit[E, A]")," describes the result of executing an ",(0,t.yg)("inlineCode",{parentName:"li"},"IO")," value."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/cause"},"Cause"))," - ",(0,t.yg)("inlineCode",{parentName:"li"},"Cause[E]")," is a description of a full story of a fiber failure. "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/core/runtime"},"Runtime"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Runtime[R]")," is capable of executing tasks within an environment ",(0,t.yg)("inlineCode",{parentName:"li"},"R"),".")),(0,t.yg)("h2",{id:"contextual-data-types"},"Contextual Data Types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/contextual/has"},"Has"))," \u2014 The trait ",(0,t.yg)("inlineCode",{parentName:"li"},"Has[A]")," is used with the ",(0,t.yg)("a",{parentName:"li",href:"/1.0.18/reference/contextual/#zio-environment"},"ZIO environment")," to express an effect's dependency on a service of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),". "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/contextual/zlayer"},"ZLayer"))," \u2014 The ",(0,t.yg)("inlineCode",{parentName:"li"},"ZIO[-R, +E, +A]")," data type describes an effect that requires an input type of ",(0,t.yg)("inlineCode",{parentName:"li"},"R"),", as an environment, may fail with an error of type ",(0,t.yg)("inlineCode",{parentName:"li"},"E")," or succeed and produces a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),".",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/contextual/rlayer"},"RLayer"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"RLayer[-RIn, +ROut]")," is a type alias for ",(0,t.yg)("inlineCode",{parentName:"li"},"ZLayer[RIn, Throwable, ROut]"),", which represents a layer that requires ",(0,t.yg)("inlineCode",{parentName:"li"},"RIn")," as its input, it may fail with ",(0,t.yg)("inlineCode",{parentName:"li"},"Throwable")," value, or returns ",(0,t.yg)("inlineCode",{parentName:"li"},"ROut")," as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/contextual/ulayer"},"ULayer"))," \u2014 ULayer","[+ROut]"," is a type alias for ZLayer","[Any, Nothing, ROut]",", which represents a layer that doesn't require any services as its input, it can't fail, and returns ROut as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/contextual/layer"},"Layer"))," \u2014 Layer","[+E, +ROut]"," is a type alias for ZLayer","[Any, E, ROut]",", which represents a layer that doesn't require any services, it may fail with an error type of E, and returns ROut as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/contextual/urlayer"},"URLayer"))," \u2014 URLayer","[-RIn, +ROut]"," is a type alias for ZLayer","[RIn, Nothing, ROut]",", which represents a layer that requires RIn as its input, it can't fail, and returns ROut as its output."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/contextual/tasklayer"},"TaskLayer"))," \u2014 TaskLayer","[+ROut]"," is a type alias for ZLayer","[Any, Throwable, ROut]",", which represents a layer that doesn't require any services as its input, it may fail with Throwable value, and returns ROut as its output.")))),(0,t.yg)("h2",{id:"concurrency"},"Concurrency"),(0,t.yg)("h3",{id:"fiber-primitives"},"Fiber Primitives"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/fiber/"},"Fiber"))," \u2014 A fiber value models an ",(0,t.yg)("inlineCode",{parentName:"li"},"IO")," value that has started running, and is the moral equivalent of a green thread."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/fiber/fiberref"},"FiberRef"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"FiberRef[A]")," models a mutable reference to a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),". As opposed to ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref[A]"),", a value is bound to an executing ",(0,t.yg)("inlineCode",{parentName:"li"},"Fiber")," only.  You can think of it as Java's ",(0,t.yg)("inlineCode",{parentName:"li"},"ThreadLocal")," on steroids."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/fiber/fiberstatus"},"Fiber.Status"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Fiber.Status")," describe the current status of a Fiber."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/fiber/fiberid"},"Fiber.Id"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Fiber.Id")," describe the unique identity of a Fiber.")),(0,t.yg)("h3",{id:"concurrency-primitives"},"Concurrency Primitives"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/hub"},"Hub"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"Hub")," is an asynchronous message hub that allows publishers to efficiently broadcast values to many subscribers."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/promise"},"Promise"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Promise")," is a model of a variable that may be set a single time, and awaited on by many fibers."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/semaphore"},"Semaphore"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Semaphore")," is an asynchronous (non-blocking) semaphore that plays well with ZIO's interruption."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/zref"},"ZRef"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"ZRef[EA, EB, A, B]")," is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ",(0,t.yg)("inlineCode",{parentName:"li"},"ZRef")," are ",(0,t.yg)("inlineCode",{parentName:"li"},"set")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"get"),".",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/ref"},"Ref"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref[A]")," models a mutable reference to a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A"),". The two basic operations are ",(0,t.yg)("inlineCode",{parentName:"li"},"set"),", which fills the ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref")," with a new value, and ",(0,t.yg)("inlineCode",{parentName:"li"},"get"),", which retrieves its current content. All operations on a ",(0,t.yg)("inlineCode",{parentName:"li"},"Ref")," are atomic and thread-safe, providing a reliable foundation for synchronizing concurrent programs."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/zrefm"},"ZRefM"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"ZRefM[RA, RB, EA, EB, A, B]")," is a polymorphic, purely functional description of a mutable reference. ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/refm"},"RefM"))," \u2014 ",(0,t.yg)("inlineCode",{parentName:"li"},"RefM[A]")," models a ",(0,t.yg)("strong",{parentName:"li"},"mutable reference")," to a value of type ",(0,t.yg)("inlineCode",{parentName:"li"},"A")," in which we can store ",(0,t.yg)("strong",{parentName:"li"},"immutable")," data, and update it atomically ",(0,t.yg)("strong",{parentName:"li"},"and")," effectfully."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/concurrency/queue"},"Queue"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Queue")," is an asynchronous queue that never blocks, which is safe for multiple concurrent producers and consumers.")),(0,t.yg)("h3",{id:"synchronization-aids"},"Synchronization aids"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/sync/concurrentmap"},"ConcurrentMap"))," \u2014 A Map wrapper over ",(0,t.yg)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/sync/concurrentSet"},"ConcurrentSet"))," \u2014 A Set implementation over ",(0,t.yg)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/sync/countdownlatch"},"CountdownLatch"))," \u2014 A synchronization aid that allows one or more fibers to wait until a\nset of operations being performed in other fibers completes."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/sync/cyclicbarrier"},"CyclicBarrier"))," \u2014 A synchronization aid that allows a set of fibers to all wait for each\nother to reach a common barrier point.")),(0,t.yg)("h3",{id:"stm"},"STM"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/"},"STM"))," - An ",(0,t.yg)("inlineCode",{parentName:"li"},"STM")," represents an effect that can be performed transactionally resulting in a failure or success."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tarray"},"TArray"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TArray")," is an array of mutable references that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tset"},"TSet"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TSet")," is a mutable set that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tmap"},"TMap"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TMap")," is a mutable map that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tref"},"TRef"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TRef")," is a mutable reference to an immutable value that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tpriorityqueue"},"TPriorityQueue"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TPriorityQueue")," is a mutable priority queue that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tpromise"},"TPromise"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TPromise")," is a mutable reference that can be set exactly once and can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tqueue"},"TQueue"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TQueue")," is a mutable queue that can participate in transactions."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/treentrantlock"},"TReentrantLock"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TReentrantLock")," is a reentrant read / write lock that can be composed."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stm/tsemaphore"},"TSemaphore"))," - A ",(0,t.yg)("inlineCode",{parentName:"li"},"TSemaphore")," is a semaphore that can participate in transactions.")),(0,t.yg)("h2",{id:"resource-management"},"Resource Management"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/resource/managed"},"Managed"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Managed")," is a value that describes a perishable resource that may be consumed only once inside a given scope.")),(0,t.yg)("h2",{id:"streaming"},"Streaming"),(0,t.yg)("p",null,"The following datatypes can be found in ZIO streams library:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stream/zstream"},"ZStream"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"ZStream")," is a lazy, concurrent, asynchronous source of values."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/stream/zsink"},"ZSink"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"ZSink")," is a consumer of values from a ",(0,t.yg)("inlineCode",{parentName:"li"},"ZStream"),", which may produces a value when it has consumed enough.")),(0,t.yg)("h2",{id:"miscellaneous"},"Miscellaneous"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/misc/chunk"},"Chunk"))," \u2014 ZIO ",(0,t.yg)("inlineCode",{parentName:"li"},"Chunk"),": Fast, Pure Alternative to Arrays"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("a",{parentName:"strong",href:"/1.0.18/reference/misc/schedule"},"Schedule"))," \u2014 A ",(0,t.yg)("inlineCode",{parentName:"li"},"Schedule")," is a model of a recurring schedule, which can be used for repeating successful ",(0,t.yg)("inlineCode",{parentName:"li"},"IO")," values, or retrying failed ",(0,t.yg)("inlineCode",{parentName:"li"},"IO")," values.")),(0,t.yg)("p",null,"To learn more about these data types, please explore the pages above, or check out the Scaladoc documentation."))}m.isMDXComponent=!0}}]);