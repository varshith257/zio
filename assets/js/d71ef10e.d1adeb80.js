"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[76892],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>f});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=a,f=d["".concat(l,".").concat(c)]||d[c]||u[c]||o;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},66428:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(58168),a=(n(96540),n(15680));const o={id:"multipart-form-data",title:"Multipart Form Data Example",sidebar_label:"Multipart Form Data"},i=void 0,s={unversionedId:"zio-http/examples/multipart-form-data",id:"zio-http/examples/multipart-form-data",title:"Multipart Form Data Example",description:"Multipart Form Data Example",source:"@site/docs/zio-http/examples/multipart-form-data.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/multipart-form-data",permalink:"/zio-http/examples/multipart-form-data",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/multipart-form-data.md",tags:[],version:"current",frontMatter:{id:"multipart-form-data",title:"Multipart Form Data Example",sidebar_label:"Multipart Form Data"},sidebar:"ecosystem-sidebar",previous:{title:"Concrete Entity",permalink:"/zio-http/examples/concrete-entity"},next:{title:"Server Sent Events in Endpoints",permalink:"/zio-http/examples/server-sent-events-in-endpoints"}},l={},p=[{value:"Multipart Form Data Example",id:"multipart-form-data-example",level:2},{value:"Multipart Form Data Streaming Example",id:"multipart-form-data-streaming-example",level:2}],m={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"multipart-form-data-example"},"Multipart Form Data Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/MultipartFormData.scala"',title:'"zio-http-example/src/main/scala/example/MultipartFormData.scala"'},'package example\n\nimport scala.annotation.nowarn\n\nimport zio._\n\nimport zio.http._\n\nobject MultipartFormData extends ZIOAppDefault {\n\n  private val routes: Routes[Any, Response] =\n    Routes(\n      Method.POST / "upload" ->\n        handler { (req: Request) =>\n          if (req.header(Header.ContentType).exists(_.mediaType == MediaType.multipart.`form-data`))\n            for {\n              form     <- req.body.asMultipartForm\n                .mapError(ex =>\n                  Response(\n                    Status.InternalServerError,\n                    body = Body.fromString(s"Failed to decode body as multipart/form-data (${ex.getMessage}"),\n                  ),\n                )\n              response <- form.get("file") match {\n                case Some(file) =>\n                  file match {\n                    case FormField.Binary(_, data, contentType, transferEncoding, filename) =>\n                      ZIO.succeed(\n                        Response.text(\n                          s"Received ${data.length} bytes of $contentType filename $filename and transfer encoding $transferEncoding",\n                        ),\n                      )\n                    case _                                                                  =>\n                      ZIO.fail(\n                        Response(Status.BadRequest, body = Body.fromString("Parameter \'file\' must be a binary file")),\n                      )\n                  }\n                case None       =>\n                  ZIO.fail(Response(Status.BadRequest, body = Body.fromString("Missing \'file\' from body")))\n              }\n            } yield response\n          else ZIO.succeed(Response(status = Status.NotFound))\n        },\n    ).sandbox\n\n  @nowarn("msg=dead code")\n  private def program: ZIO[Client & Server, Throwable, Unit] =\n    for {\n      port         <- Server.install(routes)\n      _            <- ZIO.logInfo(s"Server started on port $port")\n      client       <- ZIO.service[Client]\n      response     <- client\n        .host("localhost")\n        .port(port)\n        .batched(\n          Request.post(\n            "/upload",\n            Body.fromMultipartForm(\n              Form(\n                FormField.binaryField(\n                  "file",\n                  Chunk.fromArray("Hello, world!".getBytes),\n                  MediaType.application.`octet-stream`,\n                  filename = Some("hello.txt"),\n                ),\n              ),\n              Boundary("AaB03x"),\n            ),\n          ),\n        )\n      responseBody <- response.body.asString\n      _            <- ZIO.logInfo(s"Response: [${response.status}] $responseBody")\n      _            <- ZIO.never\n    } yield ()\n\n  override def run =\n    program.provide(Server.default, Client.default)\n}\n')),(0,a.yg)("h2",{id:"multipart-form-data-streaming-example"},"Multipart Form Data Streaming Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/MultipartFormDataStreaming.scala"',title:'"zio-http-example/src/main/scala/example/MultipartFormDataStreaming.scala"'},'package example\n\nimport scala.annotation.nowarn\n\nimport zio._\n\nimport zio.stream.{ZSink, ZStream}\n\nimport zio.http._\n\nobject MultipartFormDataStreaming extends ZIOAppDefault {\n\n  private val routes: Routes[Any, Response] =\n    Routes(\n      Method.POST / "upload-simple"    -> handler { (req: Request) =>\n        for {\n          count <- req.body.asStream.run(ZSink.count)\n          _     <- ZIO.debug(s"Read $count bytes")\n        } yield Response.text(count.toString)\n      },\n      Method.POST / "upload-nonstream" -> handler { (req: Request) =>\n        for {\n          form <- req.body.asMultipartForm\n          count = form.formData.collect {\n            case sb: FormField.Binary =>\n              sb.data.size\n            case _                    => 0\n          }.sum\n          _ <- ZIO.debug(s"Read $count bytes")\n        } yield Response.text(count.toString)\n      },\n      Method.POST / "upload-collect"   -> handler { (req: Request) =>\n        for {\n          sform <- req.body.asMultipartFormStream\n          form  <- sform.collectAll\n          count = form.formData.collect {\n            case sb: FormField.Binary =>\n              sb.data.size\n            case _                    => 0\n          }.sum\n          _ <- ZIO.debug(s"Read $count bytes")\n        } yield Response.text(count.toString)\n      },\n      Method.POST / "upload"           -> handler { (req: Request) =>\n        if (req.header(Header.ContentType).exists(_.mediaType == MediaType.multipart.`form-data`))\n          for {\n            _     <- ZIO.debug("Starting to read multipart/form stream")\n            form  <- req.body.asMultipartFormStream\n              .mapError(ex =>\n                Response(\n                  Status.InternalServerError,\n                  body = Body.fromString(s"Failed to decode body as multipart/form-data (${ex.getMessage}"),\n                ),\n              )\n            count <- form.fields.flatMap {\n              case sb: FormField.StreamingBinary =>\n                sb.data\n              case _                             =>\n                ZStream.empty\n            }.run(ZSink.count)\n\n            _ <- ZIO.debug(s"Finished reading multipart/form stream, received $count bytes of data")\n          } yield Response.text(count.toString)\n        else ZIO.succeed(Response(status = Status.NotFound))\n      },\n    ).sandbox @@ Middleware.debug\n\n  @nowarn("msg=dead code")\n  private def program: ZIO[Server, Throwable, Unit] =\n    for {\n      port <- Server.install(routes)\n      _    <- ZIO.logInfo(s"Server started on port $port")\n      _    <- ZIO.never\n    } yield ()\n\n  override def run =\n    program\n      .provide(\n        ZLayer.succeed(Server.Config.default.enableRequestStreaming),\n        Server.live,\n      )\n}\n')))}u.isMDXComponent=!0}}]);