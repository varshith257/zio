"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[59110],{15680:(e,n,r)=>{r.d(n,{xA:()=>f,yg:()=>m});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=t.createContext({}),l=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},f=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),s=l(r),y=a,m=s["".concat(p,".").concat(y)]||s[y]||u[y]||o;return r?t.createElement(m,i(i({ref:n},f),{},{components:r})):t.createElement(m,i({ref:n},f))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[s]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},44313:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=r(58168),a=(r(96540),r(15680));const o={id:"zref",title:"ZRef"},i=void 0,c={unversionedId:"reference/concurrency/zref",id:"version-1.0.18/reference/concurrency/zref",title:"ZRef",description:"A ZRef[EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ZRef are set and get.",source:"@site/versioned_docs/version-1.0.18/reference/concurrency/zref.md",sourceDirName:"reference/concurrency",slug:"/reference/concurrency/zref",permalink:"/1.0.18/reference/concurrency/zref",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/concurrency/zref.md",tags:[],version:"1.0.18",frontMatter:{id:"zref",title:"ZRef"},sidebar:"overview_sidebar",previous:{title:"Introduction",permalink:"/1.0.18/reference/concurrency/"},next:{title:"Ref",permalink:"/1.0.18/reference/concurrency/ref"}},p={},l=[],f={toc:l},s="wrapper";function u(e){let{components:n,...r}=e;return(0,a.yg)(s,(0,t.A)({},f,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"A ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef[EA, EB, A, B]")," is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef")," are ",(0,a.yg)("inlineCode",{parentName:"p"},"set")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"get"),". "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"set"))," takes a value of type ",(0,a.yg)("inlineCode",{parentName:"li"},"A")," and sets the reference to a new value, potentially failing with an error of type ",(0,a.yg)("inlineCode",{parentName:"li"},"EA"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"strong"},"get"))," gets the current value of the reference and returns a value of type ",(0,a.yg)("inlineCode",{parentName:"li"},"B"),", potentially\nfailing with an error of type ",(0,a.yg)("inlineCode",{parentName:"li"},"EB"),".")),(0,a.yg)("p",null,"When the error and value types of the ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef")," are unified, that is, it is a ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef[E, E, A, A]"),", the ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef")," also supports atomic ",(0,a.yg)("inlineCode",{parentName:"p"},"modify")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"update")," operations. All operations are guaranteed to be safe for concurrent access."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("em",{parentName:"p"},(0,a.yg)("strong",{parentName:"em"},"Note:"))),(0,a.yg)("p",{parentName:"blockquote"},"While ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef")," provides the functional equivalent of a mutable reference, the value inside the ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef")," should be immutable. For performance reasons ",(0,a.yg)("inlineCode",{parentName:"p"},"ZRef")," is implemented in terms of compare and swap operations rather than synchronization. ",(0,a.yg)("strong",{parentName:"p"},"These operations are not safe for mutable values that do not support concurrent access"),".")))}u.isMDXComponent=!0}}]);