"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[3174],{15680:(e,r,n)=>{n.d(r,{xA:()=>p,yg:()=>g});var t=n(96540);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),l=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},p=function(e){var r=l(e.components);return t.createElement(s.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||a;return n?t.createElement(g,c(c({ref:r},p),{},{components:n})):t.createElement(g,c({ref:r},p))}));function g(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[u]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8068:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=n(58168),o=(n(96540),n(15680));const a={id:"scopedref",title:"ScopedRef: Mutable Reference For Resources",sidebar_label:"ScopedRef"},c=void 0,i={unversionedId:"reference/resource/scopedref",id:"reference/resource/scopedref",title:"ScopedRef: Mutable Reference For Resources",description:"ScopedRef is a resourceful version of Ref data type. So it is a Ref for resourceful effects.",source:"@site/docs/reference/resource/scopedref.md",sourceDirName:"reference/resource",slug:"/reference/resource/scopedref",permalink:"/reference/resource/scopedref",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/resource/scopedref.md",tags:[],version:"current",frontMatter:{id:"scopedref",title:"ScopedRef: Mutable Reference For Resources",sidebar_label:"ScopedRef"},sidebar:"reference-sidebar",previous:{title:"ZKeyedPool",permalink:"/reference/resource/zkeyedpool"},next:{title:"Introduction to ZIO Streams",permalink:"/reference/stream/"}},s={},l=[{value:"Operations",id:"operations",level:2},{value:"Construction",id:"construction",level:2},{value:"Example",id:"example",level:2}],p={toc:l},u="wrapper";function f(e){let{components:r,...n}=e;return(0,o.yg)(u,(0,t.A)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef")," is a resourceful version of ",(0,o.yg)("inlineCode",{parentName:"p"},"Ref")," data type. So it is a ",(0,o.yg)("inlineCode",{parentName:"p"},"Ref")," for resourceful effects."),(0,o.yg)("h2",{id:"operations"},"Operations"),(0,o.yg)("p",null,"There are two basic operations: get and set:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef#get")," returns the current value of the scoped ref.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef#set")," sets the scoped ref to a new value by acquiring the new resource to create a new value of the scoped ref. Setting a new value releases the old resource automatically."))),(0,o.yg)("h2",{id:"construction"},"Construction"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef")," has two constructors:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"object ScopedRef {\n  def make[A](a: => A): ZIO[Scope, Nothing, ScopedRef[A]] = ???\n  def fromAcquire[R, E, A](acquire: ZIO[R, E, A]): ZIO[R with Scope, E, ScopedRef[A]] = ???\n}\n")),(0,o.yg)("p",null,"So we have two options to create a ",(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef"),":"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef.make")," creates a scoped ref from an ordinary value. We can use this constructor when we don't need to acquire a resource to create a value of the scoped ref, for example, when we have a constant value.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef.fromAcquire")," creates a scoped ref from an effect that resourcefully produces a value."))),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef")," is resourceful, so its lifetimes is scoped. Whenever we don't need it anymore, we can release it by using ",(0,o.yg)("inlineCode",{parentName:"p"},"ZIO#scoped")," combinator.")),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)("p",null,"Let's see how changing the value of a ",(0,o.yg)("inlineCode",{parentName:"p"},"ScopedRef")," automatically releases the old resource:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run = for {\n    _ <- ZIO.unit\n    r1 = ZIO.acquireRelease(\n           ZIO\n             .debug("acquiring the first resource")\n             .as(5)\n         )(_ => ZIO.debug("releasing the first resource"))\n    r2 = ZIO.acquireRelease(\n           ZIO\n             .debug("acquiring the second resource")\n             .as(10)\n         )(_ => ZIO.debug("releasing the second resource"))\n    sref <- ScopedRef.fromAcquire(r1)\n    _    <- sref.get.debug\n    _    <- sref.set(r2)\n    _    <- sref.get.debug\n  } yield ()\n}\n')),(0,o.yg)("p",null,"The output:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"acquiring the first resource\n5\nacquiring the second resource\nreleasing the first resource\n10\nreleasing the second resource\n")))}f.isMDXComponent=!0}}]);