"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[49683],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>u});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=s(t),d=i,u=h["".concat(p,".").concat(d)]||h[d]||m[d]||r;return t?a.createElement(u,o(o({ref:n},c),{},{components:t})):a.createElement(u,o({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[h]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},43583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(58168),i=(t(96540),t(15680));const r={id:"bash-and-zsh-completion",title:"Bash and Zsh Completion"},o=void 0,l={unversionedId:"zio-cli/bash-and-zsh-completion",id:"zio-cli/bash-and-zsh-completion",title:"Bash and Zsh Completion",description:"Overview",source:"@site/docs/zio-cli/bash-and-zsh-completion.md",sourceDirName:"zio-cli",slug:"/zio-cli/bash-and-zsh-completion",permalink:"/zio-cli/bash-and-zsh-completion",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-cli/bash-and-zsh-completion.md",tags:[],version:"current",frontMatter:{id:"bash-and-zsh-completion",title:"Bash and Zsh Completion"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO CLI",permalink:"/zio-cli/"},next:{title:"SBT Plugin",permalink:"/zio-cli/sbt-plugin"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"Generating a completion shell script",id:"generating-a-completion-shell-script",level:2},{value:"How Bash and Zsh Completions are Generated",id:"how-bash-and-zsh-completions-are-generated",level:2},{value:"Further Reading",id:"further-reading",level:2}],c={toc:s},h="wrapper";function m(e){let{components:n,...t}=e;return(0,i.yg)(h,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"overview"},"Overview"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"zio-cli")," supports a mechanism for performing tab completion of command line\noptions and arguments in bash and zsh. The approach that ",(0,i.yg)("inlineCode",{parentName:"p"},"zio-cli")," uses to\ncommunicate with the shell tooling for performing tab completion is heavily\ninspired by the excellent Haskell\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/pcapriotti/optparse-applicative#bash-zsh-and-fish-completions"},"optparse-applicative"),"\nlibrary. Every ",(0,i.yg)("inlineCode",{parentName:"p"},"CliApp")," is extended with a few hidden built-in options for\nproviding tab completions to shell environments."),(0,i.yg)("p",null,"In what follows, pretend that your CLI application (called ",(0,i.yg)("inlineCode",{parentName:"p"},"my-cli-app"),") has been\ninstalled into a stable location in your path (such as the ",(0,i.yg)("inlineCode",{parentName:"p"},"~/.local/bin"),"\ndirectory favored by the ",(0,i.yg)("inlineCode",{parentName:"p"},"zio-cli")," installer script)."),(0,i.yg)("h2",{id:"generating-a-completion-shell-script"},"Generating a completion shell script"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"--shell-completion-script")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"--shell-type")," built-in options produce a\nshell script that enables tab completion. In the example below, we generate a\ncompletion script (called ",(0,i.yg)("inlineCode",{parentName:"p"},"completion-script.sh"),"):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"my-cli-app                                       \\\n    --shell-completion-script `which my-cli-app` \\\n    --shell-type bash > completion-script.sh\n")),(0,i.yg)("p",null,"After generating the script, you can quickly enable tab completion via:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"source completion-script.sh\n")),(0,i.yg)("p",null,"Unfortunately, the tab completion will only be enabled within the current shell\nsession. Normally, the output of ",(0,i.yg)("inlineCode",{parentName:"p"},"--shell-completion-script")," should be shipped\nwith the program and copied to the appropriate directory (e.g.,\n",(0,i.yg)("inlineCode",{parentName:"p"},"/etc/bash_completion.d/"),") during program installation."),(0,i.yg)("h2",{id:"how-bash-and-zsh-completions-are-generated"},"How Bash and Zsh Completions are Generated"),(0,i.yg)("p",null,"The shell completion scripts register an event handler that fires whenever\n",(0,i.yg)("inlineCode",{parentName:"p"},"my-cli-app")," is the first term at the terminal prompt and the tab key is\npressed. This event handler sends information about the terminal contents and\ncursor position back to ",(0,i.yg)("inlineCode",{parentName:"p"},"my-cli-app")," using another built-in option called\n",(0,i.yg)("inlineCode",{parentName:"p"},"--shell-completion-index")," and some special environment variables\n(",(0,i.yg)("inlineCode",{parentName:"p"},"COMP_WORD_0"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"COMP_WORD_1"),", ...)."),(0,i.yg)("p",null,"When ",(0,i.yg)("inlineCode",{parentName:"p"},"my-cli-app")," receives these values, it runs a completion algorithm and\nprints the completion terms to the console (one line per completion term). The\nconsole output feeds back into the shell machinery, which renders the completion\nresults in the terminal."),(0,i.yg)("p",null,"For example, when the user types the following in the terminal"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"$ my-cli-app foo bar baz\n")),(0,i.yg)("p",null,'and then moves the cursor over "foo" and hits the tab key, ',(0,i.yg)("inlineCode",{parentName:"p"},"my-cli-app")," is called\nas follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"COMP_WORD_0=my-cli-app     \\\nCOMP_WORD_1=foo            \\\nCOMP_WORD_2=bar            \\\nCOMP_WORD_3=baz            \\\nmy-cli-app                 \\\n--shell-completion-index 1 \\\n--shell-type bash\n")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"COMP_WORD_")," prefix of these environment variables is directly inspired by\nthe ",(0,i.yg)("inlineCode",{parentName:"p"},"COMP_WORD")," array-valued Bash variable that is part of its\n",(0,i.yg)("a",{parentName:"p",href:"https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html"},"programmable completion system"),".\nUnfortunately, array-valued variables cannot be used as environment variables,\nso our approach instead uses one variable per term in the array."),(0,i.yg)("h2",{id:"further-reading"},"Further Reading"),(0,i.yg)("p",null,"The ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/pcapriotti/optparse-applicative#bash-zsh-and-fish-completions"},"optparse-applicative documentation"),"\nis an excellent resource that may help to clarify the implementation above."))}m.isMDXComponent=!0}}]);