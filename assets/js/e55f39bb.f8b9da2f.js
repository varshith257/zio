"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[83388],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>u});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=s(t),m=o,u=g["".concat(p,".").concat(m)]||g[m]||d[m]||a;return t?r.createElement(u,i(i({ref:n},c),{},{components:t})):r.createElement(u,i({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[g]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},96484:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(58168),o=(t(96540),t(15680));const a={id:"console",title:"Console"},i=void 0,l={unversionedId:"reference/services/console",id:"version-1.0.18/reference/services/console",title:"Console",description:"Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console.",source:"@site/versioned_docs/version-1.0.18/reference/services/console.md",sourceDirName:"reference/services",slug:"/reference/services/console",permalink:"/1.0.18/reference/services/console",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/services/console.md",tags:[],version:"1.0.18",frontMatter:{id:"console",title:"Console"},sidebar:"overview_sidebar",previous:{title:"Introduction",permalink:"/1.0.18/reference/services/"},next:{title:"Clock",permalink:"/1.0.18/reference/services/clock"}},p={},s=[],c={toc:s},g="wrapper";function d(e){let{components:n,...t}=e;return(0,o.yg)(g,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console."),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Function"),(0,o.yg)("th",{parentName:"tr",align:null},"Input Type"),(0,o.yg)("th",{parentName:"tr",align:null},"Output Type"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"putStr")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"URIO[Console, Unit]"))),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"putStrErr")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"URIO[Console, Unit]"))),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"putStrLn")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"URIO[Console, Unit]"))),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"putStrLnErr")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"URIO[Console, Unit]"))),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"getStrLn")),(0,o.yg)("td",{parentName:"tr",align:null}),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"ZIO[Console, IOException, String]"))))),(0,o.yg)("p",null,"All functions of console service are effectful, this means they are just descriptions of reading/writing from/to the console. "),(0,o.yg)("p",null,"As ZIO data type support monadic operations, we can compose these functions with for-comprehension which helps us to write our program pretty much like an imperative program:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import java.io.IOException\n\nimport zio.ZIO\nimport zio.console._\n\nobject MyHelloApp extends zio.App {\n  val program: ZIO[Console, IOException, Unit] = for {\n    _ <- putStrLn("Hello, what is you name?")\n    name <- getStrLn\n    _ <- putStrLn(s"Hello $name, welcome to ZIO!")\n  } yield ()\n\n  override def run(args: List[String]) = program.exitCode\n}\n')),(0,o.yg)("p",null,"Note again, every line of our ",(0,o.yg)("inlineCode",{parentName:"p"},"program")," are descriptions, not statements. As we can see the type of our ",(0,o.yg)("inlineCode",{parentName:"p"},"program")," is ",(0,o.yg)("inlineCode",{parentName:"p"},"ZIO[Console, IOException, Unit]"),", it means to run ",(0,o.yg)("inlineCode",{parentName:"p"},"program")," we need the ",(0,o.yg)("inlineCode",{parentName:"p"},"Console")," service as an environment, it may fail due to failure of ",(0,o.yg)("inlineCode",{parentName:"p"},"getStrLn")," and it will produce ",(0,o.yg)("inlineCode",{parentName:"p"},"Unit")," value."))}d.isMDXComponent=!0}}]);