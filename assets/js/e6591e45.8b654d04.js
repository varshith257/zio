"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[60499],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>h});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(t),u=a,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return t?r.createElement(h,l(l({ref:n},d),{},{components:t})):r.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},90341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(58168),a=(t(96540),t(15680));const o={id:"hello-world",title:"Hello World Example",sidebar_label:"Hello World"},l=void 0,i={unversionedId:"zio-http/examples/hello-world",id:"zio-http/examples/hello-world",title:"Hello World Example",description:"Simple Example",source:"@site/docs/zio-http/examples/hello-world.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/hello-world",permalink:"/zio-http/examples/hello-world",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/hello-world.md",tags:[],version:"current",frontMatter:{id:"hello-world",title:"Hello World Example",sidebar_label:"Hello World"},sidebar:"ecosystem-sidebar",previous:{title:"Examples",permalink:"/zio-http/examples/"},next:{title:"HTTP Client-Server",permalink:"/zio-http/examples/http-client-server"}},s={},p=[{value:"Simple Example",id:"simple-example",level:2},{value:"Advanced Example",id:"advanced-example",level:2},{value:"Advanced with CORS Example",id:"advanced-with-cors-example",level:2},{value:"Advanced with Middlewares Example",id:"advanced-with-middlewares-example",level:2}],d={toc:p},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"simple-example"},"Simple Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorld.scala"',title:'"zio-http-example/src/main/scala/example/HelloWorld.scala"'},'package example\n\nimport zio._\n\nimport zio.http._\n\nobject HelloWorld extends ZIOAppDefault {\n  // Responds with plain text\n  val homeRoute =\n    Method.GET / Root -> handler(Response.text("Hello World!"))\n\n  // Responds with JSON\n  val jsonRoute =\n    Method.GET / "json" -> handler(Response.json("""{"greetings": "Hello World!"}"""))\n\n  // Create HTTP route\n  val app = Routes(homeRoute, jsonRoute)\n\n  // Run it like any simple app\n  override val run = Server.serve(app).provide(Server.default)\n}\n')),(0,a.yg)("h2",{id:"advanced-example"},"Advanced Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldAdvanced.scala"',title:'"zio-http-example/src/main/scala/example/HelloWorldAdvanced.scala"'},'package example\n\nimport scala.util.Try\n\nimport zio._\n\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.NettyConfig.LeakDetectionLevel\n\nobject HelloWorldAdvanced extends ZIOAppDefault {\n  // Set a port\n  val PORT = 58080\n\n  val fooBar =\n    Routes(\n      Method.GET / "foo" -> Handler.from(Response.text("bar")),\n      Method.GET / "bar" -> Handler.from(Response.text("foo")),\n    )\n\n  val app = Routes(\n    Method.GET / "random" -> handler(Random.nextString(10).map(Response.text(_))),\n    Method.GET / "utc"    -> handler(Clock.currentDateTime.map(s => Response.text(s.toString))),\n  )\n\n  val run = ZIOAppArgs.getArgs.flatMap { args =>\n    // Configure thread count using CLI\n    val nThreads: Int = args.headOption.flatMap(x => Try(x.toInt).toOption).getOrElse(0)\n\n    val config           = Server.Config.default\n      .port(PORT)\n    val nettyConfig      = NettyConfig.default\n      .leakDetection(LeakDetectionLevel.PARANOID)\n      .maxThreads(nThreads)\n    val configLayer      = ZLayer.succeed(config)\n    val nettyConfigLayer = ZLayer.succeed(nettyConfig)\n\n    (fooBar ++ app)\n      .serve[Any]\n      .provide(configLayer, nettyConfigLayer, Server.customized)\n  }\n}\n')),(0,a.yg)("h2",{id:"advanced-with-cors-example"},"Advanced with CORS Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldWithCORS.scala"',title:'"zio-http-example/src/main/scala/example/HelloWorldWithCORS.scala"'},'package example\nimport zio._\n\nimport zio.http.Header.{AccessControlAllowOrigin, Origin}\nimport zio.http.Middleware.{CorsConfig, cors}\nimport zio.http._\nimport zio.http.codec.PathCodec\nimport zio.http.template._\n\nobject HelloWorldWithCORS extends ZIOAppDefault {\n\n  val config: CorsConfig =\n    CorsConfig(\n      allowedOrigin = {\n        case origin if origin == Origin.parse("http://localhost:3000").toOption.get =>\n          Some(AccessControlAllowOrigin.Specific(origin))\n        case _                                                                      => None\n      },\n    )\n\n  val backend: Routes[Any, Response] =\n    Routes(\n      Method.GET / "json" -> handler(Response.json("""{"message": "Hello World!"}""")),\n    ) @@ cors(config)\n\n  val frontend: Routes[Any, Response] =\n    Routes(\n      Method.GET / PathCodec.empty -> handler(\n        Response.html(\n          html(\n            p("Message: ", output()),\n            script("""\n                     |// This runs on http://localhost:3000\n                     |fetch("http://localhost:8080/json")\n                     |  .then((res) => res.json())\n                     |  .then((res) => document.querySelector("output").textContent = res.message);\n                     |""".stripMargin),\n          ),\n        ),\n      ),\n    )\n\n  val frontEndServer = Server.serve(frontend).provide(Server.defaultWithPort(3000))\n  val backendServer  = Server.serve(backend).provide(Server.defaultWithPort(8080))\n\n  val run = frontEndServer.zipPar(backendServer)\n}\n')),(0,a.yg)("h2",{id:"advanced-with-middlewares-example"},"Advanced with Middlewares Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/HelloWorldWithMiddlewares.scala"',title:'"zio-http-example/src/main/scala/example/HelloWorldWithMiddlewares.scala"'},'package example\n\nimport java.util.concurrent.TimeUnit\n\nimport zio._\n\nimport zio.http._\n\nobject HelloWorldWithMiddlewares extends ZIOAppDefault {\n\n  val routes: Routes[Any, Response] = Routes(\n    // this will return result instantly\n    Method.GET / "text"         -> handler(ZIO.succeed(Response.text("Hello World!"))),\n    // this will return result after 5 seconds, so with 3 seconds timeout it will fail\n    Method.GET / "long-running" -> handler(ZIO.succeed(Response.text("Hello World!")).delay(5 seconds)),\n  )\n\n  val serverTime = Middleware.patchZIO(_ =>\n    for {\n      currentMilliseconds <- Clock.currentTime(TimeUnit.MILLISECONDS)\n      header = Response.Patch.addHeader("X-Time", currentMilliseconds.toString)\n    } yield header,\n  )\n  val middlewares =\n    // print debug info about request and response\n    Middleware.debug ++\n      // close connection if request takes more than 3 seconds\n      Middleware.timeout(3 seconds) ++\n      // add static header\n      Middleware.addHeader("X-Environment", "Dev") ++\n      // add dynamic header\n      serverTime\n\n  // Run it like any simple app\n  val run = Server.serve(routes @@ middlewares).provide(Server.default)\n}\n')))}m.isMDXComponent=!0}}]);