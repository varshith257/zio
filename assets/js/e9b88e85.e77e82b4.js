"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[69699],{15680:(e,n,r)=>{r.d(n,{xA:()=>d,yg:()=>y});var i=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function t(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,i,o=function(e,n){if(null==e)return{};var r,i,o={},t=Object.keys(e);for(i=0;i<t.length;i++)r=t[i],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(i=0;i<t.length;i++)r=t[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=i.createContext({}),p=function(e){var n=i.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},d=function(e){var n=p(e.components);return i.createElement(c.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var r=e.components,o=e.mdxType,t=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),s=p(r),m=o,y=s["".concat(c,".").concat(m)]||s[m]||u[m]||t;return r?i.createElement(y,l(l({ref:n},d),{},{components:r})):i.createElement(y,l({ref:n},d))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var t=r.length,l=new Array(t);l[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[s]="string"==typeof e?e:o,l[1]=a;for(var p=2;p<t;p++)l[p]=r[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},13521:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>p});var i=r(58168),o=(r(96540),r(15680));const t={id:"compiler-performance",title:"Compiler performance"},l=void 0,a={unversionedId:"zio-quill/compiler-performance",id:"zio-quill/compiler-performance",title:"Compiler performance",description:"Quill will probably make the slow scala compiler even slower, since a lot of additional Parsing, Typechecking, Implicit resolution works introduced to expand a Query.",source:"@site/docs/zio-quill/compiler-performance.md",sourceDirName:"zio-quill",slug:"/zio-quill/compiler-performance",permalink:"/zio-quill/compiler-performance",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-quill/compiler-performance.md",tags:[],version:"current",frontMatter:{id:"compiler-performance",title:"Compiler performance"},sidebar:"ecosystem-sidebar",previous:{title:"Logging",permalink:"/zio-quill/logging"},next:{title:"Additional Resources",permalink:"/zio-quill/additional-resources"}},c={},p=[{value:"Use <code>-Yprofile-trace</code> scalac options.",id:"use--yprofile-trace-scalac-options",level:2},{value:"Split large module into multiple submodules",id:"split-large-module-into-multiple-submodules",level:2},{value:"Define decoder/encoder directly instead of <code>MappedEncoding</code>",id:"define-decoderencoder-directly-instead-of-mappedencoding",level:2},{value:"Share <code>QueryMeta</code> instance",id:"share-querymeta-instance",level:2}],d={toc:p},s="wrapper";function u(e){let{components:n,...r}=e;return(0,o.yg)(s,(0,i.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Quill will probably make the slow scala compiler even slower, since a lot of additional ",(0,o.yg)("inlineCode",{parentName:"p"},"Parsing"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Typechecking"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"Implicit resolution")," works introduced to expand a Query."),(0,o.yg)("p",null,"Following tips may help improving compilation time."),(0,o.yg)("h2",{id:"use--yprofile-trace-scalac-options"},"Use ",(0,o.yg)("inlineCode",{parentName:"h2"},"-Yprofile-trace")," scalac options."),(0,o.yg)("p",null,"With ",(0,o.yg)("inlineCode",{parentName:"p"},"-Yprofile-trace")," option, a chrome trace file will be produced after compilation.\nIt will help figure out what slowing down the compiler."),(0,o.yg)("p",null,"Note, this option need some tweak if you are running on java 9 or newer version."),(0,o.yg)("h2",{id:"split-large-module-into-multiple-submodules"},"Split large module into multiple submodules"),(0,o.yg)("p",null,"Since scalac is not fully parallelized, split into independent submodules can significantly reduce build time on multi-core cpu."),(0,o.yg)("h2",{id:"define-decoderencoder-directly-instead-of-mappedencoding"},"Define decoder/encoder directly instead of ",(0,o.yg)("inlineCode",{parentName:"h2"},"MappedEncoding")),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"MappedEncoding")," introduce more implicit resolutions, which may slow down compiler."),(0,o.yg)("p",null,"It is possible to define instance directly."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"case class FooId(id: Long)\nimplicit val fooIdEncoder: Encoder[FooId] = mappedEncoder(MappedEncoding[FooId, Long](_.id), longEncoder)\nimplicit val fooIdDecoder: Decoder[FooId] = mappedDecoder(MappedEncoding[Long, FooId](FooId(_)), longDecoder)\n")),(0,o.yg)("h2",{id:"share-querymeta-instance"},"Share ",(0,o.yg)("inlineCode",{parentName:"h2"},"QueryMeta")," instance"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"QueryMeta")," generation requires ",(0,o.yg)("inlineCode",{parentName:"p"},"Decoder")," resolution, tree generation, typechecking, etc which can be very slow."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"QueryMeta")," is not shared by default, so define shared ",(0,o.yg)("inlineCode",{parentName:"p"},"QueryMeta")," instance may reduce build time."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},"val ctx = SqlMirrorContext(MirrorIdiom, Literal)\n\n// Prevent using default macro generated query meta instance.\n// Use `_` instead of `*` if `-Xsource:3` not enabled.\nimport ctx.{ materializeQueryMeta => *, * }\n\n // Instance type must not be specified here, otherwise it will become dynamic query.\nimplicit val orderQueryMeta = ctx.materializeQueryMeta[Order]\n\nctx.run {\n  query[Order]\n}\n")),(0,o.yg)("p",null,"Note, to use ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/scala/scala/pull/10439"},(0,o.yg)("inlineCode",{parentName:"a"},"-Xsource:3"))," scalac options, ",(0,o.yg)("inlineCode",{parentName:"p"},"-Xmigration")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"-Wconf:cat=scala3-migration:w")," is required."),(0,o.yg)("p",null,"Otherwise, it will not compile due to lack of explicit type of implicit definition."))}u.isMDXComponent=!0}}]);