"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[13069],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>g});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?t.createElement(g,i(i({ref:n},p),{},{components:r})):t.createElement(g,i({ref:n},p))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6660:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=r(58168),a=(r(96540),r(15680));const o={id:"basics",title:"Basics"},i=void 0,s={unversionedId:"zio-process/basics",id:"zio-process/basics",title:"Basics",description:"To build a description of a command:",source:"@site/docs/zio-process/basics.md",sourceDirName:"zio-process",slug:"/zio-process/basics",permalink:"/zio-process/basics",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-process/basics.md",tags:[],version:"current",frontMatter:{id:"basics",title:"Basics"},sidebar:"ecosystem-sidebar",previous:{title:"Getting Started",permalink:"/zio-process/getting-started"},next:{title:"Piping",permalink:"/zio-process/piping"}},l={},c=[{value:"Transforming output",id:"transforming-output",level:2},{value:"List of lines",id:"list-of-lines",level:3},{value:"Stream of lines",id:"stream-of-lines",level:3},{value:"String",id:"string",level:3},{value:"Exit code",id:"exit-code",level:3},{value:"Kill a process",id:"kill-a-process",level:3},{value:"Stream of bytes",id:"stream-of-bytes",level:3},{value:"Access stdout and stderr separately",id:"access-stdout-and-stderr-separately",level:3},{value:"Error handling",id:"error-handling",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...r}=e;return(0,a.yg)(d,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"To build a description of a command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'val command = Command("cat", "file.txt")\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"command.run")," will return a handle to the process as ",(0,a.yg)("inlineCode",{parentName:"p"},"ZIO[Blocking, CommandError, Process]"),". Alternatively, instead of\nflat-mapping and calling methods on ",(0,a.yg)("inlineCode",{parentName:"p"},"Process"),", there are convenience methods on ",(0,a.yg)("inlineCode",{parentName:"p"},"Command")," itself for some common operations:"),(0,a.yg)("h2",{id:"transforming-output"},"Transforming output"),(0,a.yg)("h3",{id:"list-of-lines"},"List of lines"),(0,a.yg)("p",null,"To obtain the output as a list of lines with the type ",(0,a.yg)("inlineCode",{parentName:"p"},"ZIO[Blocking, CommandError, Chunk[String]]")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"command.lines\n")),(0,a.yg)("h3",{id:"stream-of-lines"},"Stream of lines"),(0,a.yg)("p",null,"To obtain the output as a stream of lines with the type ",(0,a.yg)("inlineCode",{parentName:"p"},"ZStream[Blocking, CommandError, String]")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"command.linesStream\n")),(0,a.yg)("p",null,"This is particularly useful when dealing with large files and so on as to not use an unbounded amount of memory."),(0,a.yg)("h3",{id:"string"},"String"),(0,a.yg)("p",null,"If you don't need a structured type, you can return the entire output as a plain string:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"command.string\n")),(0,a.yg)("p",null,"This defaults to UTF-8. To use a different encoding, specify the charset:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"command.string(StandardCharsets.UTF_16)\n")),(0,a.yg)("h3",{id:"exit-code"},"Exit code"),(0,a.yg)("p",null,"When you don't care about the output (or there is no output), you can return just the exit code."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"command.exitCode\n")),(0,a.yg)("p",null,"Note that ",(0,a.yg)("inlineCode",{parentName:"p"},"Command#exitCode")," will return the exit code in the ZIO's success channel whether it's 0 or not.\nIf you want non-zero exit codes to be considered an error, use ",(0,a.yg)("inlineCode",{parentName:"p"},"Command#successfulExitCode")," instead. This will\nreturn a ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandError.NonZeroErrorCode")," in ZIO's error channel when the exit code is not 0:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'for {\n  exitCode  <- Command("java", "--non-existent-flag").successfulExitCode\n  // Won\'t reach this 2nd command since the previous command failed with `CommandError.NonZeroErrorCode`:\n  exitCode2 <- Command("java", "--non-existent-flag").successfulExitCode\n} yield ()\n')),(0,a.yg)("h3",{id:"kill-a-process"},"Kill a process"),(0,a.yg)("p",null,"You can kill a process by calling ",(0,a.yg)("inlineCode",{parentName:"p"},"interrupt")," on the running ",(0,a.yg)("inlineCode",{parentName:"p"},"Fiber"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'for {\n  fiber <- Command("long-running-process").exitCode.forkDaemon\n  _     <- ZIO.sleep(5.seconds)\n  _     <- fiber.interrupt\n  _     <- fiber.join\n} yield ()\n')),(0,a.yg)("p",null,"If you use ",(0,a.yg)("inlineCode",{parentName:"p"},"Command#run")," then you receive a handle to underlying ",(0,a.yg)("inlineCode",{parentName:"p"},"Process")," immediately, which means ZIO's built-in\ninterruption model no longer applies. In this case, if you want to kill a process before it's done terminating,\nyou can use ",(0,a.yg)("inlineCode",{parentName:"p"},"kill")," (the Unix SIGTERM equivalent) or ",(0,a.yg)("inlineCode",{parentName:"p"},"killForcibly")," (the Unix SIGKILL equivalent):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'for {\n  process <- Command("long-running-process").run\n  _       <- ZIO.sleep(5.seconds)\n  _       <- process.kill\n} yield ()\n')),(0,a.yg)("h3",{id:"stream-of-bytes"},"Stream of bytes"),(0,a.yg)("p",null,"If you need lower-level access to the output's stream of bytes, you can access them directly like so:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},"command.stream\n")),(0,a.yg)("h3",{id:"access-stdout-and-stderr-separately"},"Access stdout and stderr separately"),(0,a.yg)("p",null,"There are times when you need to process the output of stderr as well."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'for {\n  process <- Command("./some-process").run\n  stdout  <- process.stdout.string\n  stderr  <- process.stderr.string\n  // ...\n} yield ()\n')),(0,a.yg)("h2",{id:"error-handling"},"Error handling"),(0,a.yg)("p",null,"Errors are represented as ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandError")," in the error channel instead of ",(0,a.yg)("inlineCode",{parentName:"p"},"IOException"),". Since ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandError")," is an ADT,\nyou can pattern match on it and handle specific cases rather than trying to parse the guts of ",(0,a.yg)("inlineCode",{parentName:"p"},"IOException.getMessage"),"\nyourself."),(0,a.yg)("p",null,"For example, if you want to fallback to running a different program if it doesn't exist on the host machine, you can\nmatch on ",(0,a.yg)("inlineCode",{parentName:"p"},"CommandError.ProgramNotFound"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'Command("some-program-that-may-not-exit").string.catchSome {\n  case CommandError.ProgramNotFound(_) => Command("fallback-program").string\n}\n')))}u.isMDXComponent=!0}}]);