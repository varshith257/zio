"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[93458],{15680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>d});var a=t(96540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),c=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return a.createElement(l.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},f=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=n,d=p["".concat(l,".").concat(f)]||p[f]||m[f]||i;return t?a.createElement(d,o(o({ref:r},u),{},{components:t})):a.createElement(d,o({ref:r},u))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=f;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},82663:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(58168),n=(t(96540),t(15680));const i={id:"resourceful-streams",title:"Resourceful Streams"},o=void 0,s={unversionedId:"reference/stream/zstream/resourceful-streams",id:"reference/stream/zstream/resourceful-streams",title:"Resourceful Streams",description:"Most of the constructors of ZStream have a special variant to lift a scoped resource to a Stream (e.g. ZStream.fromReaderScoped). By using these constructors, we are creating streams that are resource-safe. Before creating a stream, they acquire the resource, and after usage; they close the stream.",source:"@site/docs/reference/stream/zstream/resourceful-streams.md",sourceDirName:"reference/stream/zstream",slug:"/reference/stream/zstream/resourceful-streams",permalink:"/reference/stream/zstream/resourceful-streams",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/resourceful-streams.md",tags:[],version:"current",frontMatter:{id:"resourceful-streams",title:"Resourceful Streams"},sidebar:"reference-sidebar",previous:{title:"Creating ZIO Streams",permalink:"/reference/stream/zstream/creating-zio-streams"},next:{title:"Operations",permalink:"/reference/stream/zstream/operations"}},l={},c=[{value:"Acquire Release",id:"acquire-release",level:2},{value:"Finalization",id:"finalization",level:2},{value:"Ensuring",id:"ensuring",level:2}],u={toc:c},p="wrapper";function m(e){let{components:r,...t}=e;return(0,n.yg)(p,(0,a.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Most of the constructors of ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream")," have a special variant to lift a scoped resource to a Stream (e.g. ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream.fromReaderScoped"),"). By using these constructors, we are creating streams that are resource-safe. Before creating a stream, they acquire the resource, and after usage; they close the stream."),(0,n.yg)("p",null,"ZIO Stream also has ",(0,n.yg)("inlineCode",{parentName:"p"},"acquireRelease")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"finalizer")," constructors which are similar to ",(0,n.yg)("inlineCode",{parentName:"p"},"ZIO.acquireRelease"),". They allow us to clean up or finalizing before the stream ends:"),(0,n.yg)("h2",{id:"acquire-release"},"Acquire Release"),(0,n.yg)("p",null,"We can provide ",(0,n.yg)("inlineCode",{parentName:"p"},"acquire")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"release")," actions to ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream.acquireReleaseWith")," to create a resourceful stream:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"object ZStream {\n  def acquireReleaseWith[R, E, A](\n    acquire: ZIO[R, E, A]\n  )(\n    release: A => URIO[R, Any]\n  ): ZStream[R, E, A] = ???\n")),(0,n.yg)("p",null,"Let's see an example of using an acquire release when reading a file. In this example, by providing ",(0,n.yg)("inlineCode",{parentName:"p"},"acquire")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"release")," actions to ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream.acquireReleaseWith"),", it gives us a scoped stream of ",(0,n.yg)("inlineCode",{parentName:"p"},"BufferedSource"),". As this stream is scoped, we can convert that ",(0,n.yg)("inlineCode",{parentName:"p"},"BufferedSource")," to a stream of its lines and then run it, without worrying about resource leakage:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'val lines: ZStream[Any, Throwable, String] =\n  ZStream\n    .acquireReleaseWith(\n      ZIO.attempt(Source.fromFile("file.txt")) <* printLine("The file was opened.")\n    )(x => ZIO.succeed(x.close()) <* printLine("The file was closed.").orDie)\n    .flatMap { is =>\n      ZStream.fromIterator(is.getLines())\n    }\n')),(0,n.yg)("h2",{id:"finalization"},"Finalization"),(0,n.yg)("p",null,"We can also create a stream that never fails and define a finalizer for it, so that finalizer will be executed before that stream ends."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},"object ZStream {\n  def finalizer[R](\n    finalizer: URIO[R, Any]\n  ): ZStream[R, Nothing, Any] = ???\n}\n")),(0,n.yg)("p",null,"It is useful when need to add a finalizer to an existing stream. Assume we need to clean up the temporary directory after our streaming application ends:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.Console._\n\ndef application: ZStream[Any, IOException, Unit] = ZStream.fromZIO(printLine("Application Logic."))\ndef deleteDir(dir: Path): ZIO[Any, IOException, Unit] = printLine("Deleting file.")\n\nval myApp: ZStream[Any, IOException, Any] =\n  application ++ ZStream.finalizer(\n    (deleteDir(Paths.get("tmp")) *>\n      printLine("Temporary directory was deleted.")).orDie\n  )\n')),(0,n.yg)("h2",{id:"ensuring"},"Ensuring"),(0,n.yg)("p",null,"We might want to run some code after the execution of the stream's finalization. To do so, we can use the ",(0,n.yg)("inlineCode",{parentName:"p"},"ZStream#ensuring")," operator:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'ZStream\n  .finalizer(Console.printLine("Finalizing the stream").orDie)\n  .ensuring(\n    printLine("Doing some other works after stream\'s finalization").orDie\n  )\n  \n// Output:\n// Finalizing the stream\n// Doing some other works after stream\'s finalization\n')))}m.isMDXComponent=!0}}]);