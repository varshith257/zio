"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71139],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>f});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[u]="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(58168),o=(n(96540),n(15680));const i={id:"cli",title:"CLI Client-Server Examples",sidebar_label:"CLI"},s=void 0,a={unversionedId:"zio-http/examples/cli",id:"zio-http/examples/cli",title:"CLI Client-Server Examples",description:"",source:"@site/docs/zio-http/examples/cli.md",sourceDirName:"zio-http/examples",slug:"/zio-http/examples/cli",permalink:"/zio-http/examples/cli",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/cli.md",tags:[],version:"current",frontMatter:{id:"cli",title:"CLI Client-Server Examples",sidebar_label:"CLI"},sidebar:"ecosystem-sidebar",previous:{title:"Graceful Shutdown",permalink:"/zio-http/examples/graceful-shutdown"},next:{title:"Concrete Entity",permalink:"/zio-http/examples/concrete-entity"}},p={},c=[],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala",metastring:'title="zio-http-example/src/main/scala/example/endpoint/CliExamples.scala"',title:'"zio-http-example/src/main/scala/example/endpoint/CliExamples.scala"'},'package example.endpoint\n\nimport zio._\nimport zio.cli._\n\nimport zio.schema._\nimport zio.schema.annotation.description\n\nimport zio.http.Header.Location\nimport zio.http._\nimport zio.http.codec._\nimport zio.http.endpoint.cli._\nimport zio.http.endpoint.{Endpoint, EndpointExecutor}\n\nfinal case class User(\n  @description("The unique identifier of the User")\n  id: Int,\n  @description("The user\'s name")\n  name: String,\n  @description("The user\'s email")\n  email: Option[String],\n)\nobject User {\n  implicit val schema: Schema[User] = DeriveSchema.gen[User]\n}\nfinal case class Post(\n  @description("The unique identifier of the User")\n  userId: Int,\n  @description("The unique identifier of the Post")\n  postId: Int,\n  @description("The post\'s contents")\n  contents: String,\n)\nobject Post {\n  implicit val schema: Schema[Post] = DeriveSchema.gen[Post]\n}\n\ntrait TestCliEndpoints {\n\n  val getUser =\n    Endpoint(Method.GET / "users" / int("userId") ?? Doc.p("The unique identifier of the user"))\n      .header(HeaderCodec.location ?? Doc.p("The user\'s location"))\n      .out[User] ?? Doc.p("Get a user by ID")\n\n  val getUserPosts =\n    Endpoint(\n      Method.GET /\n        "users" / int("userId") ?? Doc.p("The unique identifier of the user") /\n        "posts" / int("postId") ?? Doc.p("The unique identifier of the post"),\n    )\n      .query(\n        HttpCodec.query[String]("user-name") ?? Doc.p(\n          "The user\'s name",\n        ),\n      )\n      .out[List[Post]] ?? Doc.p("Get a user\'s posts by userId and postId")\n\n  val createUser =\n    Endpoint(Method.POST / "users")\n      .in[User]\n      .out[String] ?? Doc.p("Create a new user")\n}\n\nobject TestCliApp extends zio.cli.ZIOCliDefault with TestCliEndpoints {\n  val cliApp =\n    HttpCliApp\n      .fromEndpoints(\n        name = "users-mgmt",\n        version = "0.0.1",\n        summary = HelpDoc.Span.text("Users management CLI"),\n        footer = HelpDoc.p("Copyright 2023"),\n        host = "localhost",\n        port = 8080,\n        endpoints = Chunk(getUser, getUserPosts, createUser),\n        cliStyle = true,\n      )\n      .cliApp\n}\n\nobject TestCliServer extends zio.ZIOAppDefault with TestCliEndpoints {\n  val getUserRoute =\n    getUser.implementHandler {\n      Handler.fromFunctionZIO { case (id, _) =>\n        ZIO.succeed(User(id, "Juanito", Some("juanito@test.com"))).debug("Hello")\n      }\n    }\n\n  val getUserPostsRoute =\n    getUserPosts.implementHandler {\n      Handler.fromFunction { case (userId, postId, name) =>\n        List(Post(userId, postId, name))\n      }\n    }\n\n  val createUserRoute =\n    createUser.implementHandler {\n      Handler.fromFunction { user =>\n        user.name\n      }\n    }\n\n  val routes = Routes(getUserRoute, getUserPostsRoute, createUserRoute) @@ Middleware.debug\n\n  val run = Server.serve(routes).provide(Server.default)\n}\n\nobject TestCliClient extends zio.ZIOAppDefault with TestCliEndpoints {\n  val run =\n    clientExample\n      .provide(\n        EndpointExecutor.make(serviceName = "test"),\n        Client.default,\n      )\n\n  def clientExample: URIO[EndpointExecutor[Any, Unit], Unit] =\n    for {\n      executor <- ZIO.service[EndpointExecutor[Any, Unit]]\n      _        <- ZIO.scoped(executor(getUser(42, Location.parse("some-location").toOption.get))).debug("result1")\n      _        <- ZIO.scoped(executor(getUserPosts(42, 200, "adam")).debug("result2"))\n      _        <- ZIO.scoped(executor(createUser(User(2, "john", Some("john@test.com"))))).debug("result3")\n    } yield ()\n\n}\n')))}d.isMDXComponent=!0}}]);