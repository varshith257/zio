"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[83055],{15680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>g});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),p=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=p(e.components);return t.createElement(l.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},y=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),y=r,g=u["".concat(l,".").concat(y)]||u[y]||m[y]||i;return n?t.createElement(g,s(s({ref:a},d),{},{components:n})):t.createElement(g,s({ref:a},d))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=y;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},97133:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var t=n(58168),r=(n(96540),n(15680));const i={id:"request",title:"Request"},s=void 0,o={unversionedId:"zio-http/reference/request",id:"zio-http/reference/request",title:"Request",description:"ZIO HTTP Request is designed in the simplest way possible to decode an HTTP Request into a ZIO HTTP request. It supports all HTTP request methods (as defined in RFC2616 ) and headers along with custom methods and headers.",source:"@site/docs/zio-http/reference/request.md",sourceDirName:"zio-http/reference",slug:"/zio-http/reference/request",permalink:"/zio-http/reference/request",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/reference/request.md",tags:[],version:"current",frontMatter:{id:"request",title:"Request"},sidebar:"ecosystem-sidebar",previous:{title:"Request Handler",permalink:"/zio-http/reference/handler"},next:{title:"Response",permalink:"/zio-http/reference/response/"}},l={},p=[{value:"Accessing Incoming Request",id:"accessing-incoming-request",level:2},{value:"Creating a Request",id:"creating-a-request",level:2},{value:"Request with Query Params",id:"request-with-query-params",level:2},{value:"Operations",id:"operations",level:2},{value:"Leading/Trailing Slash",id:"leadingtrailing-slash",level:3},{value:"Patching Requests",id:"patching-requests",level:3},{value:"Request Headers",id:"request-headers",level:3},{value:"Request Body",id:"request-body",level:3},{value:"Retrieving Query Parameters",id:"retrieving-query-parameters",level:3},{value:"Modifying Query Parameters",id:"modifying-query-parameters",level:3},{value:"Retrieving URL/Path",id:"retrieving-urlpath",level:3},{value:"Retrieving Cookies and Flashes",id:"retrieving-cookies-and-flashes",level:3},{value:"Client-side Example",id:"client-side-example",level:2}],d={toc:p},u="wrapper";function m(e){let{components:a,...n}=e;return(0,r.yg)(u,(0,t.A)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"ZIO HTTP")," ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," is designed in the simplest way possible to decode an HTTP Request into a ZIO HTTP request. It supports all HTTP request methods (as defined in ",(0,r.yg)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc2616"},"RFC2616")," ) and headers along with custom methods and headers."),(0,r.yg)("h2",{id:"accessing-incoming-request"},"Accessing Incoming Request"),(0,r.yg)("p",null,"To access the incoming request, we can use a ",(0,r.yg)("inlineCode",{parentName:"p"},"Handler")," which takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," as input and returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"Response"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nRoutes(\n  Method.POST / "echo" ->\n    handler { (req: Request) => \n      req.body.asString(Charsets.Utf8).map(Response.text(_)).sandbox \n    }\n)\n')),(0,r.yg)("p",null,"To learn more about handlers, please refer to the ",(0,r.yg)("a",{parentName:"p",href:"/zio-http/reference/handler"},"Handler")," section."),(0,r.yg)("h2",{id:"creating-a-request"},"Creating a Request"),(0,r.yg)("p",null,"The default constructor of ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," takes the following parameters as input: ",(0,r.yg)("inlineCode",{parentName:"p"},"version"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"method"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"url"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"headers"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"body"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"remoteAddress"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"final case class Request(\n  version: Version = Version.Default,\n  method: Method = Method.ANY,\n  url: URL = URL.empty,\n  headers: Headers = Headers.empty,\n  body: Body = Body.empty,\n  remoteAddress: Option[InetAddress] = None,\n) extends HeaderOps[Request]\n")),(0,r.yg)("p",null,"The below snippet creates a request with default params, ",(0,r.yg)("inlineCode",{parentName:"p"},"headers")," as ",(0,r.yg)("inlineCode",{parentName:"p"},"Headers.empty"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," as ",(0,r.yg)("inlineCode",{parentName:"p"},"Body.Empty"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"remoteAddress")," as ",(0,r.yg)("inlineCode",{parentName:"p"},"None"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.http._\n\nRequest(method = Method.GET, url = URL(Path.root))\n// res1: Request = Request(\n//   version = Default,\n//   method = GET,\n//   url = URL(\n//     path = Path(flags = 3, segments = IndexedSeq()),\n//     kind = Relative,\n//     queryParams = JavaLinkedHashMapQueryParams(underlying = {}),\n//     fragment = None\n//   ),\n//   headers = Iterable(),\n//   body = Body.empty,\n//   remoteAddress = None,\n//   remoteCertificate = None\n// )\n")),(0,r.yg)("p",null,"There are also some helper methods to create requests for different HTTP methods inside the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request"),"'s companion object: ",(0,r.yg)("inlineCode",{parentName:"p"},"delete"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"get"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"head"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"options"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"patch"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"post"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"put"),"."),(0,r.yg)("p",null,"We can access the request's details using the below fields:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"method")," to access request method"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"headers")," to get all the headers in the Request"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"body")," to access the content of the request as a ",(0,r.yg)("inlineCode",{parentName:"li"},"Body")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"url")," to access request URL"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"remoteAddress")," to access the request's remote address if available"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"version")," to access the HTTP version")),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Please note that usually, we don't create requests on the server-side. Creating requests is useful while writing unit tests or when we call other services using the ZIO HTTP Client.")),(0,r.yg)("h2",{id:"request-with-query-params"},"Request with Query Params"),(0,r.yg)("p",null,"Query params can be added in the request using ",(0,r.yg)("inlineCode",{parentName:"p"},"url")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"Request"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"URL")," stores query params as ",(0,r.yg)("inlineCode",{parentName:"p"},"Map[String, List[String]]"),"."),(0,r.yg)("p",null,"The below snippet creates a request with query params: ",(0,r.yg)("inlineCode",{parentName:"p"},"?q=a&q=b&q=c")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nRequest.get(url = URL(Path.root, queryParams = QueryParams("q" -> Chunk("a","b","c"))))\n')),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#url.queryParams")," can be used to read query params from the request."),(0,r.yg)("h2",{id:"operations"},"Operations"),(0,r.yg)("h3",{id:"leadingtrailing-slash"},"Leading/Trailing Slash"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," class provides the following methods to add or drop leading/trailing slashes from the URL:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"addLeadingSlash")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"addTrailingSlash")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"dropLeadingSlash")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"dropTrailingSlash"))),(0,r.yg)("h3",{id:"patching-requests"},"Patching Requests"),(0,r.yg)("p",null,"To patch a request, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"patch")," method, which takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"Request.Patch")," as input:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nRequest\n  .get("http://localhost:8080/users")\n  .patch(\n    Request.Patch(\n      addHeaders = Headers(Header.ContentType(MediaType.application.`json`)),\n      addQueryParams = QueryParams("role" -> Chunk("reviewer", "editor"))\n    )\n  )\n// res3: Request = Request(\n//   version = Default,\n//   method = GET,\n//   url = URL(\n//     path = Path(flags = 1, segments = IndexedSeq("users")),\n//     kind = Absolute(\n//       scheme = HTTP,\n//       host = "localhost",\n//       originalPort = Some(value = 8080)\n//     ),\n//     queryParams = JavaLinkedHashMapQueryParams(\n//       underlying = {role=[reviewer, editor]}\n//     ),\n//     fragment = None\n//   ),\n//   headers = Iterable(\n//     ContentType(\n//       mediaType = MediaType(\n//         mainType = "application",\n//         subType = "json",\n//         compressible = true,\n//         binary = false,\n//         fileExtensions = List("json", "map"),\n//         extensions = Map(),\n//         parameters = Map()\n//       ),\n//       boundary = None,\n//       charset = None\n//     )\n//   ),\n//   body = Body.empty,\n//   remoteAddress = None,\n//   remoteCertificate = None\n// )\n')),(0,r.yg)("h3",{id:"request-headers"},"Request Headers"),(0,r.yg)("p",null,"There are several methods available to get, update, and remove headers from a ",(0,r.yg)("inlineCode",{parentName:"p"},"Request"),":"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"To access headers, we can use the following methods:"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Request#header")," to get a single header"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Request#headerOrFail")," to get a single header or fail if it doesn't exist"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Request#headers")," to get all headers"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"Request#rawHeader")," to get a single header as a string"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"To update headers, the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#updateHeaders")," takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"Headers => Headers")," function as input and returns a new ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," with updated headers.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"To add headers, the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#addHeader")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#addHeaders")," methods are available.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"To remove headers, the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#removeHeader")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#removeHeaders")," methods are available.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"To set headers, the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#setHeaders")," method is available."))),(0,r.yg)("h3",{id:"request-body"},"Request Body"),(0,r.yg)("p",null,"There are several methods available to get, update, and remove body from a ",(0,r.yg)("inlineCode",{parentName:"p"},"Request"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"Request#body")," accesses the body of the request."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"Request#withBody")," takes a ",(0,r.yg)("inlineCode",{parentName:"li"},"Body")," as input and returns a new ",(0,r.yg)("inlineCode",{parentName:"li"},"Request")," with the updated body."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"Request#updateBody")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"Request#updateBody")," a ",(0,r.yg)("inlineCode",{parentName:"li"},"Body => Body")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"Body => ZIO[R, E, Body]")," function as input and returns a new ",(0,r.yg)("inlineCode",{parentName:"li"},"Request")," with the updated body."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"Request#collect")," collects the streaming body of the request and returns a new ",(0,r.yg)("inlineCode",{parentName:"li"},"Request")," with the collected body."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"Request#ignoreBody")," consumes the streaming body fully and returns a new ",(0,r.yg)("inlineCode",{parentName:"li"},"Request")," with an empty body.")),(0,r.yg)("h3",{id:"retrieving-query-parameters"},"Retrieving Query Parameters"),(0,r.yg)("p",null,"There are several methods available to access query parameters from a ",(0,r.yg)("inlineCode",{parentName:"p"},"Request"),"."),(0,r.yg)("p",null,"To get a single query parameter, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParam")," method that takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"String")," as the input key and returns an ",(0,r.yg)("inlineCode",{parentName:"p"},"Option[String]"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'// curl -X GET https://localhost:8080/search?q=value -i\nimport zio._\nimport zio.http._\n\nobject QueryParamExample extends ZIOAppDefault {\n\n  val app =\n    Routes(\n      Method.GET / "search" -> handler { (req: Request) =>\n        val queries = req.queryParam("q")\n        queries match {\n          case Some(value) =>\n            Response.text(s"Value of query param q is $value")\n          case None        =>\n            Response.badRequest(s"The q query parameter is missing!")\n        }\n      },\n    )\n\n  def run = Server.serve(app).provide(Server.default)\n}\n')),(0,r.yg)("p",null,"The typed version of ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParam")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParamTo")," which takes a key and a type parameter of type ",(0,r.yg)("inlineCode",{parentName:"p"},"T")," and finally returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"Either[QueryParamsError, T]")," value:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'// curl -X GET https://localhost:8080/search?age=42 -i\nimport zio.http._\nobject TypedQueryParamExample extends ZIOAppDefault {\n  val app =\n    Routes(\n      Method.GET / "search" -> Handler.fromFunctionHandler { (req: Request) =>\n        val response: ZIO[Any, QueryParamsError, Response] =\n          ZIO.fromEither(req.queryParamTo[Int]("age"))\n             .map(value => Response.text(s"The value of age query param is: $value"))\n\n        Handler.fromZIO(response).catchAll {\n          case QueryParamsError.Missing(name)                  =>\n            Handler.badRequest(s"The $name query param is missing")\n          case QueryParamsError.Malformed(name, codec, values) =>\n            Handler.badRequest(s"The value of $name query param is malformed")\n        }\n      },\n    )\n\n  def run = Server.serve(app).provide(Server.default)\n}\n')),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"In the above example, instead of using ",(0,r.yg)("inlineCode",{parentName:"p"},'ZIO.fromEither(req.queryParamTo[Int]("age"))')," we can use ",(0,r.yg)("inlineCode",{parentName:"p"},'req.queryParamToZIO[Int]("age")')," to get a ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO")," value directly which encodes the error type in the ZIO effect.")),(0,r.yg)("p",null,"To retrieve all query parameter values for a key, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParams")," method that takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"String")," as the input key and returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"Chunk[String]"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'// curl -X GET https://localhost:8080/search?q=value1&q=value2 -i\n\nimport zio._\nimport zio.http._\n\nobject QueryParamsExample extends ZIOAppDefault {\n  val app =\n    Routes(\n      Method.GET / "search" -> handler { (req: Request) =>\n        val queries = req.queryParams("q")\n        if (queries.nonEmpty) {\n          val text = queries.mkString("Here is the list of values for the q query param: [", ",", "]")\n          Response.text(text)\n        } else {\n          Response.badRequest(s"The q query parameter is missing!")\n        }\n      },\n    )\n\n  def run = Server.serve(app).provide(Server.default)\n}\n')),(0,r.yg)("p",null,"The typed version of ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParams")," is ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParamsTo")," which takes a key and a type parameter of type ",(0,r.yg)("inlineCode",{parentName:"p"},"T")," and finally returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"Either[QueryParamsError, Chunk[T]]")," value."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"All the above methods also have ",(0,r.yg)("inlineCode",{parentName:"p"},"OrElse")," versions which take a default value as input and return the default value if the query parameter is not found, e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParamOrElse"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParamToOrElse"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParamsOrElse"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParamsToOrElse"),".")),(0,r.yg)("p",null,"Using the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#queryParameters")," method, we can access the query parameters of the request which returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"QueryParams")," object."),(0,r.yg)("h3",{id:"modifying-query-parameters"},"Modifying Query Parameters"),(0,r.yg)("p",null,"When we are working with ZIO HTTP Client, we need to create a new ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," and may need to set/update/remove query parameters. In such cases, we have the following methods available: ",(0,r.yg)("inlineCode",{parentName:"p"},"addQueryParam"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"addQueryParams"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"removeQueryParam"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"removeQueryParams"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"setQueryParams"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"updateQueryParams"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nobject QueryParamClientExample extends ZIOAppDefault {\n  def run =\n    Client.batched(\n      Request\n        .get("http://localhost:8080/search")\n        .addQueryParam("language", "scala")\n        .addQueryParam("q", "How to Write HTTP App")\n        .addQueryParams("tag", Chunk("zio", "http", "scala")),\n    ).provide(Client.default)\n}\n')),(0,r.yg)("p",null,"The above example sends a GET request to ",(0,r.yg)("inlineCode",{parentName:"p"},"http://localhost:8080/search?language=scala&q=How+to+Write+HTTP+App&tag=zio&tag=http&tag=scala"),"."),(0,r.yg)("h3",{id:"retrieving-urlpath"},"Retrieving URL/Path"),(0,r.yg)("p",null,"To access the URL of the request, we can utilize the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#url")," method, which yields a ",(0,r.yg)("inlineCode",{parentName:"p"},"URL")," object. For updating the URL of the request, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#updateURL")," method, which takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"URL => URL")," function as input. This function allows us to update the URL and return a new ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," object with the updated URL."),(0,r.yg)("p",null,"If we want to access the path of the request, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#path")," method which returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"Path")," object. Also, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#path")," method which takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"Path")," and returns a new ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," with the updated path."),(0,r.yg)("h3",{id:"retrieving-cookies-and-flashes"},"Retrieving Cookies and Flashes"),(0,r.yg)("p",null,"Cookies and Flashes"),(0,r.yg)("p",null,"To access all cookies in the request, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#cookies")," method which returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"Chunk[Cookie]"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val cookies = request.cookies\n// cookies: Chunk[Cookie] = IndexedSeq(\n//   Request(name = "key1", content = "value1"),\n//   Request(name = "key2", content = "value2")\n// )\n')),(0,r.yg)("p",null,"To access a single cookie, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#cookie")," method which takes the name of the cookie as input and returns an ",(0,r.yg)("inlineCode",{parentName:"p"},"Option[Cookie]"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val cookie = request.cookie("key1")\n// cookie: Option[Cookie] = Some(\n//   value = Request(name = "key1", content = "value1")\n// )\n')),(0,r.yg)("p",null,"To encode errors in the ZIO effect when a cookie is not found, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#cookieWithOrFail")," method which takes three groups of parameters: name of the cookie, error message, and finally a function that takes a cookie and returns a ",(0,r.yg)("inlineCode",{parentName:"p"},"ZIO")," effect:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"trait Request {\n  def cookieWithOrFail[R, E, A](name: String)(missingCookieError: E)(f: Cookie => ZIO[R, E, A]): ZIO[R, E, A]\n}\n")),(0,r.yg)("p",null,"Here is an example of using ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#cookieWithOrFail"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'case class CookieNotFound(cookie: String)\n\nval key = "key3"\nval effect: ZIO[Any, CookieNotFound, Cookie] = \n  request.cookieWithOrFail(key)(CookieNotFound(key))(c => ZIO.succeed(c))\n')),(0,r.yg)("p",null,"Or simply use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#cookieWithZIO")," method which does the same but ",(0,r.yg)("inlineCode",{parentName:"p"},"Throwable")," is used as the error type:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val effect: ZIO[Any, Throwable, Cookie] = \n  request.cookieWithZIO("key3")(c => ZIO.succeed(c))\n')),(0,r.yg)("p",null,"To get a flash message of type ",(0,r.yg)("inlineCode",{parentName:"p"},"A")," with the given key, we can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request#flash")," method which takes a ",(0,r.yg)("inlineCode",{parentName:"p"},"Flash[A]")," as input and returns an ",(0,r.yg)("inlineCode",{parentName:"p"},"Option[A]"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val flashValue = request.flash(Flash.get[Int]("key1"))\n')),(0,r.yg)("h2",{id:"client-side-example"},"Client-side Example"),(0,r.yg)("p",null,"In the below example, we are creating a ",(0,r.yg)("inlineCode",{parentName:"p"},"Request")," using the ",(0,r.yg)("inlineCode",{parentName:"p"},"Request.get")," method and then calling the ",(0,r.yg)("inlineCode",{parentName:"p"},"Client.batched")," method to send the request to the servers:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nobject ClientExample extends ZIOAppDefault {\n  def run = Client\n    .batched(Request.get("http://localhost:8080/users/2"))\n    .flatMap(_.body.asString)\n    .debug("Response Body: ")\n    .provide(Client.default)\n\n}\n')))}m.isMDXComponent=!0}}]);