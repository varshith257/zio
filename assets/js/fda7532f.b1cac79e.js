"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2193],{15680:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>y});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),f=c(r),m=o,y=f["".concat(l,".").concat(m)]||f[m]||u[m]||a;return r?t.createElement(y,i(i({ref:n},s),{},{components:r})):t.createElement(y,i({ref:n},s))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[f]="string"==typeof e?e:o,i[1]=p;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8188:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var t=r(58168),o=(r(96540),r(15680));const a={id:"flattening-optional-error-types",title:"Flattening Optional Error Types"},i=void 0,p={unversionedId:"reference/error-management/operations/flattening-optional-error-types",id:"reference/error-management/operations/flattening-optional-error-types",title:"Flattening Optional Error Types",description:"If we have an optional error of type E in the error channel, we can flatten it to the E type using the ZIO#flattenErrorOption operator:",source:"@site/docs/reference/error-management/operations/flattening-optional-error-types.md",sourceDirName:"reference/error-management/operations",slug:"/reference/error-management/operations/flattening-optional-error-types",permalink:"/reference/error-management/operations/flattening-optional-error-types",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/flattening-optional-error-types.md",tags:[],version:"current",frontMatter:{id:"flattening-optional-error-types",title:"Flattening Optional Error Types"},sidebar:"reference-sidebar",previous:{title:"Error Refinement",permalink:"/reference/error-management/operations/error-refinement"},next:{title:"Merging the Error Channel into the Success Channel",permalink:"/reference/error-management/operations/merging-the-error-channel-into-the-success-channel"}},l={},c=[],s={toc:c},f="wrapper";function u(e){let{components:n,...r}=e;return(0,o.yg)(f,(0,t.A)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"If we have an optional error of type ",(0,o.yg)("inlineCode",{parentName:"p"},"E")," in the error channel, we can flatten it to the ",(0,o.yg)("inlineCode",{parentName:"p"},"E")," type using the ",(0,o.yg)("inlineCode",{parentName:"p"},"ZIO#flattenErrorOption")," operator:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ndef parseInt(input: String): ZIO[Any, Option[String], Int] =\n  if (input.isEmpty)\n    ZIO.fail(Some("empty input"))\n  else\n    try {\n      ZIO.succeed(input.toInt)\n    } catch {\n      case _: NumberFormatException => ZIO.fail(None)\n    }\n\ndef flattenedParseInt(input: String): ZIO[Any, String, Int] =\n  parseInt(input).flattenErrorOption("non-numeric input")\n\nval r1: ZIO[Any, String, Int] = flattenedParseInt("zero")\nval r2: ZIO[Any, String, Int] = flattenedParseInt("")\nval r3: ZIO[Any, String, Int] = flattenedParseInt("123")\n')))}u.isMDXComponent=!0}}]);