"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[10232],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),y=a,m=d["".concat(p,".").concat(y)]||d[y]||g[y]||i;return t?r.createElement(m,o(o({ref:n},s),{},{components:t})):r.createElement(m,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},86496:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const i={id:"console",title:"Console"},o=void 0,l={unversionedId:"reference/services/console",id:"reference/services/console",title:"Console",description:"The Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console.",source:"@site/docs/reference/services/console.md",sourceDirName:"reference/services",slug:"/reference/services/console",permalink:"/reference/services/console",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/services/console.md",tags:[],version:"current",frontMatter:{id:"console",title:"Console"},sidebar:"reference-sidebar",previous:{title:"Introduction to ZIO's Built-in Services",permalink:"/reference/services/"},next:{title:"Clock",permalink:"/reference/services/clock"}},p={},c=[],s={toc:c},d="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(d,(0,r.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"The Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Function"),(0,a.yg)("th",{parentName:"tr",align:null},"Input Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Output Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"print")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"ZIO[Any, IOException, Unit]"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"printError")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"ZIO[Any, IOException, Unit]"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"printLine")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"ZIO[Any, IOException, Unit]"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"printLineError")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"line: => String")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"ZIO[Any, IOException, Unit]"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"readLine")),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"ZIO[Any, IOException, String]"))))),(0,a.yg)("p",null,"All functions of the Console service are effectful, this means they are just descriptions of reading/writing from/to the console. "),(0,a.yg)("p",null,"As ZIO data type supports monadic operations, we can compose these functions with for-comprehension which helps us to write our program pretty much like an imperative program:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'import java.io.IOException\n\nimport zio._\nimport zio.Console._\n\nobject MyHelloApp extends ZIOAppDefault {\n  val program: ZIO[Any, IOException, Unit] = for {\n    _    <- printLine("Hello, what is you name?")\n    name <- readLine\n    _    <- printLine(s"Hello $name, welcome to ZIO!")\n  } yield ()\n\n  def run = program\n}\n')),(0,a.yg)("p",null,"Note again, every line of our ",(0,a.yg)("inlineCode",{parentName:"p"},"program")," are descriptions, not statements. As we can see the type of our ",(0,a.yg)("inlineCode",{parentName:"p"},"program")," is ",(0,a.yg)("inlineCode",{parentName:"p"},"ZIO[Any, IOException, Unit]"),", it means to run ",(0,a.yg)("inlineCode",{parentName:"p"},"program")," we do not need any environment, it may fail due to failure of ",(0,a.yg)("inlineCode",{parentName:"p"},"readLine")," and it will produce ",(0,a.yg)("inlineCode",{parentName:"p"},"Unit")," value."))}g.isMDXComponent=!0}}]);