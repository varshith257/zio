"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[14797],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>c});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},g="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),g=p(t),d=r,c=g["".concat(s,".").concat(d)]||g[d]||y[d]||i;return t?a.createElement(c,o(o({ref:n},m),{},{components:t})):a.createElement(c,o({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(58168),r=(t(96540),t(15680));const i={id:"hash",title:"Hash"},o=void 0,l={unversionedId:"zio-crypto/hash",id:"zio-crypto/hash",title:"Hash",description:"The Hash environment provides basic 1-way hash functions.",source:"@site/docs/zio-crypto/hashing.md",sourceDirName:"zio-crypto",slug:"/zio-crypto/hash",permalink:"/zio-crypto/hash",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-crypto/hashing.md",tags:[],version:"current",frontMatter:{id:"hash",title:"Hash"},sidebar:"ecosystem-sidebar",previous:{title:"Secure Random",permalink:"/zio-crypto/secure-random"},next:{title:"HMAC",permalink:"/zio-crypto/hmac"}},s={},p=[{value:"Algorithms",id:"algorithms",level:2},{value:"API",id:"api",level:2},{value:"Usage",id:"usage",level:2},{value:"Secure",id:"secure",level:3},{value:"String Example",id:"string-example",level:2},{value:"Byte Example",id:"byte-example",level:2}],m={toc:p},g="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"Hash")," environment provides basic 1-way hash functions."),(0,r.yg)("h2",{id:"algorithms"},"Algorithms"),(0,r.yg)("p",null,"We support MD5, SHA1, SHA256, SHA384, and SHA512."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Function"),(0,r.yg)("th",{parentName:"tr",align:null},"Security (in bits) against collision attacks"),(0,r.yg)("th",{parentName:"tr",align:null},"Dangerous?"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"MD5"),(0,r.yg)("td",{parentName:"tr",align:null},"<= 18 (collisions found)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("em",{parentName:"td"},"DANGEROUS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"SHA1"),(0,r.yg)("td",{parentName:"tr",align:null},"< 63 (collisions found)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("em",{parentName:"td"},"DANGEROUS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"SHA256"),(0,r.yg)("td",{parentName:"tr",align:null},"128"),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"SHA384"),(0,r.yg)("td",{parentName:"tr",align:null},"192"),(0,r.yg)("td",{parentName:"tr",align:null})),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"SHA512"),(0,r.yg)("td",{parentName:"tr",align:null},"256"),(0,r.yg)("td",{parentName:"tr",align:null})))),(0,r.yg)("h2",{id:"api"},"API"),(0,r.yg)("p",null,"There are two basic functions provided: ",(0,r.yg)("inlineCode",{parentName:"p"},"hash")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"verify"),".\nFor any message ",(0,r.yg)("inlineCode",{parentName:"p"},"m"),", we have that ",(0,r.yg)("inlineCode",{parentName:"p"},"verify(m, hash(m)) == true"),",\nand for any two messages ",(0,r.yg)("inlineCode",{parentName:"p"},"m1"),"and ",(0,r.yg)("inlineCode",{parentName:"p"},"m2")," where ",(0,r.yg)("inlineCode",{parentName:"p"},"m1 != m2"),",\n",(0,r.yg)("inlineCode",{parentName:"p"},"verify(m1, hash(m2)) == false"),"."),(0,r.yg)("p",null,"Both ",(0,r.yg)("inlineCode",{parentName:"p"},"hash")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"verify")," are implemented in terms of\n",(0,r.yg)("inlineCode",{parentName:"p"},"String")," (provided you specify a ",(0,r.yg)("inlineCode",{parentName:"p"},"Charset"),") and ",(0,r.yg)("inlineCode",{parentName:"p"},"Chunk[Byte]"),"."),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("p",null,"To use the hashing service, simply call the method hash\nwith a type parameter specifying the algorithm you wish\nto use."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import java.nio.charset.StandardCharsets.US_ASCII\nimport zio.crypto.hash.{Hash, HashAlgorithm}\nHash.hash[HashAlgorithm.SHA256]("hello", US_ASCII)\n')),(0,r.yg)("p",null,"However, we need to take special case when using algorithms\nmarked ",(0,r.yg)("em",{parentName:"p"},"DANGEROUS")," in the table above."),(0,r.yg)("h3",{id:"secure"},"Secure"),(0,r.yg)("p",null,"If you're using ",(0,r.yg)("inlineCode",{parentName:"p"},"MD5")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"SHA1"),", you need to explicitly not recognize that\nthe function you're calling is unsecure. To do so, use the function ",(0,r.yg)("inlineCode",{parentName:"p"},"zio.crypto.unsecure")," as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.crypto.unsecure\nunsecure(implicit s => Hash.hash[HashAlgorithm.MD5]("hello", US_ASCII))\n')),(0,r.yg)("h2",{id:"string-example"},"String Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import java.nio.charset.StandardCharsets.US_ASCII\nimport zio.crypto.hash.{Hash, HashAlgorithm}\n\nobject Example extends zio.App {\n  override def run(args: List[String]) = (for {\n    digest <- Hash.hash[HashAlgorithm.SHA256](\n      m = "hello",\n      charset = US_ASCII\n    )\n    verified <- Hash.verify[HashAlgorithm.SHA256](\n      m = "hello",\n      digest = digest,\n      charset = US_ASCII\n    )\n  } yield verified).exitCode\n    .provideCustomLayer(Hash.live)\n}\n')),(0,r.yg)("h2",{id:"byte-example"},"Byte Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.crypto.hash.{Hash, HashAlgorithm}\nimport zio.crypto.random.SecureRandom\n\nobject Example extends zio.App {\n  override def run(args: List[String]) = (for {\n    m <- SecureRandom.nextBytes(10)\n    digest <- Hash.hash[HashAlgorithm.SHA256](\n      m = m\n    )\n    verified <- Hash.verify[HashAlgorithm.SHA256](\n      m = m,\n      digest = digest\n    )\n  } yield verified).exitCode\n    .provideCustomLayer(Hash.live ++ SecureRandom.live.orDie)\n}\n")))}y.isMDXComponent=!0}}]);